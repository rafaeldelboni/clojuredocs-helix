[{"fixed-arities":[3],"end-row":43,"meta":{},"name-end-col":21,"index":0,"name-end-row":30,"name-row":30,"ns":"clojure.template","name":"apply-template","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/template.clj#L30","lang":[],"filename":"/src/clj/clojure/template.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[argv expr values]"],"doc":"For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template '[x] '(+ x x) '[2])\n           ;=> (+ 2 2)","row":30},{"end-row":55,"meta":{},"name-end-col":22,"index":0,"name-end-row":45,"name-row":45,"ns":"clojure.template","name":"do-template","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/template.clj#L45","lang":[],"filename":"/src/clj/clojure/template.clj","macro":true,"col":1,"name-col":11,"end-col":41,"arglist-strs":["[argv expr & values]"],"varargs-min-arity":2,"doc":"Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))","row":45}]