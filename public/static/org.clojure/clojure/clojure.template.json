[{"arglist-strs":["[argv expr values]"],"doc":"For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template '[x] '(+ x x) '[2])\n           ;=> (+ 2 2)","end-row":43,"filename":"clojure/template.clj","fixed-arities":[3],"name":"apply-template","ns":"clojure.template","row":30},{"arglist-strs":["[argv expr & values]"],"doc":"Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))","end-row":55,"filename":"clojure/template.clj","macro":true,"name":"do-template","ns":"clojure.template","row":45}]