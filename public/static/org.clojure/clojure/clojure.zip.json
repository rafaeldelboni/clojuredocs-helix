[{"arglist-strs":["[branch? children make-node root]"],"doc":"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.","end-row":33,"filename":"clojure/zip.clj","fixed-arities":[4],"name":"zipper","ns":"clojure.zip","row":18},{"arglist-strs":["[root]"],"doc":"Returns a zipper for nested sequences, given a root sequence","end-row":42,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"seq-zip","ns":"clojure.zip","row":35},{"arglist-strs":["[root]"],"doc":"Returns a zipper for nested vectors, given a root vector","end-row":51,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"vector-zip","ns":"clojure.zip","row":44},{"arglist-strs":["[root]"],"doc":"Returns a zipper for xml elements (as from xml/parse),\n  given a root element","end-row":62,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"xml-zip","ns":"clojure.zip","row":53},{"arglist-strs":["[loc]"],"doc":"Returns the node at loc","end-row":67,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"node","ns":"clojure.zip","row":64},{"arglist-strs":["[loc]"],"doc":"Returns true if the node at loc is a branch","end-row":73,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"branch?","ns":"clojure.zip","row":69},{"arglist-strs":["[loc]"],"doc":"Returns a seq of the children of node at loc, which must be a branch","end-row":81,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"children","ns":"clojure.zip","row":75},{"arglist-strs":["[loc node children]"],"doc":"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.","end-row":88,"filename":"clojure/zip.clj","fixed-arities":[3],"name":"make-node","ns":"clojure.zip","row":83},{"arglist-strs":["[loc]"],"doc":"Returns a seq of nodes leading to this loc","end-row":94,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"path","ns":"clojure.zip","row":90},{"arglist-strs":["[loc]"],"doc":"Returns a seq of the left siblings of this loc","end-row":100,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"lefts","ns":"clojure.zip","row":96},{"arglist-strs":["[loc]"],"doc":"Returns a seq of the right siblings of this loc","end-row":106,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"rights","ns":"clojure.zip","row":102},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children","end-row":121,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"down","ns":"clojure.zip","row":109},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the parent of the node at this loc, or nil if at\n  the top","end-row":135,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"up","ns":"clojure.zip","row":123},{"arglist-strs":["[loc]"],"doc":"zips all the way up and returns the root node, reflecting any\n changes.","end-row":147,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"root","ns":"clojure.zip","row":137},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the right sibling of the node at this loc, or nil","end-row":155,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"right","ns":"clojure.zip","row":149},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the rightmost sibling of the node at this loc, or self","end-row":164,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"rightmost","ns":"clojure.zip","row":157},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the left sibling of the node at this loc, or nil","end-row":172,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"left","ns":"clojure.zip","row":166},{"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost sibling of the node at this loc, or self","end-row":181,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"leftmost","ns":"clojure.zip","row":174},{"arglist-strs":["[loc item]"],"doc":"Inserts the item as the left sibling of the node at this loc,\n without moving","end-row":191,"filename":"clojure/zip.clj","fixed-arities":[2],"name":"insert-left","ns":"clojure.zip","row":183},{"arglist-strs":["[loc item]"],"doc":"Inserts the item as the right sibling of the node at this loc,\n  without moving","end-row":201,"filename":"clojure/zip.clj","fixed-arities":[2],"name":"insert-right","ns":"clojure.zip","row":193},{"arglist-strs":["[loc node]"],"doc":"Replaces the node at this loc, without moving","end-row":208,"filename":"clojure/zip.clj","fixed-arities":[2],"name":"replace","ns":"clojure.zip","row":203},{"arglist-strs":["[loc f & args]"],"doc":"Replaces the node at this loc with the value of (f node args)","end-row":214,"filename":"clojure/zip.clj","name":"edit","ns":"clojure.zip","row":210},{"arglist-strs":["[loc item]"],"doc":"Inserts the item as the leftmost child of the node at this loc,\n  without moving","end-row":221,"filename":"clojure/zip.clj","fixed-arities":[2],"name":"insert-child","ns":"clojure.zip","row":216},{"arglist-strs":["[loc item]"],"doc":"Inserts the item as the rightmost child of the node at this loc,\n  without moving","end-row":228,"filename":"clojure/zip.clj","fixed-arities":[2],"name":"append-child","ns":"clojure.zip","row":223},{"arglist-strs":["[loc]"],"doc":"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.","end-row":244,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"next","ns":"clojure.zip","row":230},{"arglist-strs":["[loc]"],"doc":"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.","end-row":256,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"prev","ns":"clojure.zip","row":246},{"arglist-strs":["[loc]"],"doc":"Returns true if loc represents the end of a depth-first walk","end-row":262,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"end?","ns":"clojure.zip","row":258},{"arglist-strs":["[loc]"],"doc":"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.","end-row":279,"filename":"clojure/zip.clj","fixed-arities":[1],"name":"remove","ns":"clojure.zip","row":264},{"end-row":285,"filename":"clojure/zip.clj","name":"data","ns":"clojure.zip","row":285},{"end-row":286,"filename":"clojure/zip.clj","name":"dz","ns":"clojure.zip","row":286}]