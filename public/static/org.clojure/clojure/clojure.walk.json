[{"fixed-arities":[2],"end-row":116,"meta":{},"name-end-col":22,"index":0,"name-end-row":110,"name-row":110,"added":"1.1","ns":"clojure.walk","name":"prewalk-replace","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L110","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":62,"arglist-strs":["[smap form]"],"doc":"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.","row":110},{"fixed-arities":[1],"end-row":92,"meta":{},"name-end-col":19,"index":0,"name-end-row":87,"name-row":87,"added":"1.1","ns":"clojure.walk","name":"prewalk-demo","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L87","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[form]"],"doc":"Demonstrates the behavior of prewalk by printing each form as it is\n  walked.  Returns form.","row":87},{"fixed-arities":[3],"end-row":51,"meta":{},"name-end-col":11,"index":0,"name-end-row":35,"name-row":35,"added":"1.1","ns":"clojure.walk","name":"walk","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L35","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[inner outer form]"],"doc":"Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.","row":35},{"fixed-arities":[1],"end-row":85,"meta":{},"name-end-col":20,"index":0,"name-end-row":80,"name-row":80,"added":"1.1","ns":"clojure.walk","name":"postwalk-demo","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L80","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[form]"],"doc":"Demonstrates the behavior of postwalk by printing each form as it is\n  walked.  Returns form.","row":80},{"fixed-arities":[1],"end-row":108,"meta":{},"name-end-col":21,"index":0,"name-end-row":102,"name-row":102,"added":"1.1","ns":"clojure.walk","name":"stringify-keys","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L102","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[m]"],"doc":"Recursively transforms all map keys from keywords to strings.","row":102},{"fixed-arities":[1],"end-row":100,"meta":{},"name-end-col":22,"index":0,"name-end-row":94,"name-row":94,"added":"1.1","ns":"clojure.walk","name":"keywordize-keys","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L94","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[m]"],"doc":"Recursively transforms all map keys from strings to keywords.","row":94},{"fixed-arities":[2],"end-row":59,"meta":{},"name-end-col":15,"index":0,"name-end-row":53,"name-row":53,"added":"1.1","ns":"clojure.walk","name":"postwalk","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L53","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[f form]"],"doc":"Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.","row":53},{"fixed-arities":[2],"end-row":65,"meta":{},"name-end-col":14,"index":0,"name-end-row":61,"name-row":61,"added":"1.1","ns":"clojure.walk","name":"prewalk","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L61","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[f form]"],"doc":"Like postwalk, but does pre-order traversal.","row":61},{"fixed-arities":[1],"end-row":130,"meta":{},"name-end-col":22,"index":0,"name-end-row":126,"name-row":126,"added":"1.1","ns":"clojure.walk","name":"macroexpand-all","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L126","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[form]"],"doc":"Recursively performs all possible macroexpansions in form.","row":126},{"fixed-arities":[2],"end-row":124,"meta":{},"name-end-col":23,"index":0,"name-end-row":118,"name-row":118,"added":"1.1","ns":"clojure.walk","name":"postwalk-replace","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L118","lang":[],"filename":"/src/clj/clojure/walk.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[smap form]"],"doc":"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.","row":118}]