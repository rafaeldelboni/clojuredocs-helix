[{"doc":"Protocol for reflection implementers.","end-row":46,"filename":"clojure/reflect.clj","name":"Reflector","ns":"clojure.reflect","row":44},{"arglist-strs":["[reflector typeref]"],"end-row":46,"filename":"clojure/reflect.clj","fixed-arities":[2],"name":"do-reflect","ns":"clojure.reflect","row":46},{"doc":"A TypeReference can be unambiguously converted to a type name on\n   the host platform.\n\n   All typerefs are normalized into symbols. If you need to\n   normalize a typeref yourself, call typesym.","end-row":54,"filename":"clojure/reflect.clj","name":"TypeReference","ns":"clojure.reflect","row":48},{"arglist-strs":["[o]"],"doc":"Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]","end-row":54,"filename":"clojure/reflect.clj","fixed-arities":[1],"name":"typename","ns":"clojure.reflect","row":54},{"end-row":56,"filename":"clojure/reflect.clj","name":"default-reflector","ns":"clojure.reflect","row":56},{"arglist-strs":["[typeref & options]"],"doc":"Alpha - subject to change.\n   Reflect on a typeref, returning a map with :bases, :flags, and\n  :members. In the discussion below, names are always Clojure symbols.\n\n   :bases            a set of names of the type's bases\n   :flags            a set of keywords naming the boolean attributes\n                     of the type.\n   :members          a set of the type's members. Each member is a map\n                     and can be a constructor, method, or field.\n\n   Keys common to all members:\n   :name             name of the type \n   :declaring-class  name of the declarer\n   :flags            keyword naming boolean attributes of the member\n\n   Keys specific to constructors:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n\n   Key specific to methods:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n   :return-type      return type name\n\n   Keys specific to fields:\n   :type             type name\n\n   Options:\n\n     :ancestors     in addition to the keys described above, also\n                    include an :ancestors key with the entire set of\n                    ancestors, and add all ancestor members to\n                    :members.\n     :reflector     implementation to use. Defaults to JavaReflector,\n                    AsmReflector is also an option.","end-row":113,"filename":"clojure/reflect.clj","name":"type-reflect","ns":"clojure.reflect","row":58},{"arglist-strs":["[obj & options]"],"doc":"Alpha - subject to change.\n   Reflect on the type of obj (or obj itself if obj is a class).\n   Return value and options are the same as for type-reflect. ","end-row":121,"filename":"clojure/reflect.clj","name":"reflect","ns":"clojure.reflect","row":115},{"fixed-arities":[1],"end-row":45,"private":true,"ns":"clojure.reflect","name":"typesym","filename":"clojure/reflect/java.clj","arglist-strs":["[t]"],"doc":"Given a typeref, create a legal Clojure symbol version of the\n   type's name.","row":36},{"fixed-arities":[1],"end-row":53,"private":true,"ns":"clojure.reflect","name":"resource-name","filename":"clojure/reflect/java.clj","arglist-strs":["[typeref]"],"doc":"Given a typeref, return implied resource name. Used by Reflectors\n   such as ASM that need to find and read classbytes from files.","row":47},{"arglist-strs":["[[name flag & contexts]]"],"end-row":57,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"access-flag","ns":"clojure.reflect","private":true,"row":55},{"fixed-arities":[1],"end-row":65,"private":true,"ns":"clojure.reflect","name":"field-descriptor->class-symbol","filename":"clojure/reflect/java.clj","arglist-strs":["[d]"],"doc":"Convert a Java field descriptor to a Clojure class symbol. Field\n   descriptors are described in section 4.3.2 of the JVM spec, 2nd ed.:\n   http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#14152","row":59},{"fixed-arities":[1],"end-row":75,"private":true,"ns":"clojure.reflect","name":"internal-name->class-symbol","filename":"clojure/reflect/java.clj","arglist-strs":["[d]"],"doc":"Convert a Java internal name to a Clojure class symbol. Internal\n   names uses slashes instead of dots, e.g. java/lang/String. See\n   Section 4.2 of the JVM spec, 2nd ed.:\n\n   http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#14757","row":67},{"doc":"The Java access bitflags, along with their friendly names and\nthe kinds of objects to which they can apply.","end-row":101,"filename":"clojure/reflect/java.clj","name":"flag-descriptors","ns":"clojure.reflect","row":77},{"fixed-arities":[2],"end-row":113,"private":true,"ns":"clojure.reflect","name":"parse-flags","filename":"clojure/reflect/java.clj","arglist-strs":["[flags context]"],"doc":"Convert reflection bitflags into a set of keywords.","row":103},{"end-row":116,"filename":"clojure/reflect/java.clj","name":"Constructor","ns":"clojure.reflect","row":115},{"arglist-strs":["[name declaring-class parameter-types exception-types flags]"],"end-row":116,"filename":"clojure/reflect/java.clj","fixed-arities":[5],"name":"->Constructor","ns":"clojure.reflect","row":115},{"arglist-strs":["[m]"],"end-row":116,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"map->Constructor","ns":"clojure.reflect","row":115},{"arglist-strs":["[constructor]"],"end-row":125,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"constructor->map","ns":"clojure.reflect","private":true,"row":118},{"fixed-arities":[1],"end-row":132,"private":true,"ns":"clojure.reflect","name":"declared-constructors","filename":"clojure/reflect/java.clj","arglist-strs":["[cls]"],"doc":"Return a set of the declared constructors of class as a Clojure map.","row":127},{"end-row":135,"filename":"clojure/reflect/java.clj","name":"Method","ns":"clojure.reflect","row":134},{"arglist-strs":["[name return-type declaring-class parameter-types exception-types flags]"],"end-row":135,"filename":"clojure/reflect/java.clj","fixed-arities":[6],"name":"->Method","ns":"clojure.reflect","row":134},{"arglist-strs":["[m]"],"end-row":135,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"map->Method","ns":"clojure.reflect","row":134},{"arglist-strs":["[method]"],"end-row":145,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"method->map","ns":"clojure.reflect","private":true,"row":137},{"fixed-arities":[1],"end-row":152,"private":true,"ns":"clojure.reflect","name":"declared-methods","filename":"clojure/reflect/java.clj","arglist-strs":["[cls]"],"doc":"Return a set of the declared constructors of class as a Clojure map.","row":147},{"end-row":155,"filename":"clojure/reflect/java.clj","name":"Field","ns":"clojure.reflect","row":154},{"arglist-strs":["[name type declaring-class flags]"],"end-row":155,"filename":"clojure/reflect/java.clj","fixed-arities":[4],"name":"->Field","ns":"clojure.reflect","row":154},{"arglist-strs":["[m]"],"end-row":155,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"map->Field","ns":"clojure.reflect","row":154},{"arglist-strs":["[field]"],"end-row":163,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"field->map","ns":"clojure.reflect","private":true,"row":157},{"fixed-arities":[1],"end-row":170,"private":true,"ns":"clojure.reflect","name":"declared-fields","filename":"clojure/reflect/java.clj","arglist-strs":["[cls]"],"doc":"Return a set of the declared fields of class as a Clojure map.","row":165},{"arglist-strs":["[typeref classloader]"],"end-row":176,"filename":"clojure/reflect/java.clj","fixed-arities":[2],"name":"typeref->class","ns":"clojure.reflect","private":true,"row":172},{"end-row":186,"filename":"clojure/reflect/java.clj","name":"JavaReflector","ns":"clojure.reflect","row":178},{"arglist-strs":["[classloader]"],"end-row":186,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"->JavaReflector","ns":"clojure.reflect","row":178},{"end-row":189,"filename":"clojure/reflect/java.clj","name":"default-reflector","ns":"clojure.reflect","private":true,"row":188},{"arglist-strs":["[md]"],"end-row":194,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"parse-method-descriptor","ns":"clojure.reflect","private":true,"row":191},{"end-row":198,"filename":"clojure/reflect/java.clj","name":"ClassResolver","ns":"clojure.reflect","row":196},{"arglist-strs":["[this name]"],"doc":"Given a class name, return that typeref's class bytes as an InputStream.","end-row":198,"filename":"clojure/reflect/java.clj","fixed-arities":[2],"name":"resolve-class","ns":"clojure.reflect","row":197},{"end-row":266,"filename":"clojure/reflect/java.clj","name":"AsmReflector","ns":"clojure.reflect","row":208},{"arglist-strs":["[class-resolver]"],"end-row":266,"filename":"clojure/reflect/java.clj","fixed-arities":[1],"name":"->AsmReflector","ns":"clojure.reflect","row":208}]