[{"fixed-arities":[1],"end-row":125,"meta":{},"name-end-col":24,"name-end-row":118,"private":true,"name-row":118,"ns":"clojure.reflect","name":"constructor->map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L118","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[constructor]"],"row":118},{"end-row":135,"meta":{},"name-end-col":18,"name-end-row":134,"name-row":134,"ns":"clojure.reflect","name":"Method","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L134","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":76,"row":134},{"fixed-arities":[1],"end-row":135,"meta":{},"name-end-col":18,"name-end-row":134,"name-row":134,"ns":"clojure.reflect","name":"map->Method","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L134","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":76,"arglist-strs":["[m]"],"row":134},{"fixed-arities":[1],"end-row":132,"meta":{},"name-end-col":29,"name-end-row":127,"private":true,"name-row":127,"ns":"clojure.reflect","name":"declared-constructors","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L127","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[cls]"],"doc":"Return a set of the declared constructors of class as a Clojure map.","row":127},{"fixed-arities":[1],"end-row":53,"meta":{},"name-end-col":21,"name-end-row":47,"private":true,"name-row":47,"ns":"clojure.reflect","name":"resource-name","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L47","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":23,"arglist-strs":["[typeref]"],"doc":"Given a typeref, return implied resource name. Used by Reflectors\n   such as ASM that need to find and read classbytes from files.","row":47},{"end-row":189,"meta":{},"name-end-col":33,"name-end-row":188,"private":true,"name-row":188,"ns":"clojure.reflect","name":"default-reflector","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L188","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":16,"end-col":71,"row":188},{"end-row":121,"meta":{},"name-end-col":14,"name-end-row":115,"name-row":115,"added":"1.3","ns":"clojure.reflect","name":"reflect","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L115","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":1,"name-col":7,"end-col":66,"arglist-strs":["[obj & options]"],"varargs-min-arity":1,"doc":"Alpha - subject to change.\n   Reflect on the type of obj (or obj itself if obj is a class).\n   Return value and options are the same as for type-reflect. ","row":115},{"fixed-arities":[5],"end-row":116,"meta":{},"name-end-col":23,"name-end-row":115,"name-row":115,"ns":"clojure.reflect","name":"->Constructor","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L115","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":64,"arglist-strs":["[name declaring-class parameter-types exception-types flags]"],"row":115},{"fixed-arities":[1],"end-row":75,"meta":{},"name-end-col":35,"name-end-row":67,"private":true,"name-row":67,"ns":"clojure.reflect","name":"internal-name->class-symbol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L67","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[d]"],"doc":"Convert a Java internal name to a Clojure class symbol. Internal\n   names uses slashes instead of dots, e.g. java/lang/String. See\n   Section 4.2 of the JVM spec, 2nd ed.:\n\n   http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#14757","row":67},{"fixed-arities":[2],"end-row":176,"meta":{},"name-end-col":22,"name-end-row":172,"private":true,"name-row":172,"ns":"clojure.reflect","name":"typeref->class","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L172","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":74,"arglist-strs":["[typeref classloader]"],"row":172},{"end-row":54,"meta":{},"name-end-col":27,"name-end-row":48,"name-row":48,"ns":"clojure.reflect","name":"TypeReference","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L48","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":1,"name-col":14,"end-col":103,"doc":"A TypeReference can be unambiguously converted to a type name on\n   the host platform.\n\n   All typerefs are normalized into symbols. If you need to\n   normalize a typeref yourself, call typesym.","row":48},{"fixed-arities":[4],"end-row":155,"meta":{},"name-end-col":17,"name-end-row":154,"name-row":154,"ns":"clojure.reflect","name":"->Field","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L154","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":37,"arglist-strs":["[name type declaring-class flags]"],"row":154},{"end-row":46,"meta":{},"name-end-col":23,"name-end-row":44,"name-row":44,"ns":"clojure.reflect","name":"Reflector","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L44","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":1,"name-col":14,"end-col":36,"doc":"Protocol for reflection implementers.","row":44},{"fixed-arities":[1],"end-row":155,"meta":{},"name-end-col":17,"name-end-row":154,"name-row":154,"ns":"clojure.reflect","name":"map->Field","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L154","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":37,"arglist-strs":["[m]"],"row":154},{"end-row":155,"meta":{},"name-end-col":17,"name-end-row":154,"name-row":154,"ns":"clojure.reflect","name":"Field","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L154","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":37,"row":154},{"fixed-arities":[2],"end-row":198,"meta":{},"name-end-col":30,"protocol-ns":"clojure.reflect","name-end-row":197,"name-row":197,"ns":"clojure.reflect","name":"resolve-class","defined-by":"clojure.core/defprotocol","protocol-name":"ClassResolver","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L197","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":3,"name-col":17,"end-col":92,"arglist-strs":["[this name]"],"doc":"Given a class name, return that typeref's class bytes as an InputStream.","row":197},{"fixed-arities":[1],"end-row":194,"meta":{},"name-end-col":31,"name-end-row":191,"private":true,"name-row":191,"ns":"clojure.reflect","name":"parse-method-descriptor","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L191","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":52,"arglist-strs":["[md]"],"row":191},{"fixed-arities":[1],"end-row":57,"meta":{},"name-end-col":19,"name-end-row":55,"private":true,"name-row":55,"ns":"clojure.reflect","name":"access-flag","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L55","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":66,"arglist-strs":["[[name flag & contexts]]"],"row":55},{"fixed-arities":[1],"end-row":186,"meta":{},"name-end-col":23,"name-end-row":178,"name-row":178,"ns":"clojure.reflect","name":"->JavaReflector","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L178","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":10,"end-col":67,"arglist-strs":["[classloader]"],"row":178},{"fixed-arities":[1],"end-row":54,"meta":{},"name-end-col":12,"protocol-ns":"clojure.reflect","name-end-row":54,"name-row":54,"ns":"clojure.reflect","name":"typename","defined-by":"clojure.core/defprotocol","protocol-name":"TypeReference","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L54","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":3,"name-col":4,"end-col":102,"arglist-strs":["[o]"],"doc":"Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]","row":54},{"end-row":101,"meta":{},"name-end-col":19,"name-end-row":79,"name-row":79,"ns":"clojure.reflect","name":"flag-descriptors","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L77","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":3,"end-col":50,"doc":"The Java access bitflags, along with their friendly names and\nthe kinds of objects to which they can apply.","row":77},{"fixed-arities":[1],"end-row":170,"meta":{},"name-end-col":23,"name-end-row":165,"private":true,"name-row":165,"ns":"clojure.reflect","name":"declared-fields","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L165","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[cls]"],"doc":"Return a set of the declared fields of class as a Clojure map.","row":165},{"fixed-arities":[2],"end-row":113,"meta":{},"name-end-col":19,"name-end-row":103,"private":true,"name-row":103,"ns":"clojure.reflect","name":"parse-flags","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L103","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[flags context]"],"doc":"Convert reflection bitflags into a set of keywords.","row":103},{"fixed-arities":[1],"end-row":45,"meta":{},"name-end-col":15,"name-end-row":36,"private":true,"name-row":36,"ns":"clojure.reflect","name":"typesym","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L36","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":50,"arglist-strs":["[t]"],"doc":"Given a typeref, create a legal Clojure symbol version of the\n   type's name.","row":36},{"fixed-arities":[1],"end-row":116,"meta":{},"name-end-col":23,"name-end-row":115,"name-row":115,"ns":"clojure.reflect","name":"map->Constructor","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L115","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":64,"arglist-strs":["[m]"],"row":115},{"fixed-arities":[1],"end-row":145,"meta":{},"name-end-col":19,"name-end-row":137,"private":true,"name-row":137,"ns":"clojure.reflect","name":"method->map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L137","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":50,"arglist-strs":["[method]"],"row":137},{"end-row":186,"meta":{},"name-end-col":23,"name-end-row":178,"name-row":178,"ns":"clojure.reflect","name":"JavaReflector","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L178","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":10,"end-col":67,"row":178},{"fixed-arities":[1],"end-row":152,"meta":{},"name-end-col":24,"name-end-row":147,"private":true,"name-row":147,"ns":"clojure.reflect","name":"declared-methods","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L147","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":37,"arglist-strs":["[cls]"],"doc":"Return a set of the declared constructors of class as a Clojure map.","row":147},{"end-row":266,"meta":{},"name-end-col":22,"name-end-row":208,"name-row":208,"ns":"clojure.reflect","name":"AsmReflector","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L208","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":10,"end-col":20,"row":208},{"end-row":113,"meta":{},"name-end-col":19,"name-end-row":58,"name-row":58,"added":"1.3","ns":"clojure.reflect","name":"type-reflect","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L58","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[typeref & options]"],"varargs-min-arity":1,"doc":"Alpha - subject to change.\n   Reflect on a typeref, returning a map with :bases, :flags, and\n  :members. In the discussion below, names are always Clojure symbols.\n\n   :bases            a set of names of the type's bases\n   :flags            a set of keywords naming the boolean attributes\n                     of the type.\n   :members          a set of the type's members. Each member is a map\n                     and can be a constructor, method, or field.\n\n   Keys common to all members:\n   :name             name of the type \n   :declaring-class  name of the declarer\n   :flags            keyword naming boolean attributes of the member\n\n   Keys specific to constructors:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n\n   Key specific to methods:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n   :return-type      return type name\n\n   Keys specific to fields:\n   :type             type name\n\n   Options:\n\n     :ancestors     in addition to the keys described above, also\n                    include an :ancestors key with the entire set of\n                    ancestors, and add all ancestor members to\n                    :members.\n     :reflector     implementation to use. Defaults to JavaReflector,\n                    AsmReflector is also an option.","row":58},{"end-row":198,"meta":{},"name-end-col":27,"name-end-row":196,"name-row":196,"ns":"clojure.reflect","name":"ClassResolver","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L196","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":14,"end-col":93,"row":196},{"fixed-arities":[1],"end-row":163,"meta":{},"name-end-col":18,"name-end-row":157,"private":true,"name-row":157,"ns":"clojure.reflect","name":"field->map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L157","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":48,"arglist-strs":["[field]"],"row":157},{"end-row":116,"meta":{},"name-end-col":23,"name-end-row":115,"name-row":115,"ns":"clojure.reflect","name":"Constructor","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L115","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":64,"row":115},{"fixed-arities":[1],"end-row":65,"meta":{},"name-end-col":38,"name-end-row":59,"private":true,"name-row":59,"ns":"clojure.reflect","name":"field-descriptor->class-symbol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L59","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[d]"],"doc":"Convert a Java field descriptor to a Clojure class symbol. Field\n   descriptors are described in section 4.3.2 of the JVM spec, 2nd ed.:\n   http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#14152","row":59},{"fixed-arities":[2],"end-row":46,"meta":{},"name-end-col":14,"protocol-ns":"clojure.reflect","name-end-row":46,"name-row":46,"ns":"clojure.reflect","name":"do-reflect","defined-by":"clojure.core/defprotocol","protocol-name":"Reflector","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L46","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":3,"name-col":4,"end-col":35,"arglist-strs":["[reflector typeref]"],"row":46},{"fixed-arities":[1],"end-row":266,"meta":{},"name-end-col":22,"name-end-row":208,"name-row":208,"ns":"clojure.reflect","name":"->AsmReflector","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L208","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":10,"end-col":20,"arglist-strs":["[class-resolver]"],"row":208},{"fixed-arities":[6],"end-row":135,"meta":{},"name-end-col":18,"name-end-row":134,"name-row":134,"ns":"clojure.reflect","name":"->Method","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect/java.clj#L134","lang":[],"filename":"/src/clj/clojure/reflect/java.clj","col":1,"name-col":12,"end-col":76,"arglist-strs":["[name return-type declaring-class parameter-types exception-types flags]"],"row":134},{"end-row":56,"meta":{},"name-end-col":27,"name-end-row":56,"name-row":56,"ns":"clojure.reflect","name":"default-reflector","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L56","lang":[],"filename":"/src/clj/clojure/reflect.clj","col":1,"name-col":10,"end-col":28,"row":56}]