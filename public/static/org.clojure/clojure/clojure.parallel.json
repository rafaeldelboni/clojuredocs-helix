[{"arglist-strs":["[f]"],"end-row":47,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"op","ns":"clojure.parallel","private":true,"row":45},{"arglist-strs":["[f]"],"end-row":51,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"binary-op","ns":"clojure.parallel","private":true,"row":49},{"arglist-strs":["[f]"],"end-row":55,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"int-and-object-to-object","ns":"clojure.parallel","private":true,"row":53},{"arglist-strs":["[f]"],"end-row":59,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"reducer","ns":"clojure.parallel","private":true,"row":57},{"arglist-strs":["[f]"],"end-row":63,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"predicate","ns":"clojure.parallel","private":true,"row":61},{"arglist-strs":["[f]"],"end-row":67,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"binary-predicate","ns":"clojure.parallel","private":true,"row":65},{"arglist-strs":["[f]"],"end-row":71,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"int-and-object-predicate","ns":"clojure.parallel","private":true,"row":69},{"arglist-strs":["[coll]","[coll & ops]"],"doc":"Creates a parallel array from coll. ops, if supplied, perform\n  on-the-fly filtering or transformations during parallel realization\n  or calculation. ops form a chain, and bounds must precede filters,\n  must precede maps. ops must be a set of keyword value pairs of the\n  following forms:\n\n     :bound [start end] \n\n  Only elements from start (inclusive) to end (exclusive) will be\n  processed when the array is realized.\n\n     :filter pred \n\n  Filter preds remove elements from processing when the array is realized. pred\n  must be a function of one argument whose return will be processed\n  via boolean.\n\n     :filter-index pred2 \n\n  pred2 must be a function of two arguments, which will be an element\n  of the collection and the corresponding index, whose return will be\n  processed via boolean.\n\n     :filter-with [pred2 coll2] \n\n  pred2 must be a function of two arguments, which will be\n  corresponding elements of the 2 collections.\n\n     :map f \n\n  Map fns will be used to transform elements when the array is\n  realized. f must be a function of one argument.\n\n     :map-index f2 \n\n  f2 must be a function of two arguments, which will be an element of\n  the collection and the corresponding index.\n\n     :map-with [f2 coll2]\n\n  f2 must be a function of two arguments, which will be corresponding\n  elements of the 2 collections.","end-row":135,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"par","ns":"clojure.parallel","row":73},{"arglist-strs":["[coll]"],"doc":"Returns some (random) element of the coll if it satisfies the bound/filter/map","end-row":141,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pany","ns":"clojure.parallel","row":138},{"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns the maximum element, presuming Comparable elements, unless\n  a Comparator comp is supplied","end-row":147,"filename":"clojure/parallel.clj","fixed-arities":[1,2],"name":"pmax","ns":"clojure.parallel","row":143},{"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns the minimum element, presuming Comparable elements, unless\n  a Comparator comp is supplied","end-row":153,"filename":"clojure/parallel.clj","fixed-arities":[1,2],"name":"pmin","ns":"clojure.parallel","row":149},{"arglist-strs":["[s]"],"end-row":156,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"summary-map","ns":"clojure.parallel","private":true,"row":155},{"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns a map of summary statistics (min. max, size, min-index, max-index, \n  presuming Comparable elements, unless a Comparator comp is supplied","end-row":162,"filename":"clojure/parallel.clj","fixed-arities":[1,2],"name":"psummary","ns":"clojure.parallel","row":158},{"arglist-strs":["[f base coll]"],"doc":"Returns the reduction of the realized elements of coll\n  using function f. Note f will not necessarily be called\n  consecutively, and so must be commutative. Also note that \n  (f base an-element) might be performed many times, i.e. base is not\n  an initial value as with sequential reduce.","end-row":171,"filename":"clojure/parallel.clj","fixed-arities":[3],"name":"preduce","ns":"clojure.parallel","row":164},{"arglist-strs":["[pa]"],"end-row":176,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pa-to-vec","ns":"clojure.parallel","private":true,"row":175},{"fixed-arities":[1],"end-row":183,"private":true,"ns":"clojure.parallel","name":"pall","filename":"clojure/parallel.clj","arglist-strs":["[coll]"],"doc":"Realizes a copy of the coll as a parallel array, with any bounds/filters/maps applied","row":178},{"arglist-strs":["[pa]"],"doc":"Returns the realized contents of the parallel array pa as a Clojure vector","end-row":187,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pvec","ns":"clojure.parallel","row":185},{"arglist-strs":["[coll]"],"doc":"Returns a parallel array of the distinct elements of coll","end-row":192,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pdistinct","ns":"clojure.parallel","row":189},{"arglist-strs":["[coll f init]"],"end-row":196,"filename":"clojure/parallel.clj","fixed-arities":[3],"name":"pcumulate","ns":"clojure.parallel","private":true,"row":195},{"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns a new vector consisting of the realized items in coll, sorted, \n  presuming Comparable elements, unless a Comparator comp is supplied","end-row":202,"filename":"clojure/parallel.clj","fixed-arities":[1,2],"name":"psort","ns":"clojure.parallel","row":198},{"arglist-strs":["[coll]"],"doc":"Returns a vector containing the non-nil (realized) elements of coll","end-row":207,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pfilter-nils","ns":"clojure.parallel","row":204},{"arglist-strs":["[coll]"],"doc":"Returns a vector containing the (realized) elements of coll, \n  without any consecutive duplicates","end-row":213,"filename":"clojure/parallel.clj","fixed-arities":[1],"name":"pfilter-dupes","ns":"clojure.parallel","row":209},{"end-row":221,"filename":"clojure/parallel.clj","name":"a","ns":"clojure.parallel","row":221},{"end-row":246,"filename":"clojure/parallel.clj","name":"v","ns":"clojure.parallel","row":246}]