[{"fixed-arities":[2],"end-row":199,"meta":{},"name-end-col":23,"index":0,"name-end-row":189,"name-row":189,"added":"1.5","ns":"clojure.core.reducers","name":"take-while","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L189","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":35,"arglist-strs":["[pred coll]"],"doc":"Ends the reduction of coll when (pred val) returns logical false.","row":189},{"fixed-arities":[2],"end-row":172,"meta":{},"name-end-col":19,"index":0,"name-end-row":167,"name-row":167,"added":"1.5","ns":"clojure.core.reducers","name":"remove","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L167","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":35,"arglist-strs":["[pred coll]"],"doc":"Removes values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.","row":167},{"fixed-arities":[4],"end-row":49,"meta":{},"name-end-col":13,"protocol-ns":"clojure.core.reducers","index":0,"name-end-row":49,"name-row":49,"ns":"clojure.core.reducers","name":"coll-fold","defined-by":"clojure.core/defprotocol","protocol-name":"CollFold","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L49","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":3,"name-col":4,"end-col":40,"arglist-strs":["[coll n combinef reducef]"],"row":49},{"fixed-arities":[1],"end-row":187,"meta":{},"name-end-col":20,"index":0,"name-end-row":174,"name-row":174,"added":"1.5","ns":"clojure.core.reducers","name":"flatten","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L174","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":29,"arglist-strs":["[coll]"],"doc":"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat foldable\n  collection.","row":174},{"fixed-arities":[1],"end-row":25,"meta":{},"name-end-col":13,"index":0,"name-end-row":24,"name-row":24,"ns":"clojure.core.reducers","name":"fjtask","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L24","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[f]"],"row":24},{"fixed-arities":[1],"end-row":30,"meta":{},"name-end-col":16,"index":0,"name-end-row":27,"private":true,"name-row":27,"ns":"clojure.core.reducers","name":"fjinvoke","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L27","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":103,"arglist-strs":["[f]"],"row":27},{"fixed-arities":[2],"end-row":165,"meta":{},"name-end-col":19,"index":0,"name-end-row":154,"name-row":154,"added":"1.5","ns":"clojure.core.reducers","name":"filter","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L154","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":25,"arglist-strs":["[pred coll]"],"doc":"Retains values in the reduction of coll for which (pred val)\n  returns logical true. Foldable.","row":154},{"fixed-arities":[2],"end-row":279,"meta":{},"name-end-col":14,"index":0,"name-end-row":275,"name-row":275,"added":"1.5","ns":"clojure.core.reducers","name":"append!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L275","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[acc x]"],"doc":".adds x to acc and returns acc","row":275},{"fixed-arities":[2],"end-row":97,"meta":{},"name-end-col":13,"index":0,"name-end-row":81,"name-row":81,"added":"1.5","ns":"clojure.core.reducers","name":"folder","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L81","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":62,"arglist-strs":["[coll xf]"],"doc":"Given a foldable collection, and a transformation function xf,\n  returns a foldable collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.","row":81},{"fixed-arities":[4],"end-row":312,"meta":{},"name-end-col":15,"index":0,"name-end-row":298,"private":true,"name-row":298,"ns":"clojure.core.reducers","name":"foldvec","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L298","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[v n combinef reducef]"],"row":298},{"end-row":110,"meta":{},"name-end-col":31,"index":0,"name-end-row":106,"private":true,"name-row":106,"ns":"clojure.core.reducers","name":"defcurried","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L106","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","macro":true,"col":1,"name-col":21,"end-col":40,"arglist-strs":["[name doc meta args & body]"],"varargs-min-arity":4,"doc":"Builds another arity of the fn that returns a fn awaiting the last\n  param","row":106},{"fixed-arities":[2],"end-row":152,"meta":{},"name-end-col":19,"index":0,"name-end-row":138,"name-row":138,"added":"1.5","ns":"clojure.core.reducers","name":"mapcat","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L138","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":45,"arglist-strs":["[f coll]"],"doc":"Applies f to every value in the reduction of coll, concatenating the result\n  colls of (f val). Foldable.","row":138},{"fixed-arities":[4,3,2],"end-row":65,"meta":{},"name-end-col":11,"index":0,"name-end-row":51,"name-row":51,"added":"1.5","ns":"clojure.core.reducers","name":"fold","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L51","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[reducef coll]","[combinef reducef coll]","[n combinef reducef coll]"],"doc":"Reduces a collection using a (potentially parallel) reduce-combine\n  strategy. The collection is partitioned into groups of approximately\n  n (default 512), each of which is reduced with reducef (with a seed\n  value obtained by calling (combinef) with no arguments). The results\n  of these reductions are then reduced with combinef (default\n  reducef). combinef must be associative, and, when called with no\n  arguments, (combinef) must produce its identity element. These\n  operations may be performed in parallel, but the results will\n  preserve order.","row":51},{"fixed-arities":[1],"end-row":34,"meta":{},"name-end-col":14,"index":0,"name-end-row":34,"private":true,"name-row":34,"ns":"clojure.core.reducers","name":"fjjoin","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L34","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":70,"arglist-strs":["[task]"],"row":34},{"end-row":22,"meta":{},"name-end-col":10,"index":0,"name-end-row":22,"name-row":22,"ns":"clojure.core.reducers","name":"pool","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L22","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":6,"end-col":56,"row":22},{"fixed-arities":[5],"end-row":104,"meta":{},"name-end-col":18,"index":0,"name-end-row":99,"private":true,"name-row":99,"ns":"clojure.core.reducers","name":"do-curried","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L99","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[name doc meta args body]"],"row":99},{"end-row":253,"meta":{},"name-end-col":13,"index":0,"name-end-row":230,"name-row":230,"ns":"clojure.core.reducers","name":"Cat","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L230","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":10,"end-col":27,"row":230},{"fixed-arities":[2],"end-row":136,"meta":{},"name-end-col":16,"index":0,"name-end-row":128,"name-row":128,"added":"1.5","ns":"clojure.core.reducers","name":"map","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L128","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":35,"arglist-strs":["[f coll]"],"doc":"Applies f to every value in the reduction of coll. Foldable.","row":128},{"fixed-arities":[3],"end-row":253,"meta":{},"name-end-col":13,"index":0,"name-end-row":230,"name-row":230,"ns":"clojure.core.reducers","name":"->Cat","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L230","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":10,"end-col":27,"arglist-strs":["[cnt left right]"],"row":230},{"fixed-arities":[0,1,2],"end-row":273,"meta":{},"name-end-col":10,"index":0,"name-end-row":255,"name-row":255,"added":"1.5","ns":"clojure.core.reducers","name":"cat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L255","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[]","[ctor]","[left right]"],"doc":"A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.","row":255},{"fixed-arities":[1],"end-row":285,"meta":{},"name-end-col":14,"index":0,"name-end-row":281,"name-row":281,"added":"1.5","ns":"clojure.core.reducers","name":"foldcat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L281","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[coll]"],"doc":"Equivalent to (fold cat append! coll)","row":281},{"fixed-arities":[2],"end-row":227,"meta":{},"name-end-col":17,"index":0,"name-end-row":215,"name-row":215,"added":"1.5","ns":"clojure.core.reducers","name":"drop","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L215","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":25,"arglist-strs":["[n coll]"],"doc":"Elides the first n values from the reduction of coll.","row":215},{"fixed-arities":[2],"end-row":79,"meta":{},"name-end-col":14,"index":0,"name-end-row":67,"name-row":67,"added":"1.5","ns":"clojure.core.reducers","name":"reducer","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L67","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":78,"arglist-strs":["[coll xf]"],"doc":"Given a reducible collection, and a transformation function xf,\n  returns a reducible collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.","row":67},{"fixed-arities":[2],"end-row":213,"meta":{},"name-end-col":17,"index":0,"name-end-row":201,"name-row":201,"added":"1.5","ns":"clojure.core.reducers","name":"take","defined-by":"clojure.core.reducers/defcurried","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L201","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":13,"end-col":34,"arglist-strs":["[n coll]"],"doc":"Ends the reduction of coll after consuming n values.","row":201},{"fixed-arities":[2],"end-row":295,"meta":{},"name-end-col":13,"index":0,"name-end-row":287,"name-row":287,"added":"1.5","ns":"clojure.core.reducers","name":"monoid","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L287","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[op ctor]"],"doc":"Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it.","row":287},{"fixed-arities":[3,2],"end-row":46,"meta":{},"name-end-col":13,"index":0,"name-end-row":38,"name-row":38,"ns":"clojure.core.reducers","name":"reduce","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L38","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[f coll]","[f init coll]"],"doc":"Like core/reduce except:\n     When init is not provided, (f) is used.\n     Maps are reduced with reduce-kv","row":38},{"fixed-arities":[2],"end-row":126,"meta":{},"name-end-col":24,"index":0,"name-end-row":123,"private":true,"name-row":123,"ns":"clojure.core.reducers","name":"rfn","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L123","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","macro":true,"col":1,"name-col":21,"end-col":21,"arglist-strs":["[[f1 k] fkv]"],"doc":"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.","row":123},{"fixed-arities":[1],"end-row":32,"meta":{},"name-end-col":14,"index":0,"name-end-row":32,"private":true,"name-row":32,"ns":"clojure.core.reducers","name":"fjfork","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L32","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":70,"arglist-strs":["[task]"],"row":32},{"fixed-arities":[3],"end-row":121,"meta":{},"name-end-col":14,"index":0,"name-end-row":112,"private":true,"name-row":112,"ns":"clojure.core.reducers","name":"do-rfn","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L112","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":8,"end-col":12,"arglist-strs":["[f1 k fkv]"],"row":112},{"end-row":49,"meta":{},"name-end-col":22,"index":0,"name-end-row":48,"name-row":48,"ns":"clojure.core.reducers","name":"CollFold","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L48","lang":[],"filename":"/src/clj/clojure/core/reducers.clj","col":1,"name-col":14,"end-col":41,"row":48}]