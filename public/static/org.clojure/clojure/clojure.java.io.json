[{"end-row":28,"meta":{},"name-end-col":17,"name-end-row":28,"private":true,"name-row":28,"ns":"clojure.java.io","name":"byte-array-type","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L24","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":2,"end-col":51,"doc":"Type object for a Java primitive byte array.","row":24},{"end-row":33,"meta":{},"name-end-col":17,"name-end-row":33,"private":true,"name-row":33,"ns":"clojure.java.io","name":"char-array-type","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L30","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":2,"end-col":56,"doc":"Type object for a Java primitive char array.","row":30},{"end-row":38,"meta":{},"name-end-col":39,"name-end-row":35,"name-row":35,"ns":"clojure.java.io","name":"Coercions","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L35","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":30,"end-col":79,"doc":"Coerce between various 'resource-namish' things.","row":35},{"fixed-arities":[1],"end-row":37,"meta":{},"name-end-col":46,"protocol-ns":"clojure.java.io","name-end-row":37,"name-row":37,"ns":"clojure.java.io","name":"as-file","defined-by":"clojure.core/defprotocol","protocol-name":"Coercions","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L37","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":39,"end-col":80,"arglist-strs":["[x]"],"doc":"Coerce argument to a file.","row":37},{"fixed-arities":[1],"end-row":38,"meta":{},"name-end-col":45,"protocol-ns":"clojure.java.io","name-end-row":38,"name-row":38,"ns":"clojure.java.io","name":"as-url","defined-by":"clojure.core/defprotocol","protocol-name":"Coercions","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L38","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":39,"end-col":78,"arglist-strs":["[x]"],"doc":"Coerce argument to a URL.","row":38},{"fixed-arities":[1],"end-row":42,"meta":{},"name-end-col":35,"name-end-row":40,"private":true,"name-row":40,"ns":"clojure.java.io","name":"escaped-utf8-urlstring->str","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L40","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[s]"],"row":40},{"end-row":84,"meta":{},"name-end-col":39,"name-end-row":69,"name-row":69,"ns":"clojure.java.io","name":"IOFactory","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L69","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":30,"end-col":108,"doc":"Factory functions that create ready-to-use, buffered versions of\n   the various Java I/O stream types, on top of anything that can\n   be unequivocally converted to the requested kind of stream.\n\n   Common options include\n   \n     :append    true to open stream in append mode\n     :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\n   Callers should generally prefer the higher level API provided by\n   reader, writer, input-stream, and output-stream.","row":69},{"fixed-arities":[2],"end-row":81,"meta":{},"name-end-col":31,"protocol-ns":"clojure.java.io","name-end-row":81,"name-row":81,"ns":"clojure.java.io","name":"make-reader","defined-by":"clojure.core/defprotocol","protocol-name":"IOFactory","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L81","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":20,"end-col":94,"arglist-strs":["[x opts]"],"doc":"Creates a BufferedReader. See also IOFactory docs.","row":81},{"fixed-arities":[2],"end-row":82,"meta":{},"name-end-col":31,"protocol-ns":"clojure.java.io","name-end-row":82,"name-row":82,"ns":"clojure.java.io","name":"make-writer","defined-by":"clojure.core/defprotocol","protocol-name":"IOFactory","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L82","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":20,"end-col":94,"arglist-strs":["[x opts]"],"doc":"Creates a BufferedWriter. See also IOFactory docs.","row":82},{"fixed-arities":[2],"end-row":83,"meta":{},"name-end-col":37,"protocol-ns":"clojure.java.io","name-end-row":83,"name-row":83,"ns":"clojure.java.io","name":"make-input-stream","defined-by":"clojure.core/defprotocol","protocol-name":"IOFactory","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L83","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":20,"end-col":105,"arglist-strs":["[x opts]"],"doc":"Creates a BufferedInputStream. See also IOFactory docs.","row":83},{"fixed-arities":[2],"end-row":84,"meta":{},"name-end-col":38,"protocol-ns":"clojure.java.io","name-end-row":84,"name-row":84,"ns":"clojure.java.io","name":"make-output-stream","defined-by":"clojure.core/defprotocol","protocol-name":"IOFactory","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L84","filename":"/src/clj/clojure/java/io.clj","col":3,"name-col":20,"end-col":107,"arglist-strs":["[x opts]"],"doc":"Creates a BufferedOutputStream. See also IOFactory docs.","row":84},{"end-row":102,"meta":{},"name-end-col":21,"name-end-row":86,"name-row":86,"added":"1.2","ns":"clojure.java.io","name":"reader","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L86","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":15,"end-col":53,"arglist-strs":["[x & opts]"],"varargs-min-arity":1,"doc":"Attempts to coerce its argument into an open java.io.Reader.\n   Default implementations always return a java.io.BufferedReader.\n\n   Default implementations are provided for Reader, BufferedReader,\n   InputStream, File, URI, URL, Socket, byte arrays, character arrays,\n   and String.\n\n   If argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the Reader is properly\n   closed.","row":86},{"end-row":119,"meta":{},"name-end-col":21,"name-end-row":104,"name-row":104,"added":"1.2","ns":"clojure.java.io","name":"writer","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L104","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":15,"end-col":53,"arglist-strs":["[x & opts]"],"varargs-min-arity":1,"doc":"Attempts to coerce its argument into an open java.io.Writer.\n   Default implementations always return a java.io.BufferedWriter.\n\n   Default implementations are provided for Writer, BufferedWriter,\n   OutputStream, File, URI, URL, Socket, and String.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the Writer is properly\n   closed.","row":104},{"end-row":136,"meta":{},"name-end-col":32,"name-end-row":121,"name-row":121,"added":"1.2","ns":"clojure.java.io","name":"input-stream","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L121","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":20,"end-col":59,"arglist-strs":["[x & opts]"],"varargs-min-arity":1,"doc":"Attempts to coerce its argument into an open java.io.InputStream.\n   Default implementations always return a java.io.BufferedInputStream.\n\n   Default implementations are defined for InputStream, File, URI, URL,\n   Socket, byte array, and String arguments.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the InputStream is properly\n   closed.","row":121},{"end-row":153,"meta":{},"name-end-col":34,"name-end-row":138,"name-row":138,"added":"1.2","ns":"clojure.java.io","name":"output-stream","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L138","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":21,"end-col":60,"arglist-strs":["[x & opts]"],"varargs-min-arity":1,"doc":"Attempts to coerce its argument into an open java.io.OutputStream.\n   Default implementations always return a java.io.BufferedOutputStream.\n\n   Default implementations are defined for OutputStream, File, URI, URL,\n   Socket, and String arguments.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the OutputStream is\n   properly closed.","row":138},{"fixed-arities":[1],"end-row":156,"meta":{},"name-end-col":24,"name-end-row":155,"private":true,"name-row":155,"ns":"clojure.java.io","name":"append?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L155","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":17,"end-col":28,"arglist-strs":["[opts]"],"row":155},{"fixed-arities":[1],"end-row":159,"meta":{},"name-end-col":24,"name-end-row":158,"private":true,"name-row":158,"ns":"clojure.java.io","name":"encoding","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L158","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":16,"end-col":33,"arglist-strs":["[opts]"],"row":158},{"fixed-arities":[1],"end-row":162,"meta":{},"name-end-col":19,"name-end-row":161,"private":true,"name-row":161,"ns":"clojure.java.io","name":"buffer-size","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L161","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[opts]"],"row":161},{"end-row":172,"meta":{},"name-end-col":26,"name-end-row":164,"name-row":164,"ns":"clojure.java.io","name":"default-streams-impl","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L164","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":6,"end-col":95,"row":164},{"fixed-arities":[2],"end-row":176,"meta":{},"name-end-col":27,"name-end-row":174,"private":true,"name-row":174,"ns":"clojure.java.io","name":"inputstream->reader","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L174","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":8,"end-col":62,"arglist-strs":["[is opts]"],"row":174},{"fixed-arities":[2],"end-row":180,"meta":{},"name-end-col":28,"name-end-row":178,"private":true,"name-row":178,"ns":"clojure.java.io","name":"outputstream->writer","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L178","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":8,"end-col":63,"arglist-strs":["[os opts]"],"row":178},{"end-row":300,"meta":{"arglists":["quote",[["input","output","opts"]]]},"name-end-col":10,"name-end-row":299,"private":true,"name-row":299,"ns":"clojure.java.io","name":"do-copy","defined-by":"clojure.core/defmulti","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L295","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":3,"end-col":57,"doc":"Internal helper for copy","row":295},{"end-row":406,"meta":{},"name-end-col":11,"name-end-row":391,"name-row":391,"added":"1.2","ns":"clojure.java.io","name":"copy","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L391","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":7,"end-col":60,"arglist-strs":["[input output & opts]"],"varargs-min-arity":2,"doc":"Copies input to output.  Returns nil or throws IOException.\n  Input may be an InputStream, Reader, File, byte[], char[], or String.\n  Output may be an OutputStream, Writer, or File.\n\n  Options are key/value pairs and may be one of\n\n    :buffer-size  buffer size to use, default is 1024.\n    :encoding     encoding to use if converting between\n                  byte and char streams.   \n\n  Does not close any streams except those it opens itself \n  (on a File).","row":391},{"fixed-arities":[1],"end-row":416,"meta":{},"name-end-col":31,"name-end-row":408,"name-row":408,"added":"1.2","ns":"clojure.java.io","name":"as-relative-path","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L408","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":15,"end-col":22,"arglist-strs":["[x]"],"doc":"Take an as-file-able thing and return a string if it is\n   a relative path, else IllegalArgumentException.","row":408},{"fixed-arities":[1,2],"end-row":428,"meta":{},"name-end-col":17,"name-end-row":418,"name-row":418,"added":"1.2","ns":"clojure.java.io","name":"file","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L418","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":13,"end-col":46,"arglist-strs":["[arg]","[parent child]","[parent child & more]"],"varargs-min-arity":2,"doc":"Returns a java.io.File, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent.","row":418},{"end-row":436,"meta":{},"name-end-col":18,"name-end-row":430,"name-row":430,"added":"1.2","ns":"clojure.java.io","name":"delete-file","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L430","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":7,"end-col":66,"arglist-strs":["[f & [silently]]"],"varargs-min-arity":1,"doc":"Delete file f. If silently is nil or false, raise an exception on failure, else return the value of silently.","row":430},{"end-row":444,"meta":{},"name-end-col":19,"name-end-row":438,"name-row":438,"added":"1.2","ns":"clojure.java.io","name":"make-parents","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L438","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[f & more]"],"varargs-min-arity":1,"doc":"Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.","row":438},{"fixed-arities":[1,2],"end-row":451,"meta":{},"name-end-col":20,"name-end-row":446,"name-row":446,"added":"1.2","ns":"clojure.java.io","name":"resource","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L446","filename":"/src/clj/clojure/java/io.clj","col":1,"name-col":12,"end-col":53,"arglist-strs":["[n]","[n loader]"],"doc":"Returns the URL for a named resource. Use the context class loader\n   if no loader is specified.","row":446}]