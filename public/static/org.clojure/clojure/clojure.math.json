[{"doc":"Constant for e, the base for natural logarithms.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#E","end-row":31,"filename":"clojure/math.clj","name":"E","ns":"clojure.math","row":24},{"doc":"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI","end-row":40,"filename":"clojure/math.clj","name":"PI","ns":"clojure.math","row":33},{"arglist-strs":["[a]"],"doc":"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sin-double-","end-row":51,"filename":"clojure/math.clj","fixed-arities":[1],"name":"sin","ns":"clojure.math","row":42},{"arglist-strs":["[a]"],"doc":"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cos-double-","end-row":61,"filename":"clojure/math.clj","fixed-arities":[1],"name":"cos","ns":"clojure.math","row":53},{"arglist-strs":["[a]"],"doc":"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tan-double-","end-row":72,"filename":"clojure/math.clj","fixed-arities":[1],"name":"tan","ns":"clojure.math","row":63},{"arglist-strs":["[a]"],"doc":"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#asin-double-","end-row":83,"filename":"clojure/math.clj","fixed-arities":[1],"name":"asin","ns":"clojure.math","row":74},{"arglist-strs":["[a]"],"doc":"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#acos-double-","end-row":93,"filename":"clojure/math.clj","fixed-arities":[1],"name":"acos","ns":"clojure.math","row":85},{"arglist-strs":["[a]"],"doc":"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan-double-","end-row":104,"filename":"clojure/math.clj","fixed-arities":[1],"name":"atan","ns":"clojure.math","row":95},{"arglist-strs":["[deg]"],"doc":"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-","end-row":113,"filename":"clojure/math.clj","fixed-arities":[1],"name":"to-radians","ns":"clojure.math","row":106},{"arglist-strs":["[r]"],"doc":"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-","end-row":122,"filename":"clojure/math.clj","fixed-arities":[1],"name":"to-degrees","ns":"clojure.math","row":115},{"arglist-strs":["[a]"],"doc":"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#exp-double-","end-row":134,"filename":"clojure/math.clj","fixed-arities":[1],"name":"exp","ns":"clojure.math","row":124},{"arglist-strs":["[a]"],"doc":"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log-double-","end-row":146,"filename":"clojure/math.clj","fixed-arities":[1],"name":"log","ns":"clojure.math","row":136},{"arglist-strs":["[a]"],"doc":"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log10-double-","end-row":158,"filename":"clojure/math.clj","fixed-arities":[1],"name":"log10","ns":"clojure.math","row":148},{"arglist-strs":["[a]"],"doc":"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-","end-row":170,"filename":"clojure/math.clj","fixed-arities":[1],"name":"sqrt","ns":"clojure.math","row":160},{"arglist-strs":["[a]"],"doc":"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cbrt-double-","end-row":182,"filename":"clojure/math.clj","fixed-arities":[1],"name":"cbrt","ns":"clojure.math","row":172},{"arglist-strs":["[dividend divisor]"],"doc":"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n  where n is the integer closest to the exact value of dividend / divisor.\n  If two integers are equally close, then n is the even one.\n  If the remainder is zero, sign will match dividend.\n  If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n  If dividend is finite and divisor is infinite => dividend\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-","end-row":197,"filename":"clojure/math.clj","fixed-arities":[2],"name":"IEEE-remainder","ns":"clojure.math","row":184},{"arglist-strs":["[a]"],"doc":"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ceil-double-","end-row":208,"filename":"clojure/math.clj","fixed-arities":[1],"name":"ceil","ns":"clojure.math","row":199},{"arglist-strs":["[a]"],"doc":"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floor-double-","end-row":220,"filename":"clojure/math.clj","fixed-arities":[1],"name":"floor","ns":"clojure.math","row":210},{"arglist-strs":["[a]"],"doc":"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-","end-row":231,"filename":"clojure/math.clj","fixed-arities":[1],"name":"rint","ns":"clojure.math","row":222},{"arglist-strs":["[y x]"],"doc":"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan2-double-double-","end-row":242,"filename":"clojure/math.clj","fixed-arities":[2],"name":"atan2","ns":"clojure.math","row":233},{"arglist-strs":["[a b]"],"doc":"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double-","end-row":252,"filename":"clojure/math.clj","fixed-arities":[2],"name":"pow","ns":"clojure.math","row":244},{"arglist-strs":["[a]"],"doc":"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf or < Long/MIN_VALUE => Long/MIN_VALUE\n  If a is ##Inf or > Long/MAX_VALUE => Long/MAX_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#round-double-","end-row":265,"filename":"clojure/math.clj","fixed-arities":[1],"name":"round","ns":"clojure.math","row":254},{"arglist-strs":["[]"],"doc":"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--","end-row":275,"filename":"clojure/math.clj","fixed-arities":[0],"name":"random","ns":"clojure.math","row":267},{"arglist-strs":["[x y]"],"doc":"Returns the sum of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-long-long-","end-row":284,"filename":"clojure/math.clj","fixed-arities":[2],"name":"add-exact","ns":"clojure.math","row":277},{"arglist-strs":["[x y]"],"doc":"Returns the difference of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#subtractExact-long-long-","end-row":293,"filename":"clojure/math.clj","fixed-arities":[2],"name":"subtract-exact","ns":"clojure.math","row":286},{"arglist-strs":["[x y]"],"doc":"Returns the product of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#multiplyExact-long-long-","end-row":302,"filename":"clojure/math.clj","fixed-arities":[2],"name":"multiply-exact","ns":"clojure.math","row":295},{"arglist-strs":["[a]"],"doc":"Returns a incremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#incrementExact-long-","end-row":311,"filename":"clojure/math.clj","fixed-arities":[1],"name":"increment-exact","ns":"clojure.math","row":304},{"arglist-strs":["[a]"],"doc":"Returns a decremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#decrementExact-long-","end-row":320,"filename":"clojure/math.clj","fixed-arities":[1],"name":"decrement-exact","ns":"clojure.math","row":313},{"arglist-strs":["[a]"],"doc":"Returns the negation of a, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#negateExact-long-","end-row":329,"filename":"clojure/math.clj","fixed-arities":[1],"name":"negate-exact","ns":"clojure.math","row":322},{"arglist-strs":["[x y]"],"doc":"Integer division that rounds to negative infinity (as opposed to zero).\n  The special case (floorDiv Long/MIN_VALUE -1) overflows and returns Long/MIN_VALUE.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-","end-row":339,"filename":"clojure/math.clj","fixed-arities":[2],"name":"floor-div","ns":"clojure.math","row":331},{"arglist-strs":["[x y]"],"doc":"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-","end-row":349,"filename":"clojure/math.clj","fixed-arities":[2],"name":"floor-mod","ns":"clojure.math","row":341},{"arglist-strs":["[d]"],"doc":"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  If d is +/- Double/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-","end-row":362,"filename":"clojure/math.clj","fixed-arities":[1],"name":"ulp","ns":"clojure.math","row":351},{"arglist-strs":["[d]"],"doc":"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-","end-row":372,"filename":"clojure/math.clj","fixed-arities":[1],"name":"signum","ns":"clojure.math","row":364},{"arglist-strs":["[x]"],"doc":"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sinh-double-","end-row":383,"filename":"clojure/math.clj","fixed-arities":[1],"name":"sinh","ns":"clojure.math","row":374},{"arglist-strs":["[x]"],"doc":"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cosh-double-","end-row":395,"filename":"clojure/math.clj","fixed-arities":[1],"name":"cosh","ns":"clojure.math","row":385},{"arglist-strs":["[x]"],"doc":"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tanh-double-","end-row":408,"filename":"clojure/math.clj","fixed-arities":[1],"name":"tanh","ns":"clojure.math","row":397},{"arglist-strs":["[x y]"],"doc":"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#hypot-double-double-","end-row":419,"filename":"clojure/math.clj","fixed-arities":[2],"name":"hypot","ns":"clojure.math","row":410},{"arglist-strs":["[x]"],"doc":"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-","end-row":432,"filename":"clojure/math.clj","fixed-arities":[1],"name":"expm1","ns":"clojure.math","row":421},{"arglist-strs":["[x]"],"doc":"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or < -1 => ##NaN\n  If x is ##Inf => ##Inf\n  If x is -1 => ##-Inf\n  If x is 0 => 0 with sign matching x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log1p-double-","end-row":446,"filename":"clojure/math.clj","fixed-arities":[1],"name":"log1p","ns":"clojure.math","row":434},{"arglist-strs":["[magnitude sign]"],"doc":"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-","end-row":456,"filename":"clojure/math.clj","fixed-arities":[2],"name":"copy-sign","ns":"clojure.math","row":448},{"arglist-strs":["[d]"],"doc":"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => Double/MAX_EXPONENT + 1\n  If d is zero or subnormal => Double/MIN_EXPONENT - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-","end-row":467,"filename":"clojure/math.clj","fixed-arities":[1],"name":"get-exponent","ns":"clojure.math","row":458},{"arglist-strs":["[start direction]"],"doc":"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Double/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Double/MAX_VALUE with same sign as start\n  If start is equal to +=Double/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-","end-row":485,"filename":"clojure/math.clj","fixed-arities":[2],"name":"next-after","ns":"clojure.math","row":469},{"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-","end-row":497,"filename":"clojure/math.clj","fixed-arities":[1],"name":"next-up","ns":"clojure.math","row":487},{"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##-Inf => ##-Inf\n  If d is zero => -Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","end-row":509,"filename":"clojure/math.clj","fixed-arities":[1],"name":"next-down","ns":"clojure.math","row":499},{"arglist-strs":["[d scaleFactor]"],"doc":"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between Double/MIN_EXPONENT and Double/MAX_EXPONENT, the answer is exact.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","end-row":522,"filename":"clojure/math.clj","fixed-arities":[2],"name":"scalb","ns":"clojure.math","row":511}]