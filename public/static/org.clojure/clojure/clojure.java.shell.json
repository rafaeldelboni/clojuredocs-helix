[{"end-row":18,"meta":{},"name-end-col":24,"name-end-row":18,"name-row":18,"ns":"clojure.java.shell","name":"*sh-dir*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L18","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":16,"end-col":29,"row":18},{"end-row":19,"meta":{},"name-end-col":24,"name-end-row":19,"name-row":19,"ns":"clojure.java.shell","name":"*sh-env*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L19","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":16,"end-col":29,"row":19},{"end-row":26,"meta":{},"name-end-col":22,"name-end-row":21,"name-row":21,"added":"1.2","ns":"clojure.java.shell","name":"with-sh-dir","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L21","filename":"/src/clj/clojure/java/shell.clj","macro":true,"col":1,"name-col":11,"end-col":15,"arglist-strs":["[dir & forms]"],"varargs-min-arity":1,"doc":"Sets the directory for use with sh, see sh for details.","row":21},{"end-row":33,"meta":{},"name-end-col":22,"name-end-row":28,"name-row":28,"added":"1.2","ns":"clojure.java.shell","name":"with-sh-env","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L28","filename":"/src/clj/clojure/java/shell.clj","macro":true,"col":1,"name-col":11,"end-col":15,"arglist-strs":["[env & forms]"],"varargs-min-arity":1,"doc":"Sets the environment for use with sh, see sh for details.","row":28},{"end-row":43,"meta":{},"name-end-col":15,"name-end-row":35,"private":true,"name-row":35,"ns":"clojure.java.shell","name":"aconcat","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L35","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":8,"end-col":13,"arglist-strs":["[type & xs]"],"varargs-min-arity":1,"doc":"Concatenates arrays of given type.","row":35},{"fixed-arities":[1],"end-row":50,"meta":{},"name-end-col":18,"name-end-row":45,"private":true,"name-row":45,"ns":"clojure.java.shell","name":"parse-args","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L45","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[args]"],"row":45},{"fixed-arities":[1],"end-row":58,"meta":{},"name-end-col":45,"name-end-row":52,"private":true,"name-row":52,"ns":"clojure.java.shell","name":"as-env-strings","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L52","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":31,"end-col":14,"arglist-strs":["[arg]"],"doc":"Helper so that callers can pass a Clojure map for the :env to sh.","row":52},{"fixed-arities":[1],"end-row":64,"meta":{},"name-end-col":23,"name-end-row":60,"private":true,"name-row":60,"ns":"clojure.java.shell","name":"stream-to-bytes","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L60","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":8,"end-col":26,"arglist-strs":["[in]"],"row":60},{"fixed-arities":[1,2],"end-row":71,"meta":{},"name-end-col":24,"name-end-row":66,"private":true,"name-row":66,"ns":"clojure.java.shell","name":"stream-to-string","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L66","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":8,"end-col":27,"arglist-strs":["[in]","[in enc]"],"row":66},{"fixed-arities":[2],"end-row":77,"meta":{},"name-end-col":21,"name-end-row":73,"private":true,"name-row":73,"ns":"clojure.java.shell","name":"stream-to-enc","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L73","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[stream enc]"],"row":73},{"end-row":128,"meta":{},"name-end-col":9,"name-end-row":79,"name-row":79,"added":"1.2","ns":"clojure.java.shell","name":"sh","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L79","filename":"/src/clj/clojure/java/shell.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[& args]"],"varargs-min-arity":0,"doc":"Passes the given strings to Runtime.exec() to launch a sub-process.\n\n  Options are\n\n  :in      may be given followed by any legal input source for\n           clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],\n           or String, to be fed to the sub-process's stdin.\n  :in-enc  option may be given followed by a String, used as a character\n           encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to\n           convert the input string specified by the :in option to the\n           sub-process's stdin.  Defaults to UTF-8.\n           If the :in option provides a byte array, then the bytes are passed\n           unencoded, and this option is ignored.\n  :out-enc option may be given followed by :bytes or a String. If a\n           String is given, it will be used as a character encoding\n           name (for example \"UTF-8\" or \"ISO-8859-1\") to convert\n           the sub-process's stdout to a String which is returned.\n           If :bytes is given, the sub-process's stdout will be stored\n           in a byte array and returned.  Defaults to UTF-8.\n  :env     override the process env with a map (or the underlying Java\n           String[] if you are a masochist).\n  :dir     override the process dir with a String or java.io.File.\n\n  You can bind :env or :dir for multiple operations using with-sh-env\n  and with-sh-dir.\n\n  sh returns a map of\n    :exit => sub-process's exit code\n    :out  => sub-process's stdout (as byte[] or String)\n    :err  => sub-process's stderr (String via platform default encoding)","row":79}]