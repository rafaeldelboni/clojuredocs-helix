[{"end-row":18,"filename":"clojure/java/shell.clj","name":"*sh-dir*","ns":"clojure.java.shell","row":18},{"end-row":19,"filename":"clojure/java/shell.clj","name":"*sh-env*","ns":"clojure.java.shell","row":19},{"arglist-strs":["[dir & forms]"],"doc":"Sets the directory for use with sh, see sh for details.","end-row":26,"filename":"clojure/java/shell.clj","macro":true,"name":"with-sh-dir","ns":"clojure.java.shell","row":21},{"arglist-strs":["[env & forms]"],"doc":"Sets the environment for use with sh, see sh for details.","end-row":33,"filename":"clojure/java/shell.clj","macro":true,"name":"with-sh-env","ns":"clojure.java.shell","row":28},{"arglist-strs":["[type & xs]"],"doc":"Concatenates arrays of given type.","end-row":43,"filename":"clojure/java/shell.clj","name":"aconcat","ns":"clojure.java.shell","private":true,"row":35},{"arglist-strs":["[args]"],"end-row":50,"filename":"clojure/java/shell.clj","fixed-arities":[1],"name":"parse-args","ns":"clojure.java.shell","private":true,"row":45},{"fixed-arities":[1],"end-row":58,"private":true,"ns":"clojure.java.shell","name":"as-env-strings","filename":"clojure/java/shell.clj","arglist-strs":["[arg]"],"doc":"Helper so that callers can pass a Clojure map for the :env to sh.","row":52},{"arglist-strs":["[in]"],"end-row":64,"filename":"clojure/java/shell.clj","fixed-arities":[1],"name":"stream-to-bytes","ns":"clojure.java.shell","private":true,"row":60},{"arglist-strs":["[in]","[in enc]"],"end-row":71,"filename":"clojure/java/shell.clj","fixed-arities":[1,2],"name":"stream-to-string","ns":"clojure.java.shell","private":true,"row":66},{"arglist-strs":["[stream enc]"],"end-row":77,"filename":"clojure/java/shell.clj","fixed-arities":[2],"name":"stream-to-enc","ns":"clojure.java.shell","private":true,"row":73},{"arglist-strs":["[& args]"],"doc":"Passes the given strings to Runtime.exec() to launch a sub-process.\n\n  Options are\n\n  :in      may be given followed by any legal input source for\n           clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],\n           or String, to be fed to the sub-process's stdin.\n  :in-enc  option may be given followed by a String, used as a character\n           encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to\n           convert the input string specified by the :in option to the\n           sub-process's stdin.  Defaults to UTF-8.\n           If the :in option provides a byte array, then the bytes are passed\n           unencoded, and this option is ignored.\n  :out-enc option may be given followed by :bytes or a String. If a\n           String is given, it will be used as a character encoding\n           name (for example \"UTF-8\" or \"ISO-8859-1\") to convert\n           the sub-process's stdout to a String which is returned.\n           If :bytes is given, the sub-process's stdout will be stored\n           in a byte array and returned.  Defaults to UTF-8.\n  :env     override the process env with a map (or the underlying Java\n           String[] if you are a masochist).\n  :dir     override the process dir with a String or java.io.File.\n\n  You can bind :env or :dir for multiple operations using with-sh-env\n  and with-sh-dir.\n\n  sh returns a map of\n    :exit => sub-process's exit code\n    :out  => sub-process's stdout (as byte[] or String)\n    :err  => sub-process's stderr (String via platform default encoding)","end-row":128,"filename":"clojure/java/shell.clj","name":"sh","ns":"clojure.java.shell","row":79}]