[{"arglist-strs":["[parent & children]"],"end-row":15,"filename":"clojure/browser/dom.cljs","name":"append","ns":"clojure.browser.dom","row":13},{"end-row":18,"filename":"clojure/browser/dom.cljs","name":"DOMBuilder","ns":"clojure.browser.dom","row":17},{"arglist-strs":["[this]","[this attrs-or-children]","[this attrs children]"],"end-row":18,"filename":"clojure/browser/dom.cljs","fixed-arities":[1,3,2],"name":"-element","ns":"clojure.browser.dom","row":18},{"arglist-strs":["[& args]"],"end-row":21,"filename":"clojure/browser/dom.cljs","name":"log","ns":"clojure.browser.dom","row":20},{"arglist-strs":["[obj]"],"end-row":24,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"log-obj","ns":"clojure.browser.dom","row":23},{"arglist-strs":["[tag-or-text]","[tag & children]"],"end-row":90,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"element","ns":"clojure.browser.dom","row":81},{"arglist-strs":["[id]"],"doc":"Remove all children from the element with the passed id.","end-row":96,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"remove-children","ns":"clojure.browser.dom","row":92},{"arglist-strs":["[id]"],"end-row":99,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"get-element","ns":"clojure.browser.dom","row":98},{"arglist-strs":["[s]"],"end-row":102,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"html->dom","ns":"clojure.browser.dom","row":101},{"arglist-strs":["[parent child index]"],"end-row":105,"filename":"clojure/browser/dom.cljs","fixed-arities":[3],"name":"insert-at","ns":"clojure.browser.dom","row":104},{"arglist-strs":["[e]"],"doc":"Coerce the argument to a dom element if possible.","end-row":112,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"ensure-element","ns":"clojure.browser.dom","row":107},{"arglist-strs":["[old-node new-node]"],"doc":"Replace old-node with new-node. old-node can be an element or a\n   keyword which is the id of the node to replace.  new-node can be an\n   element or an html string.","end-row":122,"filename":"clojure/browser/dom.cljs","fixed-arities":[2],"name":"replace-node","ns":"clojure.browser.dom","row":114},{"arglist-strs":["[e s]"],"doc":"Set the text content for the passed element returning the\n  element. If a keyword is passed in the place of e, the element with\n  that id will be used and returned.","end-row":129,"filename":"clojure/browser/dom.cljs","fixed-arities":[2],"name":"set-text","ns":"clojure.browser.dom","row":124},{"arglist-strs":["[e]"],"doc":"Get the value of an element.","end-row":134,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"get-value","ns":"clojure.browser.dom","row":131},{"arglist-strs":["[e m]"],"doc":"Set properties on an element","end-row":140,"filename":"clojure/browser/dom.cljs","fixed-arities":[2],"name":"set-properties","ns":"clojure.browser.dom","row":136},{"arglist-strs":["[e v]"],"doc":"Set the value property for an element.","end-row":145,"filename":"clojure/browser/dom.cljs","fixed-arities":[2],"name":"set-value","ns":"clojure.browser.dom","row":142},{"arglist-strs":["[e]"],"end-row":149,"filename":"clojure/browser/dom.cljs","fixed-arities":[1],"name":"click-element","ns":"clojure.browser.dom","row":147}]