[{"fixed-arities":[0,1],"end-row":267,"meta":{},"name-end-col":16,"name-end-row":252,"name-row":252,"ns":"cljs.test","name":"empty-env","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L252","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":58,"arglist-strs":["[]","[reporter]"],"doc":"Generates a testing environment with a reporter.\n   (empty-env) - uses the :cljs.test/default reporter.\n   (empty-env :cljs.test/pprint) - pretty prints all data structures. \n   (empty-env reporter) - uses a reporter of your choosing.\n\n   To create your own reporter see cljs.test/report","row":252},{"end-row":269,"meta":{},"name-end-col":29,"name-end-row":269,"name-row":269,"ns":"cljs.test","name":"*current-env*","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L269","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":16,"end-col":34,"row":269},{"fixed-arities":[0],"end-row":272,"meta":{},"name-end-col":22,"name-end-row":271,"name-row":271,"ns":"cljs.test","name":"get-current-env","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L271","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":34,"arglist-strs":["[]"],"row":271},{"end-row":275,"meta":{},"name-end-col":26,"name-end-row":274,"name-row":274,"ns":"cljs.test","name":"update-current-env!","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L274","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":70,"arglist-strs":["[ks f & args]"],"varargs-min-arity":2,"row":274},{"fixed-arities":[1],"end-row":278,"meta":{},"name-end-col":15,"name-end-row":277,"name-row":277,"ns":"cljs.test","name":"set-env!","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L277","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":32,"arglist-strs":["[new-env]"],"row":277},{"fixed-arities":[0],"end-row":281,"meta":{},"name-end-col":17,"name-end-row":280,"name-row":280,"ns":"cljs.test","name":"clear-env!","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L280","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[]"],"row":280},{"fixed-arities":[0],"end-row":287,"meta":{},"name-end-col":25,"name-end-row":283,"name-row":283,"ns":"cljs.test","name":"get-and-clear-env!","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L283","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":10,"arglist-strs":["[]"],"row":283},{"fixed-arities":[1],"end-row":297,"meta":{},"name-end-col":23,"name-end-row":289,"name-row":289,"ns":"cljs.test","name":"testing-vars-str","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L289","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":63,"arglist-strs":["[m]"],"doc":"Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion.","row":289},{"fixed-arities":[0],"end-row":303,"meta":{},"name-end-col":27,"name-end-row":299,"name-row":299,"ns":"cljs.test","name":"testing-contexts-str","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L299","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":79,"arglist-strs":["[]"],"doc":"Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces.","row":299},{"fixed-arities":[1],"end-row":310,"meta":{},"name-end-col":26,"name-end-row":305,"name-row":305,"ns":"cljs.test","name":"inc-report-counter!","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L305","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":65,"arglist-strs":["[name]"],"doc":"Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil.","row":305},{"end-row":318,"meta":{},"name-end-col":9,"name-end-row":318,"name-row":318,"ns":"cljs.test","name":"report","defined-by":"cljs.core/defmulti","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L312","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":3,"end-col":61,"doc":"Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.","row":312},{"fixed-arities":[1],"end-row":328,"meta":{},"name-end-col":24,"name-end-row":325,"private":true,"name-row":325,"ns":"cljs.test","name":"print-comparison","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L325","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":55,"arglist-strs":["[m]"],"row":325},{"fixed-arities":[1],"end-row":376,"meta":{},"name-end-col":25,"name-end-row":366,"name-row":366,"ns":"cljs.test","name":"js-line-and-column","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L366","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":23,"arglist-strs":["[stack-element]"],"row":366},{"fixed-arities":[1],"end-row":386,"meta":{},"name-end-col":18,"name-end-row":378,"name-row":378,"ns":"cljs.test","name":"js-filename","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L378","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":15,"arglist-strs":["[stack-element]"],"row":378},{"fixed-arities":[3],"end-row":404,"meta":{},"name-end-col":29,"name-end-row":388,"name-row":388,"ns":"cljs.test","name":"mapped-line-and-column","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L388","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":17,"arglist-strs":["[filename line column]"],"row":388},{"fixed-arities":[2],"end-row":418,"meta":{},"name-end-col":20,"name-end-row":406,"name-row":406,"ns":"cljs.test","name":"file-and-line","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L406","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":39,"arglist-strs":["[exception depth]"],"row":406},{"fixed-arities":[1],"end-row":425,"meta":{},"name-end-col":16,"name-end-row":420,"name-row":420,"ns":"cljs.test","name":"do-report","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L420","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":17,"arglist-strs":["[m]"],"row":420},{"end-row":432,"meta":{},"name-end-col":24,"name-end-row":430,"name-row":430,"ns":"cljs.test","name":"IAsyncTest","defined-by":"cljs.core/defprotocol","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L430","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":14,"end-col":13,"doc":"Marker protocol denoting CPS function to begin asynchronous\n  testing.","row":430},{"fixed-arities":[1],"end-row":437,"meta":{},"name-end-col":13,"name-end-row":434,"name-row":434,"ns":"cljs.test","name":"async?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L434","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":29,"arglist-strs":["[x]"],"doc":"Returns whether x implements IAsyncTest.","row":434},{"fixed-arities":[1],"end-row":456,"meta":{},"name-end-col":16,"name-end-row":439,"name-row":439,"ns":"cljs.test","name":"run-block","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L439","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":58,"arglist-strs":["[fns]"],"doc":"Invoke all functions in fns with no arguments. A fn can optionally\n  return\n\n  an async test - is invoked with a continuation running left fns\n\n  a seq of fns tagged per block - are invoked immediately after fn","row":439},{"fixed-arities":[1],"end-row":463,"meta":{},"name-end-col":12,"name-end-row":458,"name-row":458,"ns":"cljs.test","name":"block","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L458","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":44,"arglist-strs":["[fns]"],"doc":"Tag a seq of fns to be picked up by run-block as injected\n  continuation.  See run-block.","row":458},{"fixed-arities":[2],"end-row":487,"meta":{},"name-end-col":23,"name-end-row":468,"private":true,"name-row":468,"ns":"cljs.test","name":"test-var-block*","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L468","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":51,"arglist-strs":["[v t]"],"row":468},{"fixed-arities":[1],"end-row":494,"meta":{},"name-end-col":21,"name-end-row":489,"name-row":489,"ns":"cljs.test","name":"test-var-block","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L489","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[v]"],"doc":"Like test-var, but returns a block for further composition and\n  later execution.","row":489},{"fixed-arities":[1],"end-row":500,"meta":{},"name-end-col":15,"name-end-row":496,"name-row":496,"ns":"cljs.test","name":"test-var","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L496","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":34,"arglist-strs":["[v]"],"doc":"If v has a function in its :test metadata, calls that function,\n  add v to :testing-vars property of env.","row":496},{"fixed-arities":[1],"end-row":507,"meta":{},"name-end-col":23,"name-end-row":502,"private":true,"name-row":502,"ns":"cljs.test","name":"default-fixture","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L502","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":7,"arglist-strs":["[f]"],"doc":"The default, empty, fixture function.  Just calls its argument.\n\n  NOTE: Incompatible with map fixtures.","row":502},{"fixed-arities":[2],"end-row":515,"meta":{},"name-end-col":23,"name-end-row":509,"name-row":509,"ns":"cljs.test","name":"compose-fixtures","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L509","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":32,"arglist-strs":["[f1 f2]"],"doc":"Composes two fixture functions, creating a new fixture function\n  that combines their behavior.\n\n  NOTE: Incompatible with map fixtures.","row":509},{"fixed-arities":[1],"end-row":523,"meta":{},"name-end-col":20,"name-end-row":517,"name-row":517,"ns":"cljs.test","name":"join-fixtures","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L517","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":54,"arglist-strs":["[fixtures]"],"doc":"Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.\n\n  NOTE: Incompatible with map fixtures.","row":517},{"fixed-arities":[2],"end-row":530,"meta":{},"name-end-col":25,"name-end-row":525,"private":true,"name-row":525,"ns":"cljs.test","name":"wrap-map-fixtures","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L525","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":49,"arglist-strs":["[map-fixtures block]"],"doc":"Wraps block in map-fixtures.","row":525},{"fixed-arities":[2],"end-row":547,"meta":{},"name-end-col":26,"name-end-row":532,"private":true,"name-row":532,"ns":"cljs.test","name":"execution-strategy","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L532","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":47,"arglist-strs":["[once each]"],"row":532},{"fixed-arities":[1],"end-row":554,"meta":{},"name-end-col":21,"name-end-row":549,"private":true,"name-row":549,"ns":"cljs.test","name":"disable-async","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L549","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":8,"end-col":13,"arglist-strs":["[f]"],"row":549},{"fixed-arities":[1],"end-row":587,"meta":{},"name-end-col":22,"name-end-row":556,"name-row":556,"ns":"cljs.test","name":"test-vars-block","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L556","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":37,"arglist-strs":["[vars]"],"doc":"Like test-vars, but returns a block for further composition and\n  later execution.","row":556},{"fixed-arities":[1],"end-row":596,"meta":{},"name-end-col":16,"name-end-row":589,"name-row":589,"ns":"cljs.test","name":"test-vars","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L589","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":72,"arglist-strs":["[vars]"],"doc":"Groups vars by their namespace and runs test-var on them with\n  appropriate fixtures assuming they are present in the current\n  testing environment.","row":589},{"fixed-arities":[1],"end-row":606,"meta":{},"name-end-col":18,"name-end-row":601,"name-row":601,"ns":"cljs.test","name":"successful?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljs#L601","filename":"/src/main/cljs/cljs/test.cljs","col":1,"name-col":7,"end-col":36,"arglist-strs":["[summary]"],"doc":"Returns true if the given test summary indicates all tests\n  were successful, false otherwise.","row":601},{"fixed-arities":[2],"end-row":23,"meta":{},"name-end-col":16,"name-end-row":19,"name-row":19,"ns":"cljs.test","name":"function?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L19","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":56,"arglist-strs":["[menv x]"],"doc":"Returns true if argument is a function or a symbol that resolves to\n  a function (not a macro).","row":19},{"fixed-arities":[2],"end-row":46,"meta":{},"name-end-col":23,"name-end-row":25,"name-row":25,"ns":"cljs.test","name":"assert-predicate","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L25","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":18,"arglist-strs":["[msg form]"],"doc":"Returns generic assertion code for any functional predicate.  The\n  'expected' argument to 'report' will contains the original form, the\n  'actual' argument will contain the form with all its sub-forms\n  evaluated.  If the predicate returns false, the 'actual' form will\n  be wrapped in (not...).","row":25},{"fixed-arities":[2],"end-row":63,"meta":{},"name-end-col":17,"name-end-row":48,"name-row":48,"ns":"cljs.test","name":"assert-any","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L48","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":17,"arglist-strs":["[msg form]"],"doc":"Returns generic assertion code for any test, including macros, Java\n  method calls, or isolated symbols.","row":48},{"fixed-arities":[0],"end-row":67,"meta":{},"name-end-col":36,"name-end-row":65,"private":true,"name-row":65,"ns":"cljs.test","name":"cljs-output-dir","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L65","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":21,"end-col":28,"arglist-strs":["[]"],"row":65},{"end-row":81,"meta":{},"name-end-col":22,"name-end-row":76,"name-row":76,"ns":"cljs.test","name":"assert-expr","defined-by":"clojure.core/defmulti","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L76","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":11,"end-col":24,"row":76},{"fixed-arities":[2],"end-row":169,"meta":{},"name-end-col":19,"name-end-row":158,"name-row":158,"ns":"cljs.test","name":"try-expr","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L158","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":46,"arglist-strs":["[msg form]"],"doc":"Used by the 'is' macro to catch unexpected exceptions.\n  You don't call this.","row":158},{"fixed-arities":[1,2],"end-row":190,"meta":{},"name-end-col":13,"name-end-row":174,"name-row":174,"ns":"cljs.test","name":"is","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L174","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":28,"arglist-strs":["[form]","[form msg]"],"doc":"Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.","row":174},{"end-row":214,"meta":{},"name-end-col":14,"name-end-row":192,"name-row":192,"ns":"cljs.test","name":"are","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L192","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":99,"arglist-strs":["[argv expr & args]"],"varargs-min-arity":2,"doc":"Checks multiple assertions with a template expression.\n  See clojure.template/do-template for an explanation of\n  templates.\n\n  Example: (are [x y] (= x y)  \n                2 (+ 1 1)\n                4 (* 2 2))\n  Expands to: \n           (do (is (= 2 (+ 1 1)))\n               (is (= 4 (* 2 2))))\n\n  Note: This breaks some reporting features, such as line numbers.","row":192},{"end-row":225,"meta":{},"name-end-col":18,"name-end-row":216,"name-row":216,"ns":"cljs.test","name":"testing","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L216","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":62,"arglist-strs":["[string & body]"],"varargs-min-arity":1,"doc":"Adds a new string to the list of testing contexts.  May be nested,\n  but must occur inside a test function (deftest).","row":216},{"end-row":246,"meta":{},"name-end-col":18,"name-end-row":230,"name-row":230,"ns":"cljs.test","name":"deftest","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L230","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":53,"arglist-strs":["[name & body]"],"varargs-min-arity":1,"doc":"Defines a test function with no arguments.  Test functions may call\n  other tests, so tests may be composed.  If you compose tests, you\n  should also define a function named test-ns-hook; run-tests will\n  call test-ns-hook instead of testing all vars.\n\n  Note: Actually, the test body goes in the :test metadata on the var,\n  and the real function (the value of the var) calls test-var on\n  itself.\n\n  When cljs.analyzer/*load-tests* is false, deftest is ignored.","row":230},{"end-row":265,"meta":{},"name-end-col":16,"name-end-row":248,"name-row":248,"ns":"cljs.test","name":"async","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L248","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[done & body]"],"varargs-min-arity":1,"doc":"Wraps body as a CPS function that can be returned from a test to\n  continue asynchronously.  Binds done to a function that must be\n  invoked once and from an async context after any assertions.\n\n  (deftest example-with-timeout\n    (async done\n      (js/setTimeout (fn []\n                       ;; make assertions in async context...\n                       (done) ;; ...then call done\n                       )\n                     0)))","row":248},{"fixed-arities":[1],"end-row":271,"meta":{},"name-end-col":10,"name-end-row":270,"name-row":270,"ns":"cljs.test","name":"ns?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L270","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"row":270},{"end-row":306,"meta":{},"name-end-col":26,"name-end-row":273,"name-row":273,"ns":"cljs.test","name":"run-tests-block","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L273","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[env-or-ns & namespaces]"],"varargs-min-arity":1,"doc":"Like test-vars, but returns a block for further composition and\n  later execution.","row":273},{"fixed-arities":[0,1],"end-row":320,"meta":{},"name-end-col":20,"name-end-row":308,"name-row":308,"ns":"cljs.test","name":"run-tests","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L308","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":60,"arglist-strs":["[]","[env-or-ns]","[env-or-ns & namespaces]"],"varargs-min-arity":1,"doc":"Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given. Does not return a meaningful\n  value due to the possiblity of asynchronous execution. To detect test\n  completion add a :end-run-tests method case to the cljs.test/report\n  multimethod.","row":308},{"fixed-arities":[0,1,2],"end-row":334,"meta":{},"name-end-col":24,"name-end-row":322,"name-row":322,"ns":"cljs.test","name":"run-all-tests","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L322","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":55,"arglist-strs":["[]","[re]","[re env]"],"doc":"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","row":322},{"fixed-arities":[1],"end-row":357,"meta":{},"name-end-col":30,"name-end-row":336,"name-row":336,"ns":"cljs.test","name":"test-all-vars-block","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L336","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":32,"arglist-strs":["[[quote ns]]"],"row":336},{"fixed-arities":[1],"end-row":366,"meta":{},"name-end-col":24,"name-end-row":359,"name-row":359,"ns":"cljs.test","name":"test-all-vars","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L359","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":67,"arglist-strs":["[[quote ns :as form]]"],"doc":"Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures.","row":359},{"fixed-arities":[2],"end-row":383,"meta":{},"name-end-col":24,"name-end-row":368,"name-row":368,"ns":"cljs.test","name":"test-ns-block","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L368","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":55,"arglist-strs":["[env [quote ns :as form]]"],"doc":"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.","row":368},{"fixed-arities":[1,2],"end-row":397,"meta":{},"name-end-col":18,"name-end-row":385,"name-row":385,"ns":"cljs.test","name":"test-ns","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L385","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":35,"arglist-strs":["[ns]","[env [quote ns :as form]]"],"doc":"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  ","row":385},{"end-row":412,"meta":{},"name-end-col":23,"name-end-row":402,"name-row":402,"ns":"cljs.test","name":"use-fixtures","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L402","lang":"clj","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":113,"arglist-strs":["[type & fns]"],"varargs-min-arity":1,"row":402},{"fixed-arities":[2],"end-row":23,"meta":{},"name-end-col":16,"name-end-row":19,"name-row":19,"ns":"cljs.test","name":"function?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L19","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":56,"arglist-strs":["[menv x]"],"doc":"Returns true if argument is a function or a symbol that resolves to\n  a function (not a macro).","row":19},{"fixed-arities":[2],"end-row":46,"meta":{},"name-end-col":23,"name-end-row":25,"name-row":25,"ns":"cljs.test","name":"assert-predicate","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L25","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":18,"arglist-strs":["[msg form]"],"doc":"Returns generic assertion code for any functional predicate.  The\n  'expected' argument to 'report' will contains the original form, the\n  'actual' argument will contain the form with all its sub-forms\n  evaluated.  If the predicate returns false, the 'actual' form will\n  be wrapped in (not...).","row":25},{"fixed-arities":[2],"end-row":63,"meta":{},"name-end-col":17,"name-end-row":48,"name-row":48,"ns":"cljs.test","name":"assert-any","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L48","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":17,"arglist-strs":["[msg form]"],"doc":"Returns generic assertion code for any test, including macros, Java\n  method calls, or isolated symbols.","row":48},{"fixed-arities":[0],"end-row":67,"meta":{},"name-end-col":36,"name-end-row":65,"private":true,"name-row":65,"ns":"cljs.test","name":"cljs-output-dir","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L65","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":21,"end-col":28,"arglist-strs":["[]"],"row":65},{"end-row":81,"meta":{},"name-end-col":22,"name-end-row":76,"name-row":76,"ns":"cljs.test","name":"assert-expr","defined-by":"cljs.core/defmulti","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L76","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":11,"end-col":24,"row":76},{"fixed-arities":[2],"end-row":169,"meta":{},"name-end-col":19,"name-end-row":158,"name-row":158,"ns":"cljs.test","name":"try-expr","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L158","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":46,"arglist-strs":["[msg form]"],"doc":"Used by the 'is' macro to catch unexpected exceptions.\n  You don't call this.","row":158},{"fixed-arities":[1,2],"end-row":190,"meta":{},"name-end-col":13,"name-end-row":174,"name-row":174,"ns":"cljs.test","name":"is","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L174","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":28,"arglist-strs":["[form]","[form msg]"],"doc":"Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.","row":174},{"end-row":214,"meta":{},"name-end-col":14,"name-end-row":192,"name-row":192,"ns":"cljs.test","name":"are","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L192","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":99,"arglist-strs":["[argv expr & args]"],"varargs-min-arity":2,"doc":"Checks multiple assertions with a template expression.\n  See clojure.template/do-template for an explanation of\n  templates.\n\n  Example: (are [x y] (= x y)  \n                2 (+ 1 1)\n                4 (* 2 2))\n  Expands to: \n           (do (is (= 2 (+ 1 1)))\n               (is (= 4 (* 2 2))))\n\n  Note: This breaks some reporting features, such as line numbers.","row":192},{"end-row":225,"meta":{},"name-end-col":18,"name-end-row":216,"name-row":216,"ns":"cljs.test","name":"testing","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L216","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":62,"arglist-strs":["[string & body]"],"varargs-min-arity":1,"doc":"Adds a new string to the list of testing contexts.  May be nested,\n  but must occur inside a test function (deftest).","row":216},{"end-row":246,"meta":{},"name-end-col":18,"name-end-row":230,"name-row":230,"ns":"cljs.test","name":"deftest","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L230","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":53,"arglist-strs":["[name & body]"],"varargs-min-arity":1,"doc":"Defines a test function with no arguments.  Test functions may call\n  other tests, so tests may be composed.  If you compose tests, you\n  should also define a function named test-ns-hook; run-tests will\n  call test-ns-hook instead of testing all vars.\n\n  Note: Actually, the test body goes in the :test metadata on the var,\n  and the real function (the value of the var) calls test-var on\n  itself.\n\n  When cljs.analyzer/*load-tests* is false, deftest is ignored.","row":230},{"end-row":265,"meta":{},"name-end-col":16,"name-end-row":248,"name-row":248,"ns":"cljs.test","name":"async","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L248","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[done & body]"],"varargs-min-arity":1,"doc":"Wraps body as a CPS function that can be returned from a test to\n  continue asynchronously.  Binds done to a function that must be\n  invoked once and from an async context after any assertions.\n\n  (deftest example-with-timeout\n    (async done\n      (js/setTimeout (fn []\n                       ;; make assertions in async context...\n                       (done) ;; ...then call done\n                       )\n                     0)))","row":248},{"fixed-arities":[1],"end-row":271,"meta":{},"name-end-col":10,"name-end-row":270,"name-row":270,"ns":"cljs.test","name":"ns?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L270","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"row":270},{"end-row":306,"meta":{},"name-end-col":26,"name-end-row":273,"name-row":273,"ns":"cljs.test","name":"run-tests-block","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L273","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[env-or-ns & namespaces]"],"varargs-min-arity":1,"doc":"Like test-vars, but returns a block for further composition and\n  later execution.","row":273},{"fixed-arities":[0,1],"end-row":320,"meta":{},"name-end-col":20,"name-end-row":308,"name-row":308,"ns":"cljs.test","name":"run-tests","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L308","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":60,"arglist-strs":["[]","[env-or-ns]","[env-or-ns & namespaces]"],"varargs-min-arity":1,"doc":"Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given. Does not return a meaningful\n  value due to the possiblity of asynchronous execution. To detect test\n  completion add a :end-run-tests method case to the cljs.test/report\n  multimethod.","row":308},{"fixed-arities":[0,1,2],"end-row":334,"meta":{},"name-end-col":24,"name-end-row":322,"name-row":322,"ns":"cljs.test","name":"run-all-tests","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L322","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":55,"arglist-strs":["[]","[re]","[re env]"],"doc":"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","row":322},{"fixed-arities":[1],"end-row":357,"meta":{},"name-end-col":30,"name-end-row":336,"name-row":336,"ns":"cljs.test","name":"test-all-vars-block","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L336","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":32,"arglist-strs":["[[quote ns]]"],"row":336},{"fixed-arities":[1],"end-row":366,"meta":{},"name-end-col":24,"name-end-row":359,"name-row":359,"ns":"cljs.test","name":"test-all-vars","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L359","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":67,"arglist-strs":["[[quote ns :as form]]"],"doc":"Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures.","row":359},{"fixed-arities":[2],"end-row":383,"meta":{},"name-end-col":24,"name-end-row":368,"name-row":368,"ns":"cljs.test","name":"test-ns-block","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L368","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":55,"arglist-strs":["[env [quote ns :as form]]"],"doc":"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.","row":368},{"fixed-arities":[1,2],"end-row":397,"meta":{},"name-end-col":18,"name-end-row":385,"name-row":385,"ns":"cljs.test","name":"test-ns","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L385","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":35,"arglist-strs":["[ns]","[env [quote ns :as form]]"],"doc":"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  ","row":385},{"end-row":412,"meta":{},"name-end-col":23,"name-end-row":402,"name-row":402,"ns":"cljs.test","name":"use-fixtures","defined-by":"cljs.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/test.cljc#L402","lang":"cljs","filename":"/src/main/cljs/cljs/test.cljc","macro":true,"col":1,"name-col":11,"end-col":113,"arglist-strs":["[type & fns]"],"varargs-min-arity":1,"row":402}]