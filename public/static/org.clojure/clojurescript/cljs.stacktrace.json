[{"end-row":31,"name-end-col":27,"name-end-row":17,"name-row":17,"ns":"cljs.stacktrace","name":"parse-stacktrace","defined-by":"clojure.core/defmulti","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":11,"end-col":49,"doc":"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str","row":17},{"fixed-arities":[1],"end-row":35,"name-end-col":16,"name-end-row":33,"name-row":33,"ns":"cljs.stacktrace","name":"parse-int","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":32,"arglist-strs":["[s]"],"row":33},{"fixed-arities":[2],"end-row":41,"name-end-col":19,"name-end-row":37,"name-row":37,"ns":"cljs.stacktrace","name":"starts-with?","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":40,"arglist-strs":["[s0 s1]"],"row":37},{"fixed-arities":[2],"end-row":47,"name-end-col":17,"name-end-row":43,"name-row":43,"ns":"cljs.stacktrace","name":"ends-with?","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":38,"arglist-strs":["[s0 s1]"],"row":43},{"fixed-arities":[1],"end-row":51,"name-end-col":20,"name-end-row":49,"name-row":49,"ns":"cljs.stacktrace","name":"string->regex","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":28,"arglist-strs":["[s]"],"row":49},{"fixed-arities":[1],"end-row":55,"name-end-col":23,"name-end-row":53,"name-row":53,"ns":"cljs.stacktrace","name":"output-directory","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":43,"arglist-strs":["[opts]"],"row":53},{"fixed-arities":[1],"end-row":79,"name-end-col":29,"name-end-row":60,"name-row":60,"ns":"cljs.stacktrace","name":"parse-file-line-column","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":65,"arglist-strs":["[flc]"],"row":60},{"fixed-arities":[3],"end-row":106,"name-end-col":17,"name-end-row":81,"name-row":81,"ns":"cljs.stacktrace","name":"parse-file","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":44,"arglist-strs":["[{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]"],"doc":"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.","row":81},{"fixed-arities":[3],"end-row":129,"name-end-col":26,"name-end-row":111,"name-row":111,"ns":"cljs.stacktrace","name":"chrome-st-el->frame","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":111},{"fixed-arities":[3],"end-row":227,"name-end-col":26,"name-end-row":212,"name-row":212,"ns":"cljs.stacktrace","name":"safari-st-el->frame","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":212},{"fixed-arities":[1],"end-row":304,"name-end-col":29,"name-end-row":294,"name-row":294,"ns":"cljs.stacktrace","name":"firefox-clean-function","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":69,"arglist-strs":["[f]"],"row":294},{"fixed-arities":[3],"end-row":321,"name-end-col":27,"name-end-row":306,"name-row":306,"ns":"cljs.stacktrace","name":"firefox-st-el->frame","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":306},{"fixed-arities":[1],"end-row":448,"name-end-col":17,"name-end-row":443,"name-row":443,"ns":"cljs.stacktrace","name":"remove-ext","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":36,"arglist-strs":["[file]"],"row":443},{"fixed-arities":[4],"end-row":469,"name-end-col":30,"name-end-row":450,"name-row":450,"ns":"cljs.stacktrace","name":"mapped-line-column-call","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":22,"arglist-strs":["[sms file line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":450},{"fixed-arities":[3],"end-row":489,"name-end-col":19,"name-end-row":471,"name-row":471,"ns":"cljs.stacktrace","name":"mapped-frame","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[{:keys [function file line column]} sms opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":471},{"fixed-arities":[3,2],"end-row":526,"name-end-col":24,"name-end-row":491,"name-row":491,"ns":"cljs.stacktrace","name":"mapped-stacktrace","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":76,"arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":491},{"fixed-arities":[3,2],"end-row":541,"name-end-col":28,"name-end-row":528,"name-row":528,"ns":"cljs.stacktrace","name":"mapped-stacktrace-str","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":64,"arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","row":528},{"end-row":560,"name-end-col":11,"name-end-row":555,"name-row":555,"ns":"cljs.stacktrace","name":"sms","defined-by":"clojure.core/def","lang":"clj","filename":"cljs/stacktrace.cljc","col":3,"name-col":8,"end-col":29,"row":555},{"end-row":31,"name-end-col":27,"name-end-row":17,"name-row":17,"ns":"cljs.stacktrace","name":"parse-stacktrace","defined-by":"cljs.core/defmulti","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":11,"end-col":49,"doc":"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str","row":17},{"fixed-arities":[1],"end-row":35,"name-end-col":16,"name-end-row":33,"name-row":33,"ns":"cljs.stacktrace","name":"parse-int","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":32,"arglist-strs":["[s]"],"row":33},{"fixed-arities":[2],"end-row":41,"name-end-col":19,"name-end-row":37,"name-row":37,"ns":"cljs.stacktrace","name":"starts-with?","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":40,"arglist-strs":["[s0 s1]"],"row":37},{"fixed-arities":[2],"end-row":47,"name-end-col":17,"name-end-row":43,"name-row":43,"ns":"cljs.stacktrace","name":"ends-with?","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":38,"arglist-strs":["[s0 s1]"],"row":43},{"fixed-arities":[1],"end-row":51,"name-end-col":20,"name-end-row":49,"name-row":49,"ns":"cljs.stacktrace","name":"string->regex","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":28,"arglist-strs":["[s]"],"row":49},{"fixed-arities":[1],"end-row":55,"name-end-col":23,"name-end-row":53,"name-row":53,"ns":"cljs.stacktrace","name":"output-directory","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":43,"arglist-strs":["[opts]"],"row":53},{"fixed-arities":[1],"end-row":79,"name-end-col":29,"name-end-row":60,"name-row":60,"ns":"cljs.stacktrace","name":"parse-file-line-column","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":65,"arglist-strs":["[flc]"],"row":60},{"fixed-arities":[3],"end-row":106,"name-end-col":17,"name-end-row":81,"name-row":81,"ns":"cljs.stacktrace","name":"parse-file","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":44,"arglist-strs":["[{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]"],"doc":"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.","row":81},{"fixed-arities":[3],"end-row":129,"name-end-col":26,"name-end-row":111,"name-row":111,"ns":"cljs.stacktrace","name":"chrome-st-el->frame","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":111},{"fixed-arities":[3],"end-row":227,"name-end-col":26,"name-end-row":212,"name-row":212,"ns":"cljs.stacktrace","name":"safari-st-el->frame","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":212},{"fixed-arities":[1],"end-row":304,"name-end-col":29,"name-end-row":294,"name-row":294,"ns":"cljs.stacktrace","name":"firefox-clean-function","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":69,"arglist-strs":["[f]"],"row":294},{"fixed-arities":[3],"end-row":321,"name-end-col":27,"name-end-row":306,"name-row":306,"ns":"cljs.stacktrace","name":"firefox-st-el->frame","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[repl-env st-el opts]"],"row":306},{"fixed-arities":[1],"end-row":448,"name-end-col":17,"name-end-row":443,"name-row":443,"ns":"cljs.stacktrace","name":"remove-ext","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":36,"arglist-strs":["[file]"],"row":443},{"fixed-arities":[4],"end-row":469,"name-end-col":30,"name-end-row":450,"name-row":450,"ns":"cljs.stacktrace","name":"mapped-line-column-call","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":22,"arglist-strs":["[sms file line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":450},{"fixed-arities":[3],"end-row":489,"name-end-col":19,"name-end-row":471,"name-row":471,"ns":"cljs.stacktrace","name":"mapped-frame","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":26,"arglist-strs":["[{:keys [function file line column]} sms opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":471},{"fixed-arities":[3,2],"end-row":526,"name-end-col":24,"name-end-row":491,"name-row":491,"ns":"cljs.stacktrace","name":"mapped-stacktrace","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":76,"arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":491},{"fixed-arities":[3,2],"end-row":541,"name-end-col":28,"name-end-row":528,"name-row":528,"ns":"cljs.stacktrace","name":"mapped-stacktrace-str","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/stacktrace.cljc","col":1,"name-col":7,"end-col":64,"arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","row":528},{"end-row":560,"name-end-col":11,"name-end-row":555,"name-row":555,"ns":"cljs.stacktrace","name":"sms","defined-by":"cljs.core/def","lang":"cljs","filename":"cljs/stacktrace.cljc","col":3,"name-col":8,"end-col":29,"row":555}]