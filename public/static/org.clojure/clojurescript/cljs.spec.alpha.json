[{"end-row":19,"filename":"cljs/spec/alpha.cljc","lang":"clj","name":"registry-ref","ns":"cljs.spec.alpha","row":19},{"fixed-arities":[1],"end-row":26,"private":true,"ns":"cljs.spec.alpha","name":"->sym","lang":"clj","filename":"cljs/spec/alpha.cljc","arglist-strs":["[x]"],"doc":"Returns a symbol from a symbol or var","row":21},{"fixed-arities":[1],"end-row":34,"private":true,"ns":"cljs.spec.alpha","name":"unfn","lang":"clj","filename":"cljs/spec/alpha.cljc","arglist-strs":["[expr]"],"row":28},{"fixed-arities":[2],"end-row":48,"private":true,"ns":"cljs.spec.alpha","name":"res","lang":"clj","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env form]"],"row":36},{"fixed-arities":[1],"end-row":53,"private":true,"ns":"cljs.spec.alpha","name":"mres","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[form]"],"doc":"a compile time res, for use in cljs/spec/alpha.cljs","row":50},{"fixed-arities":[2],"end-row":61,"private":true,"ns":"cljs.spec.alpha","name":"ns-qualify","lang":"clj","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env s]"],"doc":"Qualify symbol s by resolving it or using the current *ns*.","row":55},{"end-row":63,"filename":"cljs/spec/alpha.cljc","lang":"clj","name":"_speced_vars","ns":"cljs.spec.alpha","private":true,"row":63},{"arglist-strs":["[]"],"end-row":66,"filename":"cljs/spec/alpha.cljc","fixed-arities":[0],"lang":"clj","name":"speced-vars","ns":"cljs.spec.alpha","row":65},{"fixed-arities":[2],"end-row":85,"ns":"cljs.spec.alpha","name":"def","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[k spec-form]"],"doc":"Given a namespace-qualified keyword or resolveable symbol k, and a\n  spec, spec-name, predicate or regex-op makes an entry in the\n  registry mapping k to the spec. Use nil to remove an entry in\n  the registry for k.","row":68},{"end-row":104,"ns":"cljs.spec.alpha","name":"spec","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[form & {:keys [gen]}]"],"doc":"Takes a single predicate form, e.g. can be the name of a predicate,\n  like even?, or a fn literal like #(< % 42). Note that it is not\n  generally necessary to wrap predicates in spec when using the rest\n  of the spec macros, only to attach a unique generator\n\n  Can also be passed the result of one of the regex ops -\n  cat, alt, *, +, ?, in which case it will return a regex-conforming\n  spec, useful when nesting an independent regex.\n  ---\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.\n\n  Returns a spec.","row":87},{"fixed-arities":[2],"end-row":133,"ns":"cljs.spec.alpha","name":"multi-spec","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[mm retag]"],"doc":"Takes the name of a spec/predicate-returning multimethod and a\n  tag-restoring keyword or fn (retag).  Returns a spec that when\n  conforming or explaining data will pass it to the multimethod to get\n  an appropriate spec. You can e.g. use multi-spec to dynamically and\n  extensibly associate specs with 'tagged' data (i.e. data where one\n  of the fields indicates the shape of the rest of the structure).\n\n  (defmulti mspec :tag)\n\n  The methods should ignore their argument and return a predicate/spec:\n  (defmethod mspec :int [_] (s/keys :req-un [::tag ::i]))\n\n  retag is used during generation to retag generated values with\n  matching tags. retag can either be a keyword, at which key the\n  dispatch-tag will be assoc'ed, or a fn of generated value and\n  dispatch-tag that should return an appropriately retagged value.\n\n  Note that because the tags themselves comprise an open set,\n  the tag key spec cannot enumerate the values, but can e.g.\n  test for keyword?.\n\n  Note also that the dispatch values of the multimethod will be\n  included in the path, i.e. in reporting and gen overrides, even\n  though those values are not evident in the spec.\n","row":106},{"end-row":195,"ns":"cljs.spec.alpha","name":"keys","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [req req-un opt opt-un gen]}]"],"doc":"Creates and returns a map validating spec. :req and :opt are both\n  vectors of namespaced-qualified keywords. The validator will ensure\n  the :req keys are present. The :opt keys serve as documentation and\n  may be used by the generator.\n\n  The :req key vector supports 'and' and 'or' for key groups:\n\n  (s/keys :req [::x ::y (or ::secret (and ::user ::pwd))] :opt [::z])\n\n  There are also -un versions of :req and :opt. These allow\n  you to connect unqualified keys to specs.  In each case, fully\n  qualfied keywords are passed, which name the specs, but unqualified\n  keys (with the same name component) are expected and checked at\n  conform-time, and generated during gen:\n\n  (s/keys :req-un [:my.ns/x :my.ns/y])\n\n  The above says keys :x and :y are required, and will be validated\n  and generated by specs (if they exist) named :my.ns/x :my.ns/y\n  respectively.\n\n  In addition, the values of *all* namespace-qualified keys will be validated\n  (and possibly destructured) by any registered specs. Note: there is\n  no support for inline value specification, by design.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.","row":135},{"end-row":212,"ns":"cljs.spec.alpha","name":"or","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/or :even even? :small #(< % 42))\n\n  Returns a destructuring spec that returns a map entry containing the\n  key of the first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return.","row":197},{"end-row":222,"ns":"cljs.spec.alpha","name":"and","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& pred-forms]"],"doc":"Takes predicate/spec-forms, e.g.\n\n  (s/and even? #(< % 42))\n\n  Returns a spec that returns the conformed value. Successive\n  conformed values propagate through rest of predicates.","row":214},{"fixed-arities":[2],"end-row":231,"private":true,"ns":"cljs.spec.alpha","name":"res-kind","lang":"clj","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env opts]"],"row":224},{"end-row":279,"ns":"cljs.spec.alpha","name":"every","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred & {:keys [into kind count max-count min-count distinct gen-max gen-into gen] :as opts}]"],"doc":"takes a pred and validates collection elements against that pred.\n\n  Note that 'every' does not do exhaustive checking, rather it samples\n  *coll-check-limit* elements. Nor (as a result) does it do any\n  conforming of elements. 'explain' will report at most *coll-error-limit*\n  problems.  Thus 'every' should be suitable for potentially large\n  collections.\n\n  Takes several kwargs options that further constrain the collection:\n\n  :kind - a pred that the collection type must satisfy, e.g. vector?\n          (default nil) Note that if :kind is specified and :into is\n          not, this pred must generate in order for every to generate.\n  :count - specifies coll has exactly this count (default nil)\n  :min-count, :max-count - coll has count (<= min-count count max-count) (defaults nil)\n  :distinct - all the elements are distinct (default nil)\n\n  And additional args that control gen\n\n  :gen-max - the maximum coll size to generate (default 20)\n  :into - one of [], (), {}, #{} - the default collection to generate into\n      (default same as :kind if supplied, else []\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator\n\n  See also - coll-of, every-kv\n","row":233},{"end-row":290,"ns":"cljs.spec.alpha","name":"every-kv","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[kpred vpred & opts]"],"doc":"like 'every' but takes separate key and val preds and works on associative collections.\n\n  Same options as 'every', :into defaults to {}\n\n  See also - map-of","row":281},{"end-row":305,"ns":"cljs.spec.alpha","name":"coll-of","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred & opts]"],"doc":"Returns a spec for a collection of items satisfying pred. Unlike\n  generator will fill an empty init-coll.\n\n  Same options as 'every'. conform will produce a collection\n  corresponding to :into if supplied, else will match the input collection,\n  avoiding rebuilding when possible.\n\n  Same options as 'every'.\n\n  See also - every, map-of","row":292},{"end-row":319,"ns":"cljs.spec.alpha","name":"map-of","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[kpred vpred & opts]"],"doc":"Returns a spec for a map whose keys satisfy kpred and vals satisfy\n  vpred. Unlike 'every-kv', map-of will exhaustively conform every\n  value.\n\n  Same options as 'every', :kind defaults to map?, with the addition of:\n\n  :conform-keys - conform keys as well as values (default false)\n\n  See also - every-kv","row":307},{"fixed-arities":[1],"end-row":325,"ns":"cljs.spec.alpha","name":"*","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches zero or more values matching\n  pred. Produces a vector of matches iff there is at least one match","row":321},{"fixed-arities":[1],"end-row":331,"ns":"cljs.spec.alpha","name":"+","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches one or more values matching\n  pred. Produces a vector of matches","row":327},{"fixed-arities":[1],"end-row":337,"ns":"cljs.spec.alpha","name":"?","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches zero or one value matching\n  pred. Produces a single value (not a collection) if matched.","row":333},{"end-row":354,"ns":"cljs.spec.alpha","name":"alt","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/alt :even even? :small #(< % 42))\n\n  Returns a regex op that returns a map entry containing the key of the\n  first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return.","row":339},{"end-row":370,"ns":"cljs.spec.alpha","name":"cat","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/cat :e even? :o odd?)\n\n  Returns a regex op that matches (all) values in sequence, returning a map\n  containing the keys of each pred and the corresponding value.","row":356},{"end-row":378,"ns":"cljs.spec.alpha","name":"&","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[re & preds]"],"doc":"takes a regex op re, and predicates. Returns a regex-op that consumes\n  input as per re but subjects the resulting value to the\n  conjunction of the predicates, and any conforming they might perform.","row":372},{"fixed-arities":[1,2],"end-row":386,"ns":"cljs.spec.alpha","name":"conformer","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[f]","[f unf]"],"doc":"takes a predicate function with the semantics of conform i.e. it should return either a\n  (possibly converted) value or :cljs.spec.alpha/invalid, and returns a\n  spec that uses it as a predicate/conformer. Optionally takes a\n  second fn that does unform of result of first","row":380},{"end-row":406,"ns":"cljs.spec.alpha","name":"fspec","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [args ret fn gen] :or {ret `cljs.core/any?}}]"],"doc":"takes :args :ret and (optional) :fn kwargs whose values are preds\n  and returns a spec whose conform/explain take a fn and validates it\n  using generative testing. The conformed value is always the fn itself.\n\n  See 'fdef' for a single operation that creates an fspec and\n  registers it, as well as a full description of :args, :ret and :fn\n\n  fspecs can generate functions that validate the arguments and\n  fabricate a return value compliant with the :ret spec, ignoring\n  the :fn spec if present.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args\n  that returns a test.check generator.","row":388},{"end-row":414,"ns":"cljs.spec.alpha","name":"tuple","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& preds]"],"doc":"takes one or more preds and returns a spec for a tuple, a vector\n  where each element conforms to the corresponding pred. Each element\n  will be referred to in paths using its ordinal.","row":408},{"end-row":449,"ns":"cljs.spec.alpha","name":"fdef","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[fn-sym & specs]"],"doc":"Takes a symbol naming a function, and one or more of the following:\n\n  :args A regex spec for the function arguments as they were a list to be\n    passed to apply - in this way, a single spec can handle functions with\n    multiple arities\n  :ret A spec for the function's return value\n  :fn A spec of the relationship between args and ret - the\n    value passed is {:args conformed-args :ret conformed-ret} and is\n    expected to contain predicates that relate those values\n\n  Qualifies fn-sym with resolve, or using *ns* if no resolution found.\n  Registers an fspec in the global registry, where it can be retrieved\n  by calling get-spec with the var or fully-qualified symbol.\n\n  Once registered, function specs are included in doc, checked by\n  instrument, tested by the runner cljs.spec.test.alpha/check, and (if\n  a macro) used to explain errors during macroexpansion.\n\n  Note that :fn specs require the presence of :args and :ret specs to\n  conform values, and so :fn specs will be ignored if :args or :ret\n  are missing.\n\n  Returns the qualified fn-sym.\n\n  For example, to register function specs for the symbol function:\n\n  (s/fdef cljs.core/symbol\n    :args (s/alt :separate (s/cat :ns string? :n string?)\n                 :str string?\n                 :sym symbol?)\n    :ret symbol?)","row":416},{"end-row":468,"ns":"cljs.spec.alpha","name":"keys*","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& kspecs]"],"doc":"takes the same arguments as spec/keys and returns a regex op that matches sequences of key/values,\n  converts them into a map, and conforms that map with a corresponding\n  spec/keys call:\n\n  user=> (s/conform (s/keys :req-un [::a ::c]) {:a 1 :c 2})\n  {:a 1, :c 2}\n  user=> (s/conform (s/keys* :req-un [::a ::c]) [:a 1 :c 2])\n  {:a 1, :c 2}\n\n  the resulting regex op can be composed into a larger regex:\n\n  user=> (s/conform (s/cat :i1 integer? :m (s/keys* :req-un [::a ::c]) :i2 integer?) [42 :a 1 :c 2 :d 4 99])\n  {:i1 42, :m {:a 1, :c 2, :d 4}, :i2 99}","row":451},{"fixed-arities":[1],"end-row":474,"ns":"cljs.spec.alpha","name":"nilable","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred]"],"doc":"returns a spec that accepts nil and values satisfiying pred","row":470},{"fixed-arities":[2],"end-row":486,"ns":"cljs.spec.alpha","name":"inst-in","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[start end]"],"doc":"Returns a spec that validates insts in the range from start\n  (inclusive) to end (exclusive).","row":476},{"fixed-arities":[2],"end-row":493,"ns":"cljs.spec.alpha","name":"int-in","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[start end]"],"doc":"Returns a spec that validates fixed precision integers in the\n  range from start (inclusive) to end (exclusive).","row":488},{"end-row":510,"ns":"cljs.spec.alpha","name":"double-in","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [infinite? NaN? min max] :or {infinite? true NaN? true} :as m}]"],"doc":"Specs a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity allowed (default true)\n    :NaN?      - whether NaN allowed (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)","row":495},{"end-row":519,"ns":"cljs.spec.alpha","name":"merge","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& pred-forms]"],"doc":"Takes map-validating specs (e.g. 'keys' specs) and\n  returns a spec that returns a conformed map satisfying all of the\n  specs.  Successive conformed values propagate through rest of\n  predicates. Unlike 'and', merge can generate maps satisfying the\n  union of the predicates.","row":512},{"fixed-arities":[1,3,2],"end-row":542,"ns":"cljs.spec.alpha","name":"exercise-fn","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[sym]","[sym n]","[sym n fspec]"],"doc":"exercises the fn named by sym (a symbol) by applying it to\n  n (default 10) generated samples of its args spec. When fspec is\n  supplied its arg spec is used, and sym-or-f can be a fn.  Returns a\n  sequence of tuples of [args ret]. ","row":521},{"fixed-arities":[0],"end-row":546,"private":true,"ns":"cljs.spec.alpha","name":"init-compile-asserts","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[]"],"row":544},{"fixed-arities":[2],"end-row":564,"ns":"cljs.spec.alpha","name":"assert","lang":"clj","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[spec x]"],"doc":"spec-checking assert expression. Returns x if x is valid? according\nto spec, else throws an error with explain-data plus ::failure of\n:assertion-failed.\nCan be disabled at either compile time or runtime:\nIf *compile-asserts* is false at compile time, compiles to x. Defaults\nto the negation value of the ':elide-asserts' compiler option, or true if\nnot set.\nIf (check-asserts?) is false at runtime, always returns x. Defaults to\nvalue of 'cljs.spec.alpha/*runtime-asserts*', or false if not set. You can\ntoggle check-asserts? with (check-asserts bool).","row":548},{"end-row":19,"filename":"cljs/spec/alpha.cljc","lang":"cljs","name":"registry-ref","ns":"cljs.spec.alpha","row":19},{"fixed-arities":[1],"end-row":26,"private":true,"ns":"cljs.spec.alpha","name":"->sym","lang":"cljs","filename":"cljs/spec/alpha.cljc","arglist-strs":["[x]"],"doc":"Returns a symbol from a symbol or var","row":21},{"fixed-arities":[1],"end-row":34,"private":true,"ns":"cljs.spec.alpha","name":"unfn","lang":"cljs","filename":"cljs/spec/alpha.cljc","arglist-strs":["[expr]"],"row":28},{"fixed-arities":[2],"end-row":48,"private":true,"ns":"cljs.spec.alpha","name":"res","lang":"cljs","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env form]"],"row":36},{"fixed-arities":[1],"end-row":53,"private":true,"ns":"cljs.spec.alpha","name":"mres","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[form]"],"doc":"a compile time res, for use in cljs/spec/alpha.cljs","row":50},{"fixed-arities":[2],"end-row":61,"private":true,"ns":"cljs.spec.alpha","name":"ns-qualify","lang":"cljs","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env s]"],"doc":"Qualify symbol s by resolving it or using the current *ns*.","row":55},{"end-row":63,"filename":"cljs/spec/alpha.cljc","lang":"cljs","name":"_speced_vars","ns":"cljs.spec.alpha","private":true,"row":63},{"arglist-strs":["[]"],"end-row":66,"filename":"cljs/spec/alpha.cljc","fixed-arities":[0],"lang":"cljs","name":"speced-vars","ns":"cljs.spec.alpha","row":65},{"fixed-arities":[2],"end-row":85,"ns":"cljs.spec.alpha","name":"def","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[k spec-form]"],"doc":"Given a namespace-qualified keyword or resolveable symbol k, and a\n  spec, spec-name, predicate or regex-op makes an entry in the\n  registry mapping k to the spec. Use nil to remove an entry in\n  the registry for k.","row":68},{"end-row":104,"ns":"cljs.spec.alpha","name":"spec","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[form & {:keys [gen]}]"],"doc":"Takes a single predicate form, e.g. can be the name of a predicate,\n  like even?, or a fn literal like #(< % 42). Note that it is not\n  generally necessary to wrap predicates in spec when using the rest\n  of the spec macros, only to attach a unique generator\n\n  Can also be passed the result of one of the regex ops -\n  cat, alt, *, +, ?, in which case it will return a regex-conforming\n  spec, useful when nesting an independent regex.\n  ---\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.\n\n  Returns a spec.","row":87},{"fixed-arities":[2],"end-row":133,"ns":"cljs.spec.alpha","name":"multi-spec","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[mm retag]"],"doc":"Takes the name of a spec/predicate-returning multimethod and a\n  tag-restoring keyword or fn (retag).  Returns a spec that when\n  conforming or explaining data will pass it to the multimethod to get\n  an appropriate spec. You can e.g. use multi-spec to dynamically and\n  extensibly associate specs with 'tagged' data (i.e. data where one\n  of the fields indicates the shape of the rest of the structure).\n\n  (defmulti mspec :tag)\n\n  The methods should ignore their argument and return a predicate/spec:\n  (defmethod mspec :int [_] (s/keys :req-un [::tag ::i]))\n\n  retag is used during generation to retag generated values with\n  matching tags. retag can either be a keyword, at which key the\n  dispatch-tag will be assoc'ed, or a fn of generated value and\n  dispatch-tag that should return an appropriately retagged value.\n\n  Note that because the tags themselves comprise an open set,\n  the tag key spec cannot enumerate the values, but can e.g.\n  test for keyword?.\n\n  Note also that the dispatch values of the multimethod will be\n  included in the path, i.e. in reporting and gen overrides, even\n  though those values are not evident in the spec.\n","row":106},{"end-row":195,"ns":"cljs.spec.alpha","name":"keys","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [req req-un opt opt-un gen]}]"],"doc":"Creates and returns a map validating spec. :req and :opt are both\n  vectors of namespaced-qualified keywords. The validator will ensure\n  the :req keys are present. The :opt keys serve as documentation and\n  may be used by the generator.\n\n  The :req key vector supports 'and' and 'or' for key groups:\n\n  (s/keys :req [::x ::y (or ::secret (and ::user ::pwd))] :opt [::z])\n\n  There are also -un versions of :req and :opt. These allow\n  you to connect unqualified keys to specs.  In each case, fully\n  qualfied keywords are passed, which name the specs, but unqualified\n  keys (with the same name component) are expected and checked at\n  conform-time, and generated during gen:\n\n  (s/keys :req-un [:my.ns/x :my.ns/y])\n\n  The above says keys :x and :y are required, and will be validated\n  and generated by specs (if they exist) named :my.ns/x :my.ns/y\n  respectively.\n\n  In addition, the values of *all* namespace-qualified keys will be validated\n  (and possibly destructured) by any registered specs. Note: there is\n  no support for inline value specification, by design.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator.","row":135},{"end-row":212,"ns":"cljs.spec.alpha","name":"or","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/or :even even? :small #(< % 42))\n\n  Returns a destructuring spec that returns a map entry containing the\n  key of the first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return.","row":197},{"end-row":222,"ns":"cljs.spec.alpha","name":"and","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& pred-forms]"],"doc":"Takes predicate/spec-forms, e.g.\n\n  (s/and even? #(< % 42))\n\n  Returns a spec that returns the conformed value. Successive\n  conformed values propagate through rest of predicates.","row":214},{"fixed-arities":[2],"end-row":231,"private":true,"ns":"cljs.spec.alpha","name":"res-kind","lang":"cljs","filename":"cljs/spec/alpha.cljc","arglist-strs":["[env opts]"],"row":224},{"end-row":279,"ns":"cljs.spec.alpha","name":"every","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred & {:keys [into kind count max-count min-count distinct gen-max gen-into gen] :as opts}]"],"doc":"takes a pred and validates collection elements against that pred.\n\n  Note that 'every' does not do exhaustive checking, rather it samples\n  *coll-check-limit* elements. Nor (as a result) does it do any\n  conforming of elements. 'explain' will report at most *coll-error-limit*\n  problems.  Thus 'every' should be suitable for potentially large\n  collections.\n\n  Takes several kwargs options that further constrain the collection:\n\n  :kind - a pred that the collection type must satisfy, e.g. vector?\n          (default nil) Note that if :kind is specified and :into is\n          not, this pred must generate in order for every to generate.\n  :count - specifies coll has exactly this count (default nil)\n  :min-count, :max-count - coll has count (<= min-count count max-count) (defaults nil)\n  :distinct - all the elements are distinct (default nil)\n\n  And additional args that control gen\n\n  :gen-max - the maximum coll size to generate (default 20)\n  :into - one of [], (), {}, #{} - the default collection to generate into\n      (default same as :kind if supplied, else []\n\n  Optionally takes :gen generator-fn, which must be a fn of no args that\n  returns a test.check generator\n\n  See also - coll-of, every-kv\n","row":233},{"end-row":290,"ns":"cljs.spec.alpha","name":"every-kv","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[kpred vpred & opts]"],"doc":"like 'every' but takes separate key and val preds and works on associative collections.\n\n  Same options as 'every', :into defaults to {}\n\n  See also - map-of","row":281},{"end-row":305,"ns":"cljs.spec.alpha","name":"coll-of","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred & opts]"],"doc":"Returns a spec for a collection of items satisfying pred. Unlike\n  generator will fill an empty init-coll.\n\n  Same options as 'every'. conform will produce a collection\n  corresponding to :into if supplied, else will match the input collection,\n  avoiding rebuilding when possible.\n\n  Same options as 'every'.\n\n  See also - every, map-of","row":292},{"end-row":319,"ns":"cljs.spec.alpha","name":"map-of","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[kpred vpred & opts]"],"doc":"Returns a spec for a map whose keys satisfy kpred and vals satisfy\n  vpred. Unlike 'every-kv', map-of will exhaustively conform every\n  value.\n\n  Same options as 'every', :kind defaults to map?, with the addition of:\n\n  :conform-keys - conform keys as well as values (default false)\n\n  See also - every-kv","row":307},{"fixed-arities":[1],"end-row":325,"ns":"cljs.spec.alpha","name":"*","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches zero or more values matching\n  pred. Produces a vector of matches iff there is at least one match","row":321},{"fixed-arities":[1],"end-row":331,"ns":"cljs.spec.alpha","name":"+","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches one or more values matching\n  pred. Produces a vector of matches","row":327},{"fixed-arities":[1],"end-row":337,"ns":"cljs.spec.alpha","name":"?","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred-form]"],"doc":"Returns a regex op that matches zero or one value matching\n  pred. Produces a single value (not a collection) if matched.","row":333},{"end-row":354,"ns":"cljs.spec.alpha","name":"alt","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/alt :even even? :small #(< % 42))\n\n  Returns a regex op that returns a map entry containing the key of the\n  first matching pred and the corresponding value. Thus the\n  'key' and 'val' functions can be used to refer generically to the\n  components of the tagged return.","row":339},{"end-row":370,"ns":"cljs.spec.alpha","name":"cat","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& key-pred-forms]"],"doc":"Takes key+pred pairs, e.g.\n\n  (s/cat :e even? :o odd?)\n\n  Returns a regex op that matches (all) values in sequence, returning a map\n  containing the keys of each pred and the corresponding value.","row":356},{"end-row":378,"ns":"cljs.spec.alpha","name":"&","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[re & preds]"],"doc":"takes a regex op re, and predicates. Returns a regex-op that consumes\n  input as per re but subjects the resulting value to the\n  conjunction of the predicates, and any conforming they might perform.","row":372},{"fixed-arities":[1,2],"end-row":386,"ns":"cljs.spec.alpha","name":"conformer","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[f]","[f unf]"],"doc":"takes a predicate function with the semantics of conform i.e. it should return either a\n  (possibly converted) value or :cljs.spec.alpha/invalid, and returns a\n  spec that uses it as a predicate/conformer. Optionally takes a\n  second fn that does unform of result of first","row":380},{"end-row":406,"ns":"cljs.spec.alpha","name":"fspec","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [args ret fn gen] :or {ret `cljs.core/any?}}]"],"doc":"takes :args :ret and (optional) :fn kwargs whose values are preds\n  and returns a spec whose conform/explain take a fn and validates it\n  using generative testing. The conformed value is always the fn itself.\n\n  See 'fdef' for a single operation that creates an fspec and\n  registers it, as well as a full description of :args, :ret and :fn\n\n  fspecs can generate functions that validate the arguments and\n  fabricate a return value compliant with the :ret spec, ignoring\n  the :fn spec if present.\n\n  Optionally takes :gen generator-fn, which must be a fn of no args\n  that returns a test.check generator.","row":388},{"end-row":414,"ns":"cljs.spec.alpha","name":"tuple","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& preds]"],"doc":"takes one or more preds and returns a spec for a tuple, a vector\n  where each element conforms to the corresponding pred. Each element\n  will be referred to in paths using its ordinal.","row":408},{"end-row":449,"ns":"cljs.spec.alpha","name":"fdef","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[fn-sym & specs]"],"doc":"Takes a symbol naming a function, and one or more of the following:\n\n  :args A regex spec for the function arguments as they were a list to be\n    passed to apply - in this way, a single spec can handle functions with\n    multiple arities\n  :ret A spec for the function's return value\n  :fn A spec of the relationship between args and ret - the\n    value passed is {:args conformed-args :ret conformed-ret} and is\n    expected to contain predicates that relate those values\n\n  Qualifies fn-sym with resolve, or using *ns* if no resolution found.\n  Registers an fspec in the global registry, where it can be retrieved\n  by calling get-spec with the var or fully-qualified symbol.\n\n  Once registered, function specs are included in doc, checked by\n  instrument, tested by the runner cljs.spec.test.alpha/check, and (if\n  a macro) used to explain errors during macroexpansion.\n\n  Note that :fn specs require the presence of :args and :ret specs to\n  conform values, and so :fn specs will be ignored if :args or :ret\n  are missing.\n\n  Returns the qualified fn-sym.\n\n  For example, to register function specs for the symbol function:\n\n  (s/fdef cljs.core/symbol\n    :args (s/alt :separate (s/cat :ns string? :n string?)\n                 :str string?\n                 :sym symbol?)\n    :ret symbol?)","row":416},{"end-row":468,"ns":"cljs.spec.alpha","name":"keys*","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& kspecs]"],"doc":"takes the same arguments as spec/keys and returns a regex op that matches sequences of key/values,\n  converts them into a map, and conforms that map with a corresponding\n  spec/keys call:\n\n  user=> (s/conform (s/keys :req-un [::a ::c]) {:a 1 :c 2})\n  {:a 1, :c 2}\n  user=> (s/conform (s/keys* :req-un [::a ::c]) [:a 1 :c 2])\n  {:a 1, :c 2}\n\n  the resulting regex op can be composed into a larger regex:\n\n  user=> (s/conform (s/cat :i1 integer? :m (s/keys* :req-un [::a ::c]) :i2 integer?) [42 :a 1 :c 2 :d 4 99])\n  {:i1 42, :m {:a 1, :c 2, :d 4}, :i2 99}","row":451},{"fixed-arities":[1],"end-row":474,"ns":"cljs.spec.alpha","name":"nilable","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[pred]"],"doc":"returns a spec that accepts nil and values satisfiying pred","row":470},{"fixed-arities":[2],"end-row":486,"ns":"cljs.spec.alpha","name":"inst-in","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[start end]"],"doc":"Returns a spec that validates insts in the range from start\n  (inclusive) to end (exclusive).","row":476},{"fixed-arities":[2],"end-row":493,"ns":"cljs.spec.alpha","name":"int-in","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[start end]"],"doc":"Returns a spec that validates fixed precision integers in the\n  range from start (inclusive) to end (exclusive).","row":488},{"end-row":510,"ns":"cljs.spec.alpha","name":"double-in","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& {:keys [infinite? NaN? min max] :or {infinite? true NaN? true} :as m}]"],"doc":"Specs a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity allowed (default true)\n    :NaN?      - whether NaN allowed (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)","row":495},{"end-row":519,"ns":"cljs.spec.alpha","name":"merge","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[& pred-forms]"],"doc":"Takes map-validating specs (e.g. 'keys' specs) and\n  returns a spec that returns a conformed map satisfying all of the\n  specs.  Successive conformed values propagate through rest of\n  predicates. Unlike 'and', merge can generate maps satisfying the\n  union of the predicates.","row":512},{"fixed-arities":[1,3,2],"end-row":542,"ns":"cljs.spec.alpha","name":"exercise-fn","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[sym]","[sym n]","[sym n fspec]"],"doc":"exercises the fn named by sym (a symbol) by applying it to\n  n (default 10) generated samples of its args spec. When fspec is\n  supplied its arg spec is used, and sym-or-f can be a fn.  Returns a\n  sequence of tuples of [args ret]. ","row":521},{"fixed-arities":[0],"end-row":546,"private":true,"ns":"cljs.spec.alpha","name":"init-compile-asserts","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[]"],"row":544},{"fixed-arities":[2],"end-row":564,"ns":"cljs.spec.alpha","name":"assert","lang":"cljs","filename":"cljs/spec/alpha.cljc","macro":true,"arglist-strs":["[spec x]"],"doc":"spec-checking assert expression. Returns x if x is valid? according\nto spec, else throws an error with explain-data plus ::failure of\n:assertion-failed.\nCan be disabled at either compile time or runtime:\nIf *compile-asserts* is false at compile time, compiles to x. Defaults\nto the negation value of the ':elide-asserts' compiler option, or true if\nnot set.\nIf (check-asserts?) is false at runtime, always returns x. Defaults to\nvalue of 'cljs.spec.alpha/*runtime-asserts*', or false if not set. You can\ntoggle check-asserts? with (check-asserts bool).","row":548},{"end-row":19,"filename":"cljs/spec/alpha.cljs","name":"MAX_INT","ns":"cljs.spec.alpha","row":19},{"doc":"A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen.","end-row":25,"filename":"cljs/spec/alpha.cljs","name":"*recursion-limit*","ns":"cljs.spec.alpha","row":21},{"doc":"The number of times an anonymous fn specified by fspec will be (generatively) tested during conform","end-row":29,"filename":"cljs/spec/alpha.cljs","name":"*fspec-iterations*","ns":"cljs.spec.alpha","row":27},{"doc":"The number of items validated in a collection spec'ed with 'every'","end-row":33,"filename":"cljs/spec/alpha.cljs","name":"*coll-check-limit*","ns":"cljs.spec.alpha","row":31},{"doc":"The number of errors reported by explain in a collection spec'ed with 'every'","end-row":37,"filename":"cljs/spec/alpha.cljs","name":"*coll-error-limit*","ns":"cljs.spec.alpha","row":35},{"end-row":45,"filename":"cljs/spec/alpha.cljs","name":"Spec","ns":"cljs.spec.alpha","row":39},{"arglist-strs":["[spec x]"],"end-row":40,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"conform*","ns":"cljs.spec.alpha","row":40},{"arglist-strs":["[spec y]"],"end-row":41,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"unform*","ns":"cljs.spec.alpha","row":41},{"arglist-strs":["[spec path via in x]"],"end-row":42,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"explain*","ns":"cljs.spec.alpha","row":42},{"arglist-strs":["[spec overrides path rmap]"],"end-row":43,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4],"name":"gen*","ns":"cljs.spec.alpha","row":43},{"arglist-strs":["[spec gfn]"],"end-row":44,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"with-gen*","ns":"cljs.spec.alpha","row":44},{"arglist-strs":["[spec]"],"end-row":45,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"describe*","ns":"cljs.spec.alpha","row":45},{"end-row":47,"filename":"cljs/spec/alpha.cljs","name":"registry-ref","ns":"cljs.spec.alpha","private":true,"row":47},{"arglist-strs":["[reg k]"],"end-row":53,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"deep-resolve","ns":"cljs.spec.alpha","private":true,"row":49},{"fixed-arities":[1],"end-row":64,"private":true,"ns":"cljs.spec.alpha","name":"reg-resolve","filename":"cljs/spec/alpha.cljs","arglist-strs":["[k]"],"doc":"returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident","row":55},{"fixed-arities":[1],"end-row":72,"private":true,"ns":"cljs.spec.alpha","name":"reg-resolve!","filename":"cljs/spec/alpha.cljs","arglist-strs":["[k]"],"doc":"returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident","row":66},{"arglist-strs":["[x]"],"doc":"returns x if x is a spec object, else logical false","end-row":78,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"spec?","ns":"cljs.spec.alpha","row":74},{"arglist-strs":["[x]"],"doc":"returns x if x is a (cljs.spec.alpha) regex op, else logical false","end-row":83,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"regex?","ns":"cljs.spec.alpha","row":80},{"arglist-strs":["[spec name]"],"end-row":91,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"with-name","ns":"cljs.spec.alpha","private":true,"row":85},{"arglist-strs":["[spec]"],"end-row":100,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"spec-name","ns":"cljs.spec.alpha","private":true,"row":93},{"end-row":102,"filename":"cljs/spec/alpha.cljs","name":"spec-impl","ns":"cljs.spec.alpha","row":102},{"end-row":103,"filename":"cljs/spec/alpha.cljs","name":"regex-spec-impl","ns":"cljs.spec.alpha","row":103},{"fixed-arities":[1],"end-row":114,"private":true,"ns":"cljs.spec.alpha","name":"maybe-spec","filename":"cljs/spec/alpha.cljs","arglist-strs":["[spec-or-k]"],"doc":"spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil.","row":105},{"fixed-arities":[1],"end-row":121,"private":true,"ns":"cljs.spec.alpha","name":"the-spec","filename":"cljs/spec/alpha.cljs","arglist-strs":["[spec-or-k]"],"doc":"spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym","row":116},{"arglist-strs":["[f-n]"],"end-row":129,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"fn-sym","ns":"cljs.spec.alpha","private":true,"row":123},{"end-row":132,"filename":"cljs/spec/alpha.cljs","name":"Specize","ns":"cljs.spec.alpha","row":131},{"arglist-strs":["[_]","[_ form]"],"end-row":132,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1,2],"name":"specize*","ns":"cljs.spec.alpha","row":132},{"arglist-strs":["[s]","[s form]"],"end-row":161,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1,2],"name":"specize","ns":"cljs.spec.alpha","private":true,"row":159},{"arglist-strs":["[ret]"],"doc":"tests the validity of a conform return value","end-row":166,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"invalid?","ns":"cljs.spec.alpha","row":163},{"arglist-strs":["[spec x]"],"doc":"Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value.","end-row":172,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"conform","ns":"cljs.spec.alpha","row":168},{"arglist-strs":["[spec x]"],"doc":"Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone.","end-row":179,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"unform","ns":"cljs.spec.alpha","row":174},{"arglist-strs":["[spec]"],"doc":"returns the spec as data","end-row":185,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"form","ns":"cljs.spec.alpha","row":181},{"arglist-strs":["[form]"],"end-row":204,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"abbrev","ns":"cljs.spec.alpha","row":187},{"arglist-strs":["[spec]"],"doc":"returns an abbreviated description of the spec as data","end-row":209,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"describe","ns":"cljs.spec.alpha","row":206},{"arglist-strs":["[spec gen-fn]"],"doc":"Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator","end-row":217,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"with-gen","ns":"cljs.spec.alpha","row":211},{"arglist-strs":["[spec path via in x]"],"end-row":224,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"explain-data*","ns":"cljs.spec.alpha","row":219},{"arglist-strs":["[spec x]"],"doc":"Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path.","end-row":233,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"explain-data","ns":"cljs.spec.alpha","row":226},{"arglist-strs":["[ed]"],"doc":"Default printer for explain-data. nil indicates a successful validation.","end-row":260,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"explain-printer","ns":"cljs.spec.alpha","row":235},{"end-row":262,"filename":"cljs/spec/alpha.cljs","name":"*explain-out*","ns":"cljs.spec.alpha","row":262},{"arglist-strs":["[ed]"],"doc":"Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer.","end-row":268,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"explain-out","ns":"cljs.spec.alpha","row":264},{"arglist-strs":["[spec x]"],"doc":"Given a spec and a value that fails to conform, prints an explanation to *out*.","end-row":273,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"explain","ns":"cljs.spec.alpha","row":270},{"arglist-strs":["[spec x]"],"doc":"Given a spec and a value that fails to conform, returns an explanation as a string.","end-row":278,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"explain-str","ns":"cljs.spec.alpha","row":275},{"end-row":280,"filename":"cljs/spec/alpha.cljs","name":"valid?","ns":"cljs.spec.alpha","row":280},{"arglist-strs":["[spec overrides path rmap form]"],"end-row":291,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"gensub","ns":"cljs.spec.alpha","private":true,"row":282},{"arglist-strs":["[spec]","[spec overrides]"],"doc":"Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","end-row":304,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1,2],"name":"gen","ns":"cljs.spec.alpha","row":293},{"arglist-strs":["[k form spec]"],"doc":"Do not call this directly, use 'def'","end-row":316,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"def-impl","ns":"cljs.spec.alpha","row":306},{"arglist-strs":["[]"],"doc":"returns the registry map, prefer 'get-spec' to lookup a spec by name","end-row":321,"filename":"cljs/spec/alpha.cljs","fixed-arities":[0],"name":"registry","ns":"cljs.spec.alpha","row":318},{"fixed-arities":[1],"end-row":328,"private":true,"ns":"cljs.spec.alpha","name":"->sym","filename":"cljs/spec/alpha.cljs","arglist-strs":["[x]"],"doc":"Returns a symbol from a symbol or var","row":323},{"arglist-strs":["[k]"],"doc":"Returns spec registered for keyword/symbol/var k, or nil.","end-row":333,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"get-spec","ns":"cljs.spec.alpha","row":330},{"end-row":335,"filename":"cljs/spec/alpha.cljs","name":"map-spec","ns":"cljs.spec.alpha","row":335},{"arglist-strs":["[v args]"],"end-row":348,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"macroexpand-check","ns":"cljs.spec.alpha","private":true,"row":337},{"arglist-strs":["[rmap id path k]"],"end-row":353,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4],"name":"recur-limit?","ns":"cljs.spec.alpha","private":true,"row":351},{"arglist-strs":["[m k]"],"end-row":356,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"inck","ns":"cljs.spec.alpha","private":true,"row":355},{"arglist-strs":["[pred x form]","[pred x form cpred?]"],"end-row":369,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4,3],"name":"dt","ns":"cljs.spec.alpha","private":true,"row":358},{"arglist-strs":["[spec x]","[spec x form]"],"doc":"Helper function that returns true when x is valid for spec.","end-row":378,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3,2],"name":"valid?","ns":"cljs.spec.alpha","row":371},{"fixed-arities":[3,2],"end-row":385,"private":true,"ns":"cljs.spec.alpha","name":"pvalid?","filename":"cljs/spec/alpha.cljs","arglist-strs":["[pred x]","[pred x form]"],"doc":"internal helper function that returns true when x is valid for spec.","row":380},{"arglist-strs":["[form pred path via in v]"],"end-row":392,"filename":"cljs/spec/alpha.cljs","fixed-arities":[6],"name":"explain-1","ns":"cljs.spec.alpha","private":true,"row":387},{"end-row":395,"filename":"cljs/spec/alpha.cljs","name":"or-k-gen","ns":"cljs.spec.alpha","row":394},{"end-row":395,"filename":"cljs/spec/alpha.cljs","name":"and-k-gen","ns":"cljs.spec.alpha","row":394},{"fixed-arities":[1],"end-row":404,"private":true,"ns":"cljs.spec.alpha","name":"k-gen","filename":"cljs/spec/alpha.cljs","arglist-strs":["[f]"],"doc":"returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and.","row":397},{"fixed-arities":[1,2],"end-row":415,"private":true,"ns":"cljs.spec.alpha","name":"or-k-gen","filename":"cljs/spec/alpha.cljs","arglist-strs":["[s]","[min-count s]"],"doc":"returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s.","row":406},{"fixed-arities":[1],"end-row":421,"private":true,"ns":"cljs.spec.alpha","name":"and-k-gen","filename":"cljs/spec/alpha.cljs","arglist-strs":["[s]"],"doc":"returns a tuple generator made up of generators for every element\n  in s.","row":417},{"arglist-strs":["[{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn] :as argm}]"],"doc":"Do not call this directly, use 'spec' with a map argument","end-row":509,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"map-spec-impl","ns":"cljs.spec.alpha","row":423},{"arglist-strs":["[form pred gfn cpred?]","[form pred gfn cpred? unc]"],"doc":"Do not call this directly, use 'spec'","end-row":542,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4,5],"name":"spec-impl","ns":"cljs.spec.alpha","row":511},{"arglist-strs":["[form mmvar retag]","[form mmvar retag gfn]"],"doc":"Do not call this directly, use 'multi-spec'","end-row":592,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4,3],"name":"multi-spec-impl","ns":"cljs.spec.alpha","row":544},{"arglist-strs":["[forms preds]","[forms preds gfn]"],"doc":"Do not call this directly, use 'tuple'","end-row":654,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3,2],"name":"tuple-impl","ns":"cljs.spec.alpha","row":594},{"arglist-strs":["[tag ret]"],"end-row":657,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"tagged-ret","ns":"cljs.spec.alpha","private":true,"row":656},{"arglist-strs":["[keys forms preds gfn]"],"doc":"Do not call this directly, use 'or'","end-row":724,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4],"name":"or-spec-impl","ns":"cljs.spec.alpha","row":659},{"arglist-strs":["[x preds forms]"],"end-row":736,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"and-preds","ns":"cljs.spec.alpha","private":true,"row":726},{"arglist-strs":["[forms preds path via in x]"],"end-row":747,"filename":"cljs/spec/alpha.cljs","fixed-arities":[6],"name":"explain-pred-list","ns":"cljs.spec.alpha","private":true,"row":738},{"arglist-strs":["[forms preds gfn]"],"doc":"Do not call this directly, use 'and'","end-row":791,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"and-spec-impl","ns":"cljs.spec.alpha","row":749},{"arglist-strs":["[x kfn kform distinct count min-count max-count path via in]"],"end-row":811,"filename":"cljs/spec/alpha.cljs","fixed-arities":[10],"name":"coll-prob","ns":"cljs.spec.alpha","private":true,"row":793},{"arglist-strs":["[forms preds gfn]"],"doc":"Do not call this directly, use 'merge'","end-row":839,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"merge-spec-impl","ns":"cljs.spec.alpha","row":813},{"end-row":841,"filename":"cljs/spec/alpha.cljs","name":"empty-coll","ns":"cljs.spec.alpha","private":true,"row":841},{"arglist-strs":["[form pred opts]","[form pred {conform-into :into describe-form ::describe :keys [kind ::kind-form count max-count min-count distinct gen-max ::kfn ::cpred conform-keys ::conform-all] :or {gen-max 20} :as opts} gfn]"],"doc":"Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'","end-row":969,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4,3],"name":"every-impl","ns":"cljs.spec.alpha","row":843},{"arglist-strs":["[x]"],"end-row":977,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"accept","ns":"cljs.spec.alpha","private":true,"row":977},{"arglist-strs":["[{:keys [::op]}]"],"end-row":980,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"accept?","ns":"cljs.spec.alpha","private":true,"row":979},{"arglist-strs":["[{[p1 & pr :as ps] :ps [k1 & kr :as ks] :ks [f1 & fr :as forms] :forms ret :ret rep+ :rep+}]"],"end-row":990,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"pcat*","ns":"cljs.spec.alpha","private":true,"row":982},{"arglist-strs":["[& ps]"],"end-row":992,"filename":"cljs/spec/alpha.cljs","name":"pcat","ns":"cljs.spec.alpha","private":true,"row":992},{"arglist-strs":["[ks ps forms]"],"doc":"Do not call this directly, use 'cat'","end-row":997,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"cat-impl","ns":"cljs.spec.alpha","row":994},{"arglist-strs":["[p1 p2 ret splice form]"],"end-row":1004,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"rep*","ns":"cljs.spec.alpha","private":true,"row":999},{"arglist-strs":["[form p]"],"doc":"Do not call this directly, use '*'","end-row":1008,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"rep-impl","ns":"cljs.spec.alpha","row":1006},{"arglist-strs":["[form p]"],"doc":"Do not call this directly, use '+'","end-row":1013,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"rep+impl","ns":"cljs.spec.alpha","row":1010},{"arglist-strs":["[re re-form preds pred-forms]"],"doc":"Do not call this directly, use '&'","end-row":1018,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4],"name":"amp-impl","ns":"cljs.spec.alpha","row":1015},{"arglist-strs":["[ps ks forms f]"],"end-row":1027,"filename":"cljs/spec/alpha.cljs","fixed-arities":[4],"name":"filter-alt","ns":"cljs.spec.alpha","private":true,"row":1020},{"arglist-strs":["[ps ks forms]"],"end-row":1039,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"alt*","ns":"cljs.spec.alpha","private":true,"row":1029},{"arglist-strs":["[& ps]"],"end-row":1041,"filename":"cljs/spec/alpha.cljs","name":"alts","ns":"cljs.spec.alpha","private":true,"row":1041},{"arglist-strs":["[p1 p2]"],"end-row":1042,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"alt2","ns":"cljs.spec.alpha","private":true,"row":1042},{"arglist-strs":["[ks ps forms]"],"doc":"Do not call this directly, use 'alt'","end-row":1046,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"alt-impl","ns":"cljs.spec.alpha","row":1044},{"arglist-strs":["[p form]"],"doc":"Do not call this directly, use '?'","end-row":1050,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"maybe-impl","ns":"cljs.spec.alpha","row":1048},{"arglist-strs":["[p1 pret]"],"end-row":1056,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"noret?","ns":"cljs.spec.alpha","private":true,"row":1052},{"end-row":1058,"filename":"cljs/spec/alpha.cljs","name":"preturn","ns":"cljs.spec.alpha","row":1058},{"arglist-strs":["[p]"],"end-row":1070,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"accept-nil?","ns":"cljs.spec.alpha","private":true,"row":1060},{"end-row":1072,"filename":"cljs/spec/alpha.cljs","name":"add-ret","ns":"cljs.spec.alpha","row":1072},{"arglist-strs":["[p]"],"end-row":1087,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"preturn","ns":"cljs.spec.alpha","private":true,"row":1074},{"arglist-strs":["[p x]"],"end-row":1108,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"op-unform","ns":"cljs.spec.alpha","private":true,"row":1089},{"arglist-strs":["[p r k]"],"end-row":1121,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"add-ret","ns":"cljs.spec.alpha","private":true,"row":1110},{"arglist-strs":["[p x]"],"end-row":1141,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"deriv","ns":"cljs.spec.alpha","private":true,"row":1123},{"arglist-strs":["[p]"],"end-row":1157,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"op-describe","ns":"cljs.spec.alpha","private":true,"row":1143},{"arglist-strs":["[form p path via in input]"],"end-row":1212,"filename":"cljs/spec/alpha.cljs","fixed-arities":[6],"name":"op-explain","ns":"cljs.spec.alpha","private":true,"row":1159},{"arglist-strs":["[p overrides path rmap f]"],"end-row":1253,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"re-gen","ns":"cljs.spec.alpha","private":true,"row":1214},{"arglist-strs":["[p [x & xs :as data]]"],"end-row":1266,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"re-conform","ns":"cljs.spec.alpha","private":true,"row":1255},{"arglist-strs":["[path via in re input]"],"end-row":1292,"filename":"cljs/spec/alpha.cljs","fixed-arities":[5],"name":"re-explain","ns":"cljs.spec.alpha","private":true,"row":1268},{"arglist-strs":["[re gfn]"],"doc":"Do not call this directly, use 'spec' with a regex op argument","end-row":1317,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"regex-spec-impl","ns":"cljs.spec.alpha","row":1294},{"arglist-strs":["[f specs args]"],"end-row":1330,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"call-valid?","ns":"cljs.spec.alpha","private":true,"row":1321},{"fixed-arities":[3],"end-row":1340,"private":true,"ns":"cljs.spec.alpha","name":"validate-fn","filename":"cljs/spec/alpha.cljs","arglist-strs":["[f specs iters]"],"doc":"returns f if valid, else smallest","row":1332},{"arglist-strs":["[argspec aform retspec rform fnspec fform gfn]"],"doc":"Do not call this directly, use 'fspec'","end-row":1384,"filename":"cljs/spec/alpha.cljs","fixed-arities":[7],"name":"fspec-impl","ns":"cljs.spec.alpha","row":1342},{"arglist-strs":["[spec]"],"doc":"takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops.","end-row":1408,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"nonconforming","ns":"cljs.spec.alpha","row":1389},{"arglist-strs":["[form pred gfn]"],"doc":"Do not call this directly, use 'nilable'","end-row":1434,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"nilable-impl","ns":"cljs.spec.alpha","row":1410},{"arglist-strs":["[spec]","[spec n]","[spec n overrides]"],"doc":"generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","end-row":1443,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1,3,2],"name":"exercise","ns":"cljs.spec.alpha","row":1436},{"arglist-strs":["[start end inst]"],"doc":"Return true if inst at or after start and before end","end-row":1450,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"inst-in-range?","ns":"cljs.spec.alpha","row":1445},{"arglist-strs":["[start end val]"],"doc":"Return true if start <= val, val < end and val is a fixed\n  precision integer.","end-row":1467,"filename":"cljs/spec/alpha.cljs","fixed-arities":[3],"name":"int-in-range?","ns":"cljs.spec.alpha","row":1452},{"doc":"If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true.","end-row":1478,"filename":"cljs/spec/alpha.cljs","name":"*compile-asserts*","ns":"cljs.spec.alpha","row":1470},{"end-row":1483,"filename":"cljs/spec/alpha.cljs","name":"*runtime-asserts*","ns":"cljs.spec.alpha","private":true,"row":1480},{"arglist-strs":["[]"],"doc":"Returns the value set by check-asserts.","end-row":1488,"filename":"cljs/spec/alpha.cljs","fixed-arities":[0],"name":"check-asserts?","ns":"cljs.spec.alpha","row":1485},{"arglist-strs":["[flag]"],"doc":"Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false.","end-row":1496,"filename":"cljs/spec/alpha.cljs","fixed-arities":[1],"name":"check-asserts","ns":"cljs.spec.alpha","row":1490},{"arglist-strs":["[spec x]"],"doc":"Do not call this directly, use 'assert'.","end-row":1506,"filename":"cljs/spec/alpha.cljs","fixed-arities":[2],"name":"assert*","ns":"cljs.spec.alpha","row":1498}]