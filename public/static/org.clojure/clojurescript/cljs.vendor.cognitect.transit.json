[{"end-row":27,"meta":{},"name-end-col":32,"name-end-row":26,"name-row":26,"ns":"cljs.vendor.cognitect.transit","name":"HandlerMapProvider","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L26","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":14,"end-col":24,"row":26},{"fixed-arities":[1],"end-row":27,"meta":{},"name-end-col":15,"protocol-ns":"cljs.vendor.cognitect.transit","name-end-row":27,"name-row":27,"ns":"cljs.vendor.cognitect.transit","name":"handler-map","defined-by":"clojure.core/defprotocol","protocol-name":"HandlerMapProvider","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L27","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":4,"end-col":23,"arglist-strs":["[this]"],"row":27},{"end-row":31,"meta":{},"name-end-col":29,"name-end-row":29,"name-row":29,"ns":"cljs.vendor.cognitect.transit","name":"HandlerMapContainer","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L29","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":26,"row":29},{"fixed-arities":[1],"end-row":31,"meta":{},"name-end-col":29,"name-end-row":29,"name-row":29,"ns":"cljs.vendor.cognitect.transit","name":"->HandlerMapContainer","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L29","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":26,"arglist-strs":["[m]"],"row":29},{"fixed-arities":[1],"end-row":44,"meta":{},"name-end-col":22,"name-end-row":37,"private":true,"name-row":37,"ns":"cljs.vendor.cognitect.transit","name":"transit-format","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L37","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[kw]"],"doc":"Converts a keyword to a TransitFactory$Format value.","row":37},{"fixed-arities":[2],"end-row":48,"meta":{},"name-end-col":19,"name-end-row":46,"name-row":46,"ns":"cljs.vendor.cognitect.transit","name":"tagged-value","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L46","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[tag rep]"],"doc":"Creates a TaggedValue object.","row":46},{"fixed-arities":[1],"end-row":56,"meta":{},"name-end-col":16,"name-end-row":50,"name-row":50,"ns":"cljs.vendor.cognitect.transit","name":"nsed-name","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L50","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[kw-or-sym]"],"doc":"Convert a keyword or symbol to a string in\n   namespace/name format.","row":50},{"fixed-arities":[1],"end-row":60,"meta":{},"name-end-col":17,"name-end-row":58,"private":true,"name-row":58,"ns":"cljs.vendor.cognitect.transit","name":"fn-or-val","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L58","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[f]"],"row":58},{"fixed-arities":[4,3,2],"end-row":82,"meta":{},"name-end-col":20,"name-end-row":62,"name-row":62,"ns":"cljs.vendor.cognitect.transit","name":"write-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L62","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":84,"arglist-strs":["[tag-fn rep-fn]","[tag-fn rep-fn str-rep-fn]","[tag-fn rep-fn str-rep-fn verbose-handler-fn]"],"doc":"Creates a transit WriteHandler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\n\n   If a non-fn is passed as an argument, implemented\n   handler method returns the value unaltered.","row":62},{"end-row":84,"meta":{},"name-end-col":18,"name-end-row":84,"name-row":84,"ns":"cljs.vendor.cognitect.transit","name":"WithMeta","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L84","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":32,"row":84},{"fixed-arities":[2],"end-row":84,"meta":{},"name-end-col":18,"name-end-row":84,"name-row":84,"ns":"cljs.vendor.cognitect.transit","name":"->WithMeta","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L84","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":32,"arglist-strs":["[value meta]"],"row":84},{"end-row":135,"meta":{},"name-end-col":28,"name-end-row":86,"name-row":86,"ns":"cljs.vendor.cognitect.transit","name":"default-write-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L86","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":6,"end-col":36,"doc":"Returns a map of default WriteHandlers for\n   Clojure types. Java types are handled\n   by the default WriteHandlers provided by the\n   transit-java library.","row":86},{"end-row":137,"meta":{},"name-end-col":16,"name-end-row":137,"name-row":137,"ns":"cljs.vendor.cognitect.transit","name":"Writer","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L137","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":21,"row":137},{"fixed-arities":[1],"end-row":137,"meta":{},"name-end-col":16,"name-end-row":137,"name-row":137,"ns":"cljs.vendor.cognitect.transit","name":"->Writer","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L137","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":21,"arglist-strs":["[w]"],"row":137},{"fixed-arities":[3,2],"end-row":166,"meta":{},"name-end-col":13,"name-end-row":139,"name-row":139,"ns":"cljs.vendor.cognitect.transit","name":"writer","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L139","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":89,"arglist-strs":["[out type]","[out type {:keys [handlers default-handler transform]}]"],"doc":"Creates a writer over the provided destination `out` using\n   the specified format, one of: :msgpack, :json or :json-verbose.\n\n   An optional opts map may be passed. Supported options are:\n\n   :handlers - a map of types to WriteHandler instances, they are merged\n   with the default-handlers and then with the default handlers\n   provided by transit-java.\n\n   :default-handler - a default WriteHandler to use if NO handler is\n   found for a type. If no default is specified, an error will be\n   thrown for an unknown type.\n\n   :transform - a function of one argument that will transform values before\n   they are written.","row":139},{"fixed-arities":[2],"end-row":171,"meta":{},"name-end-col":12,"name-end-row":168,"name-row":168,"ns":"cljs.vendor.cognitect.transit","name":"write","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L168","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[writer o]"],"doc":"Writes a value to a transit writer.","row":168},{"fixed-arities":[1],"end-row":181,"meta":{},"name-end-col":19,"name-end-row":176,"name-row":176,"ns":"cljs.vendor.cognitect.transit","name":"read-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L176","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[from-rep]"],"doc":"Creates a transit ReadHandler whose fromRep\n   method invokes the provided fn.","row":176},{"fixed-arities":[2],"end-row":189,"meta":{},"name-end-col":23,"name-end-row":183,"name-row":183,"ns":"cljs.vendor.cognitect.transit","name":"read-map-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L183","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[from-rep map-reader]"],"doc":"Creates a Transit MapReadHandler whose fromRep\n   and mapReader methods invoke the provided fns.","row":183},{"fixed-arities":[2],"end-row":197,"meta":{},"name-end-col":25,"name-end-row":191,"name-row":191,"ns":"cljs.vendor.cognitect.transit","name":"read-array-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L191","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[from-rep array-reader]"],"doc":"Creates a Transit ArrayReadHandler whose fromRep\n   and arrayReader methods invoke the provided fns.","row":191},{"end-row":266,"meta":{},"name-end-col":27,"name-end-row":200,"name-row":200,"ns":"cljs.vendor.cognitect.transit","name":"default-read-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L200","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":6,"end-col":75,"doc":"Returns a map of default ReadHandlers for\n   Clojure types. Java types are handled\n   by the default ReadHandlers provided by the\n   transit-java library.","row":200},{"fixed-arities":[0],"end-row":276,"meta":{},"name-end-col":18,"name-end-row":268,"name-row":268,"ns":"cljs.vendor.cognitect.transit","name":"map-builder","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L268","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[]"],"doc":"Creates a MapBuilder that makes Clojure-\n   compatible maps.","row":268},{"fixed-arities":[0],"end-row":286,"meta":{},"name-end-col":19,"name-end-row":278,"name-row":278,"ns":"cljs.vendor.cognitect.transit","name":"list-builder","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L278","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[]"],"doc":"Creates an ArrayBuilder that makes Clojure-\n   compatible lists.","row":278},{"end-row":288,"meta":{},"name-end-col":16,"name-end-row":288,"name-row":288,"ns":"cljs.vendor.cognitect.transit","name":"Reader","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L288","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":21,"row":288},{"fixed-arities":[1],"end-row":288,"meta":{},"name-end-col":16,"name-end-row":288,"name-row":288,"ns":"cljs.vendor.cognitect.transit","name":"->Reader","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L288","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":10,"end-col":21,"arglist-strs":["[r]"],"row":288},{"fixed-arities":[3,2],"end-row":317,"meta":{},"name-end-col":13,"name-end-row":290,"name-row":290,"ns":"cljs.vendor.cognitect.transit","name":"reader","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L290","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":89,"arglist-strs":["[in type]","[in type {:keys [handlers default-handler]}]"],"doc":"Creates a reader over the provided source `in` using\n   the specified format, one of: :msgpack, :json or :json-verbose.\n\n   An optional opts map may be passed. Supported options are:\n\n   :handlers - a map of tags to ReadHandler instances, they are merged\n   with the Clojure default-read-handlers and then with the default ReadHandlers\n   provided by transit-java.\n\n   :default-handler - an instance of DefaultReadHandler, used to process\n   transit encoded values for which there is no other ReadHandler; if\n   :default-handler is not specified, non-readable values are returned\n   as TaggedValues.","row":290},{"fixed-arities":[1],"end-row":323,"meta":{},"name-end-col":11,"name-end-row":319,"name-row":319,"ns":"cljs.vendor.cognitect.transit","name":"read","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L319","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[reader]"],"doc":"Reads a value from a reader. Throws a RuntimeException when\n   the reader's InputStream is empty.","row":319},{"fixed-arities":[1],"end-row":332,"meta":{},"name-end-col":27,"name-end-row":325,"name-row":325,"ns":"cljs.vendor.cognitect.transit","name":"record-write-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L325","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[type]"],"doc":"Creates a WriteHandler for a record type","row":325},{"end-row":339,"meta":{},"name-end-col":28,"name-end-row":334,"name-row":334,"ns":"cljs.vendor.cognitect.transit","name":"record-write-handlers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L334","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[& types]"],"varargs-min-arity":0,"doc":"Creates a map of record types to WriteHandlers","row":334},{"fixed-arities":[1],"end-row":349,"meta":{},"name-end-col":26,"name-end-row":341,"name-row":341,"ns":"cljs.vendor.cognitect.transit","name":"record-read-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L341","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[type]"],"doc":"Creates a ReadHandler for a record type","row":341},{"end-row":356,"meta":{},"name-end-col":27,"name-end-row":351,"name-row":351,"ns":"cljs.vendor.cognitect.transit","name":"record-read-handlers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L351","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[& types]"],"varargs-min-arity":0,"doc":"Creates a map of record type tags to ReadHandlers","row":351},{"fixed-arities":[1],"end-row":367,"meta":{},"name-end-col":23,"name-end-row":358,"name-row":358,"ns":"cljs.vendor.cognitect.transit","name":"read-handler-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L358","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":83,"arglist-strs":["[custom-handlers]"],"doc":"Returns a HandlerMapContainer containing a ReadHandlerMap\n  containing all the default handlers for Clojure and Java and any\n  custom handlers that you supply, letting you store the return value\n  and pass it to multiple invocations of reader.  This can be more\n  efficient than repeatedly handing the same raw map of tags -> custom\n  handlers to reader.","row":358},{"fixed-arities":[1],"end-row":378,"meta":{},"name-end-col":24,"name-end-row":369,"name-row":369,"ns":"cljs.vendor.cognitect.transit","name":"write-handler-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L369","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":85,"arglist-strs":["[custom-handlers]"],"doc":"Returns a HandlerMapContainer containing a WriteHandlerMap\n  containing all the default handlers for Clojure and Java and any\n  custom handlers that you supply, letting you store the return value\n  and pass it to multiple invocations of writer.  This can be more\n  efficient than repeatedly handing the same raw map of types -> custom\n  handlers to writer.","row":369},{"fixed-arities":[1],"end-row":387,"meta":{},"name-end-col":17,"name-end-row":380,"name-row":380,"ns":"cljs.vendor.cognitect.transit","name":"write-meta","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L380","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":1,"name-col":7,"end-col":8,"arglist-strs":["[x]"],"doc":"For :transform. Will write any metadata present on the value.","row":380},{"end-row":395,"meta":{},"name-end-col":11,"name-end-row":395,"name-row":395,"ns":"cljs.vendor.cognitect.transit","name":"out","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L395","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":42,"row":395},{"end-row":397,"meta":{},"name-end-col":9,"name-end-row":397,"name-row":397,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L397","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":29,"row":397},{"end-row":398,"meta":{},"name-end-col":9,"name-end-row":398,"name-row":398,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L398","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":37,"row":398},{"end-row":399,"meta":{},"name-end-col":9,"name-end-row":399,"name-row":399,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L399","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":32,"row":399},{"end-row":400,"meta":{},"name-end-col":9,"name-end-row":400,"name-row":400,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L400","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":56,"row":400},{"end-row":401,"meta":{},"name-end-col":9,"name-end-row":401,"name-row":401,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L401","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":53,"row":401},{"end-row":421,"meta":{},"name-end-col":10,"name-end-row":421,"name-row":421,"ns":"cljs.vendor.cognitect.transit","name":"in","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L421","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":54,"row":421},{"end-row":423,"meta":{},"name-end-col":9,"name-end-row":423,"name-row":423,"ns":"cljs.vendor.cognitect.transit","name":"r","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L423","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":28,"row":423},{"end-row":425,"meta":{},"name-end-col":9,"name-end-row":425,"name-row":425,"ns":"cljs.vendor.cognitect.transit","name":"r","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L425","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":31,"row":425},{"end-row":427,"meta":{},"name-end-col":9,"name-end-row":427,"name-row":427,"ns":"cljs.vendor.cognitect.transit","name":"x","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L427","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":19,"row":427},{"end-row":434,"meta":{},"name-end-col":19,"name-end-row":434,"name-row":434,"ns":"cljs.vendor.cognitect.transit","name":"Point","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L434","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":26,"row":434},{"fixed-arities":[2],"end-row":434,"meta":{},"name-end-col":19,"name-end-row":434,"name-row":434,"ns":"cljs.vendor.cognitect.transit","name":"->Point","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L434","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":26,"arglist-strs":["[x y]"],"row":434},{"fixed-arities":[1],"end-row":434,"meta":{},"name-end-col":19,"name-end-row":434,"name-row":434,"ns":"cljs.vendor.cognitect.transit","name":"map->Point","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L434","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":26,"arglist-strs":["[m]"],"row":434},{"end-row":436,"meta":{},"name-end-col":20,"name-end-row":436,"name-row":436,"ns":"cljs.vendor.cognitect.transit","name":"Circle","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L436","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":27,"row":436},{"fixed-arities":[2],"end-row":436,"meta":{},"name-end-col":20,"name-end-row":436,"name-row":436,"ns":"cljs.vendor.cognitect.transit","name":"->Circle","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L436","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":27,"arglist-strs":["[c r]"],"row":436},{"fixed-arities":[1],"end-row":436,"meta":{},"name-end-col":20,"name-end-row":436,"name-row":436,"ns":"cljs.vendor.cognitect.transit","name":"map->Circle","defined-by":"clojure.core/defrecord","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L436","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":14,"end-col":27,"arglist-strs":["[m]"],"row":436},{"end-row":442,"meta":{},"name-end-col":26,"name-end-row":438,"name-row":438,"ns":"cljs.vendor.cognitect.transit","name":"ext-write-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L438","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":57,"row":438},{"end-row":448,"meta":{},"name-end-col":25,"name-end-row":444,"name-row":444,"ns":"cljs.vendor.cognitect.transit","name":"ext-read-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L444","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":73,"row":444},{"end-row":451,"meta":{},"name-end-col":26,"name-end-row":450,"name-row":450,"ns":"cljs.vendor.cognitect.transit","name":"ext-write-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L450","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":42,"row":450},{"end-row":454,"meta":{},"name-end-col":25,"name-end-row":453,"name-row":453,"ns":"cljs.vendor.cognitect.transit","name":"ext-read-handlers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L453","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":41,"row":453},{"end-row":456,"meta":{},"name-end-col":11,"name-end-row":456,"name-row":456,"ns":"cljs.vendor.cognitect.transit","name":"out","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L456","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":42,"row":456},{"end-row":457,"meta":{},"name-end-col":9,"name-end-row":457,"name-row":457,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L457","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":60,"row":457},{"end-row":462,"meta":{},"name-end-col":10,"name-end-row":462,"name-row":462,"ns":"cljs.vendor.cognitect.transit","name":"in","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L462","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":54,"row":462},{"end-row":463,"meta":{},"name-end-col":9,"name-end-row":463,"name-row":463,"ns":"cljs.vendor.cognitect.transit","name":"r","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L463","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":58,"row":463},{"end-row":468,"meta":{},"name-end-col":32,"name-end-row":468,"name-row":468,"ns":"cljs.vendor.cognitect.transit","name":"custom-write-handler-map","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L468","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":72,"row":468},{"end-row":469,"meta":{},"name-end-col":31,"name-end-row":469,"name-row":469,"ns":"cljs.vendor.cognitect.transit","name":"custom-read-handler-map","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L469","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":69,"row":469},{"end-row":471,"meta":{},"name-end-col":11,"name-end-row":471,"name-row":471,"ns":"cljs.vendor.cognitect.transit","name":"out","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L471","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":42,"row":471},{"end-row":472,"meta":{},"name-end-col":9,"name-end-row":472,"name-row":472,"ns":"cljs.vendor.cognitect.transit","name":"w","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L472","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":66,"row":472},{"end-row":476,"meta":{},"name-end-col":10,"name-end-row":476,"name-row":476,"ns":"cljs.vendor.cognitect.transit","name":"in","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L476","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":54,"row":476},{"end-row":477,"meta":{},"name-end-col":9,"name-end-row":477,"name-row":477,"ns":"cljs.vendor.cognitect.transit","name":"r","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/cognitect/transit.clj#L477","filename":"/src/main/clojure/cljs/vendor/cognitect/transit.clj","col":3,"name-col":8,"end-col":64,"row":477}]