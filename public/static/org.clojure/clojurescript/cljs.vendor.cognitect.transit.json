[{"end-row":27,"filename":"cljs/vendor/cognitect/transit.clj","name":"HandlerMapProvider","ns":"cljs.vendor.cognitect.transit","row":26},{"arglist-strs":["[this]"],"end-row":27,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"handler-map","ns":"cljs.vendor.cognitect.transit","row":27},{"end-row":31,"filename":"cljs/vendor/cognitect/transit.clj","name":"HandlerMapContainer","ns":"cljs.vendor.cognitect.transit","row":29},{"arglist-strs":["[m]"],"end-row":31,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"->HandlerMapContainer","ns":"cljs.vendor.cognitect.transit","row":29},{"fixed-arities":[1],"end-row":44,"private":true,"ns":"cljs.vendor.cognitect.transit","name":"transit-format","filename":"cljs/vendor/cognitect/transit.clj","arglist-strs":["[kw]"],"doc":"Converts a keyword to a TransitFactory$Format value.","row":37},{"arglist-strs":["[tag rep]"],"doc":"Creates a TaggedValue object.","end-row":48,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"tagged-value","ns":"cljs.vendor.cognitect.transit","row":46},{"arglist-strs":["[kw-or-sym]"],"doc":"Convert a keyword or symbol to a string in\n   namespace/name format.","end-row":56,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"nsed-name","ns":"cljs.vendor.cognitect.transit","row":50},{"arglist-strs":["[f]"],"end-row":60,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"fn-or-val","ns":"cljs.vendor.cognitect.transit","private":true,"row":58},{"arglist-strs":["[tag-fn rep-fn]","[tag-fn rep-fn str-rep-fn]","[tag-fn rep-fn str-rep-fn verbose-handler-fn]"],"doc":"Creates a transit WriteHandler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\n\n   If a non-fn is passed as an argument, implemented\n   handler method returns the value unaltered.","end-row":82,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[4,3,2],"name":"write-handler","ns":"cljs.vendor.cognitect.transit","row":62},{"end-row":84,"filename":"cljs/vendor/cognitect/transit.clj","name":"WithMeta","ns":"cljs.vendor.cognitect.transit","row":84},{"arglist-strs":["[value meta]"],"end-row":84,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"->WithMeta","ns":"cljs.vendor.cognitect.transit","row":84},{"doc":"Returns a map of default WriteHandlers for\n   Clojure types. Java types are handled\n   by the default WriteHandlers provided by the\n   transit-java library.","end-row":135,"filename":"cljs/vendor/cognitect/transit.clj","name":"default-write-handlers","ns":"cljs.vendor.cognitect.transit","row":86},{"end-row":137,"filename":"cljs/vendor/cognitect/transit.clj","name":"Writer","ns":"cljs.vendor.cognitect.transit","row":137},{"arglist-strs":["[w]"],"end-row":137,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"->Writer","ns":"cljs.vendor.cognitect.transit","row":137},{"arglist-strs":["[out type]","[out type {:keys [handlers default-handler transform]}]"],"doc":"Creates a writer over the provided destination `out` using\n   the specified format, one of: :msgpack, :json or :json-verbose.\n\n   An optional opts map may be passed. Supported options are:\n\n   :handlers - a map of types to WriteHandler instances, they are merged\n   with the default-handlers and then with the default handlers\n   provided by transit-java.\n\n   :default-handler - a default WriteHandler to use if NO handler is\n   found for a type. If no default is specified, an error will be\n   thrown for an unknown type.\n\n   :transform - a function of one argument that will transform values before\n   they are written.","end-row":166,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[3,2],"name":"writer","ns":"cljs.vendor.cognitect.transit","row":139},{"arglist-strs":["[writer o]"],"doc":"Writes a value to a transit writer.","end-row":171,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"write","ns":"cljs.vendor.cognitect.transit","row":168},{"arglist-strs":["[from-rep]"],"doc":"Creates a transit ReadHandler whose fromRep\n   method invokes the provided fn.","end-row":181,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"read-handler","ns":"cljs.vendor.cognitect.transit","row":176},{"arglist-strs":["[from-rep map-reader]"],"doc":"Creates a Transit MapReadHandler whose fromRep\n   and mapReader methods invoke the provided fns.","end-row":189,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"read-map-handler","ns":"cljs.vendor.cognitect.transit","row":183},{"arglist-strs":["[from-rep array-reader]"],"doc":"Creates a Transit ArrayReadHandler whose fromRep\n   and arrayReader methods invoke the provided fns.","end-row":197,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"read-array-handler","ns":"cljs.vendor.cognitect.transit","row":191},{"doc":"Returns a map of default ReadHandlers for\n   Clojure types. Java types are handled\n   by the default ReadHandlers provided by the\n   transit-java library.","end-row":266,"filename":"cljs/vendor/cognitect/transit.clj","name":"default-read-handlers","ns":"cljs.vendor.cognitect.transit","row":200},{"arglist-strs":["[]"],"doc":"Creates a MapBuilder that makes Clojure-\n   compatible maps.","end-row":276,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[0],"name":"map-builder","ns":"cljs.vendor.cognitect.transit","row":268},{"arglist-strs":["[]"],"doc":"Creates an ArrayBuilder that makes Clojure-\n   compatible lists.","end-row":286,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[0],"name":"list-builder","ns":"cljs.vendor.cognitect.transit","row":278},{"end-row":288,"filename":"cljs/vendor/cognitect/transit.clj","name":"Reader","ns":"cljs.vendor.cognitect.transit","row":288},{"arglist-strs":["[r]"],"end-row":288,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"->Reader","ns":"cljs.vendor.cognitect.transit","row":288},{"arglist-strs":["[in type]","[in type {:keys [handlers default-handler]}]"],"doc":"Creates a reader over the provided source `in` using\n   the specified format, one of: :msgpack, :json or :json-verbose.\n\n   An optional opts map may be passed. Supported options are:\n\n   :handlers - a map of tags to ReadHandler instances, they are merged\n   with the Clojure default-read-handlers and then with the default ReadHandlers\n   provided by transit-java.\n\n   :default-handler - an instance of DefaultReadHandler, used to process\n   transit encoded values for which there is no other ReadHandler; if\n   :default-handler is not specified, non-readable values are returned\n   as TaggedValues.","end-row":317,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[3,2],"name":"reader","ns":"cljs.vendor.cognitect.transit","row":290},{"arglist-strs":["[reader]"],"doc":"Reads a value from a reader. Throws a RuntimeException when\n   the reader's InputStream is empty.","end-row":323,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"read","ns":"cljs.vendor.cognitect.transit","row":319},{"arglist-strs":["[type]"],"doc":"Creates a WriteHandler for a record type","end-row":332,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"record-write-handler","ns":"cljs.vendor.cognitect.transit","row":325},{"arglist-strs":["[& types]"],"doc":"Creates a map of record types to WriteHandlers","end-row":339,"filename":"cljs/vendor/cognitect/transit.clj","name":"record-write-handlers","ns":"cljs.vendor.cognitect.transit","row":334},{"arglist-strs":["[type]"],"doc":"Creates a ReadHandler for a record type","end-row":349,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"record-read-handler","ns":"cljs.vendor.cognitect.transit","row":341},{"arglist-strs":["[& types]"],"doc":"Creates a map of record type tags to ReadHandlers","end-row":356,"filename":"cljs/vendor/cognitect/transit.clj","name":"record-read-handlers","ns":"cljs.vendor.cognitect.transit","row":351},{"arglist-strs":["[custom-handlers]"],"doc":"Returns a HandlerMapContainer containing a ReadHandlerMap\n  containing all the default handlers for Clojure and Java and any\n  custom handlers that you supply, letting you store the return value\n  and pass it to multiple invocations of reader.  This can be more\n  efficient than repeatedly handing the same raw map of tags -> custom\n  handlers to reader.","end-row":367,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"read-handler-map","ns":"cljs.vendor.cognitect.transit","row":358},{"arglist-strs":["[custom-handlers]"],"doc":"Returns a HandlerMapContainer containing a WriteHandlerMap\n  containing all the default handlers for Clojure and Java and any\n  custom handlers that you supply, letting you store the return value\n  and pass it to multiple invocations of writer.  This can be more\n  efficient than repeatedly handing the same raw map of types -> custom\n  handlers to writer.","end-row":378,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"write-handler-map","ns":"cljs.vendor.cognitect.transit","row":369},{"arglist-strs":["[x]"],"doc":"For :transform. Will write any metadata present on the value.","end-row":387,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"write-meta","ns":"cljs.vendor.cognitect.transit","row":380},{"end-row":395,"filename":"cljs/vendor/cognitect/transit.clj","name":"out","ns":"cljs.vendor.cognitect.transit","row":395},{"end-row":397,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":397},{"end-row":398,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":398},{"end-row":399,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":399},{"end-row":400,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":400},{"end-row":401,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":401},{"end-row":421,"filename":"cljs/vendor/cognitect/transit.clj","name":"in","ns":"cljs.vendor.cognitect.transit","row":421},{"end-row":423,"filename":"cljs/vendor/cognitect/transit.clj","name":"r","ns":"cljs.vendor.cognitect.transit","row":423},{"end-row":425,"filename":"cljs/vendor/cognitect/transit.clj","name":"r","ns":"cljs.vendor.cognitect.transit","row":425},{"end-row":427,"filename":"cljs/vendor/cognitect/transit.clj","name":"x","ns":"cljs.vendor.cognitect.transit","row":427},{"end-row":434,"filename":"cljs/vendor/cognitect/transit.clj","name":"Point","ns":"cljs.vendor.cognitect.transit","row":434},{"arglist-strs":["[x y]"],"end-row":434,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"->Point","ns":"cljs.vendor.cognitect.transit","row":434},{"arglist-strs":["[m]"],"end-row":434,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"map->Point","ns":"cljs.vendor.cognitect.transit","row":434},{"end-row":436,"filename":"cljs/vendor/cognitect/transit.clj","name":"Circle","ns":"cljs.vendor.cognitect.transit","row":436},{"arglist-strs":["[c r]"],"end-row":436,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[2],"name":"->Circle","ns":"cljs.vendor.cognitect.transit","row":436},{"arglist-strs":["[m]"],"end-row":436,"filename":"cljs/vendor/cognitect/transit.clj","fixed-arities":[1],"name":"map->Circle","ns":"cljs.vendor.cognitect.transit","row":436},{"end-row":442,"filename":"cljs/vendor/cognitect/transit.clj","name":"ext-write-handlers","ns":"cljs.vendor.cognitect.transit","row":438},{"end-row":448,"filename":"cljs/vendor/cognitect/transit.clj","name":"ext-read-handlers","ns":"cljs.vendor.cognitect.transit","row":444},{"end-row":451,"filename":"cljs/vendor/cognitect/transit.clj","name":"ext-write-handlers","ns":"cljs.vendor.cognitect.transit","row":450},{"end-row":454,"filename":"cljs/vendor/cognitect/transit.clj","name":"ext-read-handlers","ns":"cljs.vendor.cognitect.transit","row":453},{"end-row":456,"filename":"cljs/vendor/cognitect/transit.clj","name":"out","ns":"cljs.vendor.cognitect.transit","row":456},{"end-row":457,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":457},{"end-row":462,"filename":"cljs/vendor/cognitect/transit.clj","name":"in","ns":"cljs.vendor.cognitect.transit","row":462},{"end-row":463,"filename":"cljs/vendor/cognitect/transit.clj","name":"r","ns":"cljs.vendor.cognitect.transit","row":463},{"end-row":468,"filename":"cljs/vendor/cognitect/transit.clj","name":"custom-write-handler-map","ns":"cljs.vendor.cognitect.transit","row":468},{"end-row":469,"filename":"cljs/vendor/cognitect/transit.clj","name":"custom-read-handler-map","ns":"cljs.vendor.cognitect.transit","row":469},{"end-row":471,"filename":"cljs/vendor/cognitect/transit.clj","name":"out","ns":"cljs.vendor.cognitect.transit","row":471},{"end-row":472,"filename":"cljs/vendor/cognitect/transit.clj","name":"w","ns":"cljs.vendor.cognitect.transit","row":472},{"end-row":476,"filename":"cljs/vendor/cognitect/transit.clj","name":"in","ns":"cljs.vendor.cognitect.transit","row":476},{"end-row":477,"filename":"cljs/vendor/cognitect/transit.clj","name":"r","ns":"cljs.vendor.cognitect.transit","row":477}]