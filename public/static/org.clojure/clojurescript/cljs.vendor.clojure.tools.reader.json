[{"end-row":40,"meta":{},"name-end-col":32,"name-end-row":35,"name-row":35,"ns":"cljs.vendor.clojure.tools.reader","name":"dispatch-macros","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":31,"row":34},{"fixed-arities":[1],"end-row":1017,"meta":{},"name-end-col":23,"name-end-row":1013,"name-row":1013,"ns":"cljs.vendor.clojure.tools.reader","name":"syntax-quote","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L1013","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","macro":true,"col":1,"name-col":11,"end-col":27,"arglist-strs":["[form]"],"doc":"Macro equivalent to the syntax-quote reader macro (`).","row":1013},{"fixed-arities":[4],"end-row":594,"meta":{},"name-end-col":17,"name-end-row":589,"private":true,"name-row":589,"ns":"cljs.vendor.clojure.tools.reader","name":"read-eval","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L589","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":50,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Evaluate a reader literal","row":589},{"fixed-arities":[4],"end-row":74,"meta":{},"name-end-col":21,"name-end-row":68,"private":true,"name-row":68,"ns":"cljs.vendor.clojure.tools.reader","name":"read-dispatch","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L68","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":38,"arglist-strs":["[rdr _ opts pending-forms]"],"row":68},{"fixed-arities":[1],"end-row":637,"meta":{},"name-end-col":19,"name-end-row":628,"private":true,"name-row":628,"ns":"cljs.vendor.clojure.tools.reader","name":"flatten-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L628","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":38,"arglist-strs":["[form]"],"doc":"Flatten a map into a seq of alternate keys and values","row":628},{"fixed-arities":[4],"end-row":871,"meta":{},"name-end-col":19,"name-end-row":858,"private":true,"name-row":858,"ns":"cljs.vendor.clojure.tools.reader","name":"read-tagged","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L858","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":57,"arglist-strs":["[rdr initch opts pending-forms]"],"row":858},{"fixed-arities":[1],"end-row":185,"meta":{},"name-end-col":37,"name-end-row":183,"private":true,"name-row":183,"ns":"cljs.vendor.clojure.tools.reader","name":"ending-line-col-info","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L183","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":54,"arglist-strs":["[rdr]"],"row":183},{"end-row":915,"meta":{},"name-end-col":26,"name-end-row":911,"name-row":911,"ns":"cljs.vendor.clojure.tools.reader","name":"default-data-readers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L911","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":6,"end-col":46,"doc":"Default map of data reader functions provided by Clojure.\n   May be overridden by binding *data-readers*","row":911},{"end-row":596,"meta":{},"name-end-col":36,"name-end-row":596,"private":true,"name-row":596,"ns":"cljs.vendor.clojure.tools.reader","name":"gensym-env","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L596","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":26,"end-col":41,"row":596},{"end-row":40,"meta":{},"name-end-col":16,"name-end-row":35,"name-row":35,"ns":"cljs.vendor.clojure.tools.reader","name":"macros","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":10,"end-col":31,"row":34},{"fixed-arities":[1,2],"end-row":1011,"meta":{},"name-end-col":18,"name-end-row":995,"name-row":995,"ns":"cljs.vendor.clojure.tools.reader","name":"read-string","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L995","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[s]","[opts s]"],"doc":"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   ***WARNING***\n   Note that read-string can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use cljs.vendor.clojure.tools.reader.edn/read-string\n\n   Note that the function signature of cljs.vendor.clojure.tools.reader/read-string and\n   cljs.vendor.clojure.tools.reader.edn/read-string is not the same for eof-handling","row":995},{"end-row":40,"meta":{},"name-end-col":31,"name-end-row":36,"name-row":36,"ns":"cljs.vendor.clojure.tools.reader","name":"*read-eval*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":31,"row":34},{"fixed-arities":[2],"end-row":438,"meta":{},"name-end-col":31,"name-end-row":435,"private":true,"name-row":435,"ns":"cljs.vendor.clojure.tools.reader","name":"check-reserved-features","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L435","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":65,"arglist-strs":["[rdr form]"],"row":435},{"fixed-arities":[1],"end-row":50,"meta":{},"name-end-col":26,"name-end-row":47,"private":true,"name-row":47,"ns":"cljs.vendor.clojure.tools.reader","name":"macro-terminating?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L47","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":12,"arglist-strs":["[ch]"],"row":47},{"fixed-arities":[1],"end-row":368,"meta":{},"name-end-col":23,"name-end-row":364,"private":true,"name-row":364,"ns":"cljs.vendor.clojure.tools.reader","name":"wrapping-reader","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L364","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":57,"arglist-strs":["[sym]"],"doc":"Returns a function which wraps a reader in a call to sym","row":364},{"end-row":421,"meta":{},"name-end-col":33,"name-end-row":421,"private":true,"name-row":421,"ns":"cljs.vendor.clojure.tools.reader","name":"RESERVED_FEATURES","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L421","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":49,"row":421},{"fixed-arities":[1],"end-row":564,"meta":{},"name-end-col":20,"name-end-row":555,"private":true,"name-row":555,"ns":"cljs.vendor.clojure.tools.reader","name":"register-arg","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L555","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":64,"arglist-strs":["[n]"],"doc":"Registers an argument to the arg-env","row":555},{"fixed-arities":[4],"end-row":362,"meta":{},"name-end-col":20,"name-end-row":344,"private":true,"name-row":344,"ns":"cljs.vendor.clojure.tools.reader","name":"read-keyword","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L344","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":41,"arglist-strs":["[reader initch opts pending-forms]"],"row":344},{"fixed-arities":[4],"end-row":475,"meta":{},"name-end-col":21,"name-end-row":458,"private":true,"name-row":458,"ns":"cljs.vendor.clojure.tools.reader","name":"match-feature","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L458","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":29,"arglist-strs":["[first-line rdr opts pending-forms]"],"doc":"Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil.","row":458},{"fixed-arities":[4],"end-row":587,"meta":{},"name-end-col":16,"name-end-row":568,"private":true,"name-row":568,"ns":"cljs.vendor.clojure.tools.reader","name":"read-arg","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L568","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":34,"arglist-strs":["[rdr pct opts pending-forms]"],"row":568},{"fixed-arities":[3],"end-row":427,"meta":{},"name-end-col":20,"name-end-row":423,"private":true,"name-row":423,"ns":"cljs.vendor.clojure.tools.reader","name":"has-feature?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L423","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":50,"arglist-strs":["[rdr feature opts]"],"row":423},{"fixed-arities":[4],"end-row":259,"meta":{},"name-end-col":16,"name-end-row":239,"private":true,"name-row":239,"ns":"cljs.vendor.clojure.tools.reader","name":"read-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L239","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a map, including its location if the reader is an indexing reader","row":239},{"fixed-arities":[4],"end-row":386,"meta":{},"name-end-col":17,"name-end-row":370,"private":true,"name-row":370,"ns":"cljs.vendor.clojure.tools.reader","name":"read-meta","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L370","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":53,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read metadata and return the following object with the metadata applied","row":370},{"fixed-arities":[1],"end-row":181,"meta":{},"name-end-col":39,"name-end-row":179,"private":true,"name-row":179,"ns":"cljs.vendor.clojure.tools.reader","name":"starting-line-col-info","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L179","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":72,"arglist-strs":["[rdr]"],"row":179},{"end-row":566,"meta":{},"name-end-col":21,"name-end-row":566,"name-row":566,"ns":"cljs.vendor.clojure.tools.reader","name":"read-symbol","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L566","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":10,"end-col":22,"row":566},{"fixed-arities":[4],"end-row":524,"meta":{},"name-end-col":17,"name-end-row":506,"private":true,"name-row":506,"ns":"cljs.vendor.clojure.tools.reader","name":"read-cond","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L506","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[rdr _ opts pending-forms]"],"row":506},{"end-row":526,"meta":{},"name-end-col":33,"name-end-row":526,"private":true,"name-row":526,"ns":"cljs.vendor.clojure.tools.reader","name":"arg-env","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L526","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":26,"end-col":34,"row":526},{"fixed-arities":[4],"end-row":177,"meta":{},"name-end-col":18,"name-end-row":138,"private":true,"name-row":138,"ns":"cljs.vendor.clojure.tools.reader","name":"read-char*","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L138","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[rdr backslash opts pending-forms]"],"doc":"Read in a character literal","row":138},{"fixed-arities":[1],"end-row":342,"meta":{},"name-end-col":18,"name-end-row":340,"private":true,"name-row":340,"ns":"cljs.vendor.clojure.tools.reader","name":"resolve-ns","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L340","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[sym]"],"row":340},{"fixed-arities":[4],"end-row":751,"meta":{},"name-end-col":25,"name-end-row":747,"private":true,"name-row":747,"ns":"cljs.vendor.clojure.tools.reader","name":"read-syntax-quote","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L747","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":23,"arglist-strs":["[rdr backquote opts pending-forms]"],"row":747},{"fixed-arities":[3],"end-row":433,"meta":{},"name-end-col":23,"name-end-row":430,"private":true,"name-row":430,"ns":"cljs.vendor.clojure.tools.reader","name":"check-eof-error","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L430","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":66,"arglist-strs":["[form rdr first-line]"],"row":430},{"fixed-arities":[6,5],"end-row":959,"meta":{},"name-end-col":22,"name-end-row":917,"private":true,"name-row":917,"ns":"cljs.vendor.clojure.tools.reader","name":"read*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L917","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":37,"arglist-strs":["[reader eof-error? sentinel opts pending-forms]","[reader eof-error? sentinel return-on opts pending-forms]"],"row":917},{"end-row":40,"meta":{},"name-end-col":44,"name-end-row":38,"name-row":38,"ns":"cljs.vendor.clojure.tools.reader","name":"*default-data-reader-fn*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":31,"row":34},{"fixed-arities":[4],"end-row":237,"meta":{},"name-end-col":19,"name-end-row":223,"private":true,"name-row":223,"ns":"cljs.vendor.clojure.tools.reader","name":"read-vector","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L223","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a vector, including its location if the reader is an indexing reader","row":223},{"fixed-arities":[1],"end-row":823,"meta":{},"name-end-col":23,"name-end-row":809,"private":true,"name-row":809,"ns":"cljs.vendor.clojure.tools.reader","name":"dispatch-macros","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L809","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":10,"arglist-strs":["[ch]"],"row":809},{"end-row":40,"meta":{},"name-end-col":35,"name-end-row":39,"name-row":39,"ns":"cljs.vendor.clojure.tools.reader","name":"*suppress-read*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":31,"row":34},{"fixed-arities":[2],"end-row":674,"meta":{},"name-end-col":16,"name-end-row":670,"private":true,"name-row":670,"ns":"cljs.vendor.clojure.tools.reader","name":"add-meta","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L670","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":10,"arglist-strs":["[form ret]"],"row":670},{"end-row":909,"meta":{},"name-end-col":31,"name-end-row":909,"name-row":909,"ns":"cljs.vendor.clojure.tools.reader","name":"*suppress-read*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L909","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":38,"row":909},{"end-row":900,"meta":{},"name-end-col":30,"name-end-row":895,"name-row":895,"ns":"cljs.vendor.clojure.tools.reader","name":"*data-readers*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L895","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":6,"doc":"Map from reader tag symbols to data reader Vars.\n   Reader tags without namespace qualifiers are reserved for Clojure.\n   Default reader tags are defined in cljs.vendor.clojure.tools.reader/default-data-readers\n   and may be overridden by binding this Var.","row":895},{"end-row":66,"meta":{},"name-end-col":21,"name-end-row":66,"name-row":66,"ns":"cljs.vendor.clojure.tools.reader","name":"read-tagged","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L66","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":10,"end-col":22,"row":66},{"fixed-arities":[4,5],"end-row":133,"meta":{},"name-end-col":25,"name-end-row":101,"private":true,"name-row":101,"ns":"cljs.vendor.clojure.tools.reader","name":"read-unicode-char","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L101","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":27,"arglist-strs":["[token offset length base]","[rdr initch base length exact?]"],"row":101},{"fixed-arities":[1],"end-row":626,"meta":{},"name-end-col":19,"name-end-row":614,"private":true,"name-row":614,"ns":"cljs.vendor.clojure.tools.reader","name":"expand-list","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L614","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":31,"arglist-strs":["[s]"],"doc":"Expand a list by resolving its syntax quotes and unquotes","row":614},{"end-row":188,"meta":{},"name-end-col":33,"name-end-row":188,"private":true,"name-row":188,"ns":"cljs.vendor.clojure.tools.reader","name":"READ_FINISHED","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L188","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":44,"row":188},{"end-row":190,"meta":{},"name-end-col":28,"name-end-row":190,"name-row":190,"ns":"cljs.vendor.clojure.tools.reader","name":"*read-delim*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L190","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":35,"row":190},{"fixed-arities":[0,1,3,2],"end-row":993,"meta":{"arglists":["quote",[[],["reader"],["opts","reader"],["reader","eof-error?","eof-value"]]]},"name-end-col":11,"name-end-row":961,"name-row":961,"ns":"cljs.vendor.clojure.tools.reader","name":"read","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L961","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[]","[reader]","[{eof :eof :as opts :or {eof :eofthrow}} reader]","[reader eof-error? sentinel]"],"doc":"Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is provided, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   ***WARNING***\n   Note that read can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use cljs.vendor.clojure.tools.reader.edn/read\n\n   Note that the function signature of cljs.vendor.clojure.tools.reader/read and\n   cljs.vendor.clojure.tools.reader.edn/read is not the same for eof-handling","row":961},{"end-row":40,"meta":{},"name-end-col":30,"name-end-row":40,"name-row":40,"ns":"cljs.vendor.clojure.tools.reader","name":"default-data-readers","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":10,"end-col":31,"row":34},{"fixed-arities":[4],"end-row":99,"meta":{},"name-end-col":17,"name-end-row":84,"name-row":84,"ns":"cljs.vendor.clojure.tools.reader","name":"read-regex","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L84","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[rdr ch opts pending-forms]"],"row":84},{"end-row":187,"meta":{},"name-end-col":28,"name-end-row":187,"private":true,"name-row":187,"ns":"cljs.vendor.clojure.tools.reader","name":"READ_EOF","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L187","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":39,"row":187},{"fixed-arities":[1],"end-row":745,"meta":{},"name-end-col":21,"name-end-row":694,"private":true,"name-row":694,"ns":"cljs.vendor.clojure.tools.reader","name":"syntax-quote*","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L694","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":21,"arglist-strs":["[form]"],"row":694},{"fixed-arities":[4],"end-row":302,"meta":{},"name-end-col":20,"name-end-row":293,"private":true,"name-row":293,"ns":"cljs.vendor.clojure.tools.reader","name":"read-string*","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L293","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":59,"arglist-strs":["[reader _ opts pending-forms]"],"row":293},{"end-row":605,"meta":{},"name-end-col":23,"name-end-row":605,"name-row":605,"ns":"cljs.vendor.clojure.tools.reader","name":"syntax-quote*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L605","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":10,"end-col":24,"row":605},{"end-row":40,"meta":{},"name-end-col":34,"name-end-row":37,"name-row":37,"ns":"cljs.vendor.clojure.tools.reader","name":"*data-readers*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":31,"row":34},{"fixed-arities":[4],"end-row":786,"meta":{},"name-end-col":27,"name-end-row":753,"private":true,"name-row":753,"ns":"cljs.vendor.clojure.tools.reader","name":"read-namespaced-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L753","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":38,"arglist-strs":["[rdr _ opts pending-forms]"],"row":753},{"end-row":334,"meta":{},"name-end-col":27,"name-end-row":329,"name-row":329,"ns":"cljs.vendor.clojure.tools.reader","name":"*alias-map*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L329","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":7,"doc":"Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases instead of (ns-aliases *ns*).\n\n   Defaults to nil","row":329},{"fixed-arities":[4],"end-row":504,"meta":{},"name-end-col":27,"name-end-row":477,"private":true,"name-row":477,"ns":"cljs.vendor.clojure.tools.reader","name":"read-cond-delimited","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L477","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":19,"arglist-strs":["[rdr splicing opts pending-forms]"],"row":477},{"end-row":907,"meta":{},"name-end-col":40,"name-end-row":902,"name-row":902,"ns":"cljs.vendor.clojure.tools.reader","name":"*default-data-reader-fn*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L902","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":7,"doc":"When no data reader is found for a tag and *default-data-reader-fn*\n   is non-nil, it will be called with two arguments, the tag and the value.\n   If *default-data-reader-fn* is nil (the default value), an exception\n   will be thrown for the unknown tag.","row":902},{"fixed-arities":[1],"end-row":668,"meta":{},"name-end-col":31,"name-end-row":649,"name-row":649,"ns":"cljs.vendor.clojure.tools.reader","name":"resolve-symbol","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L649","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":46,"arglist-strs":["[s]"],"doc":"Resolve a symbol s into its fully qualified namespace version","row":649},{"fixed-arities":[1],"end-row":612,"meta":{},"name-end-col":16,"name-end-row":610,"private":true,"name-row":610,"ns":"cljs.vendor.clojure.tools.reader","name":"unquote?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L610","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":48,"arglist-strs":["[form]"],"row":610},{"fixed-arities":[3],"end-row":64,"meta":{},"name-end-col":26,"name-end-row":52,"private":true,"name-row":52,"ns":"cljs.vendor.clojure.tools.reader","name":"read-token","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L52","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":52,"arglist-strs":["[rdr kind initch]"],"doc":"Read in a single logical token from the reader","row":52},{"fixed-arities":[4],"end-row":454,"meta":{},"name-end-col":21,"name-end-row":447,"private":true,"name-row":447,"ns":"cljs.vendor.clojure.tools.reader","name":"read-suppress","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L447","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":26,"arglist-strs":["[first-line rdr opts pending-forms]"],"doc":"Read next form and suppress. Return nil or READ_FINISHED.","row":447},{"fixed-arities":[1],"end-row":532,"meta":{},"name-end-col":12,"name-end-row":528,"private":true,"name-row":528,"ns":"cljs.vendor.clojure.tools.reader","name":"garg","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L528","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[n]"],"doc":"Get a symbol for an anonymous ?argument?","row":528},{"fixed-arities":[1],"end-row":45,"meta":{},"name-end-col":25,"name-end-row":42,"private":true,"name-row":42,"ns":"cljs.vendor.clojure.tools.reader","name":"ns-name*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L42","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":17,"end-col":15,"arglist-strs":["[x]"],"row":42},{"fixed-arities":[4],"end-row":404,"meta":{},"name-end-col":16,"name-end-row":388,"private":true,"name-row":388,"ns":"cljs.vendor.clojure.tools.reader","name":"read-set","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L388","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[rdr _ opts pending-forms]"],"row":388},{"end-row":136,"meta":{},"name-end-col":35,"name-end-row":136,"private":true,"name-row":136,"ns":"cljs.vendor.clojure.tools.reader","name":"lower-limit","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L136","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":24,"end-col":49,"row":136},{"end-row":456,"meta":{},"name-end-col":24,"name-end-row":456,"private":true,"name-row":456,"ns":"cljs.vendor.clojure.tools.reader","name":"NO_MATCH","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L456","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":35,"row":456},{"fixed-arities":[0,1,3,2],"end-row":1031,"meta":{},"name-end-col":18,"name-end-row":1019,"name-row":1019,"ns":"cljs.vendor.clojure.tools.reader","name":"read+string","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L1019","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[]","[stream]","[stream eof-error? eof-value]","[opts stream]"],"doc":"Like read, and taking the same args. reader must be a SourceLoggingPushbackReader.\n  Returns a vector containing the object read and the (whitespace-trimmed) string read.","row":1019},{"fixed-arities":[2],"end-row":685,"meta":{},"name-end-col":25,"name-end-row":676,"private":true,"name-row":676,"ns":"cljs.vendor.clojure.tools.reader","name":"syntax-quote-coll","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L676","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":13,"arglist-strs":["[type coll]"],"row":676},{"fixed-arities":[1],"end-row":692,"meta":{},"name-end-col":15,"name-end-row":687,"name-row":687,"ns":"cljs.vendor.clojure.tools.reader","name":"map-func","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L687","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[coll]"],"doc":"Decide which map type to use, array-map if less than 16 elements","row":687},{"fixed-arities":[4],"end-row":221,"meta":{},"name-end-col":17,"name-end-row":205,"private":true,"name-row":205,"ns":"cljs.vendor.clojure.tools.reader","name":"read-list","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L205","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":39,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a list, including its location if the reader is an indexing reader","row":205},{"fixed-arities":[1],"end-row":807,"meta":{},"name-end-col":14,"name-end-row":788,"private":true,"name-row":788,"ns":"cljs.vendor.clojure.tools.reader","name":"macros","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L788","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":10,"arglist-strs":["[ch]"],"row":788},{"fixed-arities":[2],"end-row":327,"meta":{},"name-end-col":19,"name-end-row":304,"private":true,"name-row":304,"ns":"cljs.vendor.clojure.tools.reader","name":"read-symbol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L304","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[rdr initch]"],"row":304},{"end-row":135,"meta":{},"name-end-col":35,"name-end-row":135,"private":true,"name-row":135,"ns":"cljs.vendor.clojure.tools.reader","name":"upper-limit","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L135","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":24,"end-col":49,"row":135},{"fixed-arities":[5],"end-row":203,"meta":{},"name-end-col":40,"name-end-row":191,"private":true,"name-row":191,"ns":"cljs.vendor.clojure.tools.reader","name":"read-delimited","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L191","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":26,"end-col":44,"arglist-strs":["[kind delim rdr opts pending-forms]"],"doc":"Reads and returns a collection ended with delim","row":191},{"fixed-arities":[3],"end-row":445,"meta":{},"name-end-col":31,"name-end-row":440,"private":true,"name-row":440,"ns":"cljs.vendor.clojure.tools.reader","name":"check-invalid-read-cond","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L440","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":109,"arglist-strs":["[form rdr first-line]"],"row":440},{"fixed-arities":[4],"end-row":603,"meta":{},"name-end-col":20,"name-end-row":598,"private":true,"name-row":598,"ns":"cljs.vendor.clojure.tools.reader","name":"read-unquote","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L598","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":77,"arglist-strs":["[rdr comma opts pending-forms]"],"row":598},{"fixed-arities":[2],"end-row":270,"meta":{},"name-end-col":19,"name-end-row":261,"private":true,"name-row":261,"ns":"cljs.vendor.clojure.tools.reader","name":"read-number","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L261","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":56,"arglist-strs":["[rdr initch]"],"row":261},{"end-row":893,"meta":{},"name-end-col":27,"name-end-row":877,"name-row":877,"ns":"cljs.vendor.clojure.tools.reader","name":"*read-eval*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L877","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":16,"end-col":8,"doc":"Defaults to true.\n\n   ***WARNING***\n   This setting implies that the full power of the reader is in play,\n   including syntax that can cause code to execute. It should never be\n   used with untrusted sources. See also: cljs.vendor.clojure.tools.reader.edn/read.\n\n   When set to logical false in the thread-local binding,\n   the eval reader (#=) and *record/type literal syntax* are disabled in read/load.\n   Example (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\n   When set to :unknown all reads will fail in contexts where *read-eval*\n   has not been explicitly bound to either true or false. This setting\n   can be a useful diagnostic tool to ensure that all of your reads\n   occur in considered contexts.","row":877},{"fixed-arities":[4],"end-row":78,"meta":{},"name-end-col":32,"name-end-row":76,"private":true,"name-row":76,"ns":"cljs.vendor.clojure.tools.reader","name":"read-unmatched-delimiter","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L76","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":40,"arglist-strs":["[rdr ch opts pending-forms]"],"row":76},{"fixed-arities":[4],"end-row":419,"meta":{},"name-end-col":27,"name-end-row":412,"private":true,"name-row":412,"ns":"cljs.vendor.clojure.tools.reader","name":"read-symbolic-value","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L412","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":62,"arglist-strs":["[rdr _ opts pending-forms]"],"row":412},{"fixed-arities":[1],"end-row":338,"meta":{},"name-end-col":21,"name-end-row":336,"private":true,"name-row":336,"ns":"cljs.vendor.clojure.tools.reader","name":"resolve-alias","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L336","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":32,"arglist-strs":["[sym]"],"row":336},{"fixed-arities":[1],"end-row":608,"meta":{},"name-end-col":25,"name-end-row":606,"private":true,"name-row":606,"ns":"cljs.vendor.clojure.tools.reader","name":"unquote-splicing?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L606","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":57,"arglist-strs":["[form]"],"row":606},{"fixed-arities":[4],"end-row":553,"meta":{},"name-end-col":15,"name-end-row":534,"private":true,"name-row":534,"ns":"cljs.vendor.clojure.tools.reader","name":"read-fn","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L534","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":31,"arglist-strs":["[rdr _ opts pending-forms]"],"row":534},{"fixed-arities":[1],"end-row":647,"meta":{},"name-end-col":23,"name-end-row":639,"private":true,"name-row":639,"ns":"cljs.vendor.clojure.tools.reader","name":"register-gensym","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L639","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":14,"arglist-strs":["[sym]"],"row":639},{"fixed-arities":[4],"end-row":410,"meta":{},"name-end-col":20,"name-end-row":406,"private":true,"name-row":406,"ns":"cljs.vendor.clojure.tools.reader","name":"read-discard","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L406","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read and discard the first object from rdr","row":406},{"fixed-arities":[4],"end-row":856,"meta":{},"name-end-col":17,"name-end-row":825,"private":true,"name-row":825,"ns":"cljs.vendor.clojure.tools.reader","name":"read-ctor","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L825","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":66,"arglist-strs":["[rdr class-name opts pending-forms]"],"row":825},{"fixed-arities":[2],"end-row":291,"meta":{},"name-end-col":19,"name-end-row":272,"private":true,"name-row":272,"ns":"cljs.vendor.clojure.tools.reader","name":"escape-char","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L272","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":8,"end-col":47,"arglist-strs":["[sb rdr]"],"row":272},{"end-row":40,"meta":{},"name-end-col":25,"name-end-row":34,"name-row":34,"ns":"cljs.vendor.clojure.tools.reader","name":"read*","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/clojure/cljs/vendor/clojure/tools/reader.clj#L34","lang":[],"filename":"/src/main/clojure/cljs/vendor/clojure/tools/reader.clj","col":1,"name-col":20,"end-col":31,"row":34}]