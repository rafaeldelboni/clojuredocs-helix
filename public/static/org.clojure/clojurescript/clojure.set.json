[{"fixed-arities":[2],"end-row":17,"name-end-col":22,"name-end-row":13,"private":true,"name-row":13,"ns":"clojure.set","name":"bubble-max-key","defined-by":"cljs.core/defn-","filename":"clojure/set.cljs","col":1,"name-col":8,"end-col":51,"arglist-strs":["[k coll]"],"row":13},{"fixed-arities":[0,1,2],"end-row":29,"name-end-col":12,"name-end-row":19,"name-row":19,"ns":"clojure.set","name":"union","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":65,"arglist-strs":["[]","[s1]","[s1 s2]","[s1 s2 & sets]"],"varargs-min-arity":2,"doc":"Return a set that is the union of the input sets","row":19},{"fixed-arities":[1,2],"end-row":44,"name-end-col":19,"name-end-row":31,"name-row":31,"ns":"clojure.set","name":"intersection","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":73,"arglist-strs":["[s1]","[s1 s2]","[s1 s2 & sets]"],"varargs-min-arity":2,"doc":"Return a set that is the intersection of the input sets","row":31},{"fixed-arities":[1,2],"end-row":58,"name-end-col":17,"name-end-row":46,"name-row":46,"ns":"clojure.set","name":"difference","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":45,"arglist-strs":["[s1]","[s1 s2]","[s1 s2 & sets]"],"varargs-min-arity":2,"doc":"Return a set that is the first set without elements of the remaining sets","row":46},{"fixed-arities":[2],"end-row":65,"name-end-col":13,"name-end-row":61,"name-row":61,"ns":"clojure.set","name":"select","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":24,"arglist-strs":["[pred xset]"],"doc":"Returns a set of the elements for which pred is true","row":61},{"fixed-arities":[2],"end-row":70,"name-end-col":14,"name-end-row":67,"name-row":67,"ns":"clojure.set","name":"project","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":42,"arglist-strs":["[xrel ks]"],"doc":"Returns a rel of the elements of xrel with only the keys in ks","row":67},{"fixed-arities":[2],"end-row":80,"name-end-col":18,"name-end-row":72,"name-row":72,"ns":"clojure.set","name":"rename-keys","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":43,"arglist-strs":["[map kmap]"],"doc":"Returns the map with the keys in kmap renamed to the vals in kmap","row":72},{"fixed-arities":[2],"end-row":85,"name-end-col":13,"name-end-row":82,"name-row":82,"ns":"clojure.set","name":"rename","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":44,"arglist-strs":["[xrel kmap]"],"doc":"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap","row":82},{"fixed-arities":[2],"end-row":95,"name-end-col":12,"name-end-row":87,"name-row":87,"ns":"clojure.set","name":"index","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":15,"arglist-strs":["[xrel ks]"],"doc":"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.","row":87},{"fixed-arities":[1],"end-row":103,"name-end-col":17,"name-end-row":97,"name-row":97,"ns":"clojure.set","name":"map-invert","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":11,"arglist-strs":["[m]"],"doc":"Returns the map with the vals mapped to the keys.","row":97},{"fixed-arities":[3,2],"end-row":133,"name-end-col":11,"name-end-row":105,"name-row":105,"ns":"clojure.set","name":"join","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":23,"arglist-strs":["[xrel yrel]","[xrel yrel km]"],"doc":"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","row":105},{"fixed-arities":[2],"end-row":139,"name-end-col":14,"name-end-row":135,"name-row":135,"ns":"clojure.set","name":"subset?","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":43,"arglist-strs":["[set1 set2]"],"doc":"Is set1 a subset of set2?","row":135},{"fixed-arities":[2],"end-row":145,"name-end-col":16,"name-end-row":141,"name-row":141,"ns":"clojure.set","name":"superset?","defined-by":"cljs.core/defn","filename":"clojure/set.cljs","col":1,"name-col":7,"end-col":43,"arglist-strs":["[set1 set2]"],"doc":"Is set1 a superset of set2?","row":141},{"end-row":151,"name-end-col":8,"name-end-row":149,"name-row":149,"ns":"clojure.set","name":"xs","defined-by":"cljs.core/def","filename":"clojure/set.cljs","col":1,"name-col":6,"end-col":39,"row":149},{"end-row":155,"name-end-col":8,"name-end-row":153,"name-row":153,"ns":"clojure.set","name":"ys","defined-by":"cljs.core/def","filename":"clojure/set.cljs","col":1,"name-col":6,"end-col":34,"row":153}]