[{"arglist-strs":["[k coll]"],"end-row":17,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"bubble-max-key","ns":"clojure.set","private":true,"row":13},{"arglist-strs":["[]","[s1]","[s1 s2]","[s1 s2 & sets]"],"doc":"Return a set that is the union of the input sets","end-row":29,"filename":"clojure/set.cljs","fixed-arities":[0,1,2],"name":"union","ns":"clojure.set","row":19},{"arglist-strs":["[s1]","[s1 s2]","[s1 s2 & sets]"],"doc":"Return a set that is the intersection of the input sets","end-row":44,"filename":"clojure/set.cljs","fixed-arities":[1,2],"name":"intersection","ns":"clojure.set","row":31},{"arglist-strs":["[s1]","[s1 s2]","[s1 s2 & sets]"],"doc":"Return a set that is the first set without elements of the remaining sets","end-row":58,"filename":"clojure/set.cljs","fixed-arities":[1,2],"name":"difference","ns":"clojure.set","row":46},{"arglist-strs":["[pred xset]"],"doc":"Returns a set of the elements for which pred is true","end-row":65,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"select","ns":"clojure.set","row":61},{"arglist-strs":["[xrel ks]"],"doc":"Returns a rel of the elements of xrel with only the keys in ks","end-row":70,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"project","ns":"clojure.set","row":67},{"arglist-strs":["[map kmap]"],"doc":"Returns the map with the keys in kmap renamed to the vals in kmap","end-row":80,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"rename-keys","ns":"clojure.set","row":72},{"arglist-strs":["[xrel kmap]"],"doc":"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap","end-row":85,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"rename","ns":"clojure.set","row":82},{"arglist-strs":["[xrel ks]"],"doc":"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.","end-row":95,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"index","ns":"clojure.set","row":87},{"arglist-strs":["[m]"],"doc":"Returns the map with the vals mapped to the keys.","end-row":103,"filename":"clojure/set.cljs","fixed-arities":[1],"name":"map-invert","ns":"clojure.set","row":97},{"arglist-strs":["[xrel yrel]","[xrel yrel km]"],"doc":"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","end-row":133,"filename":"clojure/set.cljs","fixed-arities":[3,2],"name":"join","ns":"clojure.set","row":105},{"arglist-strs":["[set1 set2]"],"doc":"Is set1 a subset of set2?","end-row":139,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"subset?","ns":"clojure.set","row":135},{"arglist-strs":["[set1 set2]"],"doc":"Is set1 a superset of set2?","end-row":145,"filename":"clojure/set.cljs","fixed-arities":[2],"name":"superset?","ns":"clojure.set","row":141},{"end-row":151,"filename":"clojure/set.cljs","name":"xs","ns":"clojure.set","row":149},{"end-row":155,"filename":"clojure/set.cljs","name":"ys","ns":"clojure.set","row":153}]