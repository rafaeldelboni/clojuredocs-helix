[{"fixed-arities":[0,1],"end-row":34,"meta":null,"name-end-col":18,"name-end-row":25,"name-row":25,"ns":"cljs.analyzer.api","name":"empty-state","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":37,"arglist-strs":["[]","[opts]"],"doc":"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","row":25},{"fixed-arities":[0],"end-row":39,"meta":null,"name-end-col":20,"name-end-row":36,"name-row":36,"ns":"cljs.analyzer.api","name":"current-state","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":18,"arglist-strs":["[]"],"doc":"Return the current compiler state atom.","row":36},{"fixed-arities":[0],"end-row":44,"meta":null,"name-end-col":19,"name-end-row":41,"name-row":41,"ns":"cljs.analyzer.api","name":"current-file","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":19,"arglist-strs":["[]"],"doc":"Return the current file under analysis or compilation.","row":41},{"fixed-arities":[0],"end-row":49,"meta":null,"name-end-col":17,"name-end-row":46,"name-row":46,"ns":"cljs.analyzer.api","name":"current-ns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":17,"arglist-strs":["[]"],"doc":"Return the current ns under analysis or compilation.","row":46},{"end-row":55,"meta":null,"name-end-col":21,"name-end-row":51,"name-row":51,"ns":"cljs.analyzer.api","name":"with-state","defined-by":"clojure.core/defmacro","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[state & body]"],"varargs-min-arity":1,"doc":"Run the body with the given compilation state Atom<Map>.","row":51},{"fixed-arities":[0],"end-row":60,"meta":null,"name-end-col":16,"name-end-row":57,"name-row":57,"ns":"cljs.analyzer.api","name":"empty-env","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":19,"arglist-strs":["[]"],"doc":"Creates an empty analysis environment.","row":57},{"end-row":67,"meta":null,"name-end-col":18,"name-end-row":62,"name-row":62,"ns":"cljs.analyzer.api","name":"no-warn","defined-by":"clojure.core/defmacro","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Disable analyzer warnings for any analysis executed in body.","row":62},{"fixed-arities":[1],"end-row":72,"meta":null,"name-end-col":23,"name-end-row":69,"name-row":69,"ns":"cljs.analyzer.api","name":"warning-enabled?","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":38,"arglist-strs":["[warning-type]"],"doc":"Test if the given warning-type is enabled.","row":69},{"fixed-arities":[3],"end-row":79,"meta":null,"name-end-col":30,"name-end-row":74,"name-row":74,"ns":"cljs.analyzer.api","name":"default-warning-handler","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":56,"arglist-strs":["[warning-type env extra]"],"doc":"The default warning handler.\n\n   Outputs the warning messages to *err*.","row":74},{"end-row":89,"meta":null,"name-end-col":32,"name-end-row":81,"name-row":81,"ns":"cljs.analyzer.api","name":"with-warning-handlers","defined-by":"clojure.core/defmacro","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[handlers & body]"],"varargs-min-arity":1,"doc":"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.","row":81},{"fixed-arities":[2],"end-row":95,"meta":null,"name-end-col":22,"name-end-row":91,"name-row":91,"ns":"cljs.analyzer.api","name":"warning-message","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":43,"arglist-strs":["[warn-type warn-info]"],"doc":"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.","row":91},{"fixed-arities":[0],"end-row":100,"meta":null,"name-end-col":23,"name-end-row":97,"name-row":97,"ns":"cljs.analyzer.api","name":"enabled-warnings","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":23,"arglist-strs":["[]"],"doc":"Get the enabled warning types.","row":97},{"fixed-arities":[0,1],"end-row":106,"meta":null,"name-end-col":18,"name-end-row":102,"name-row":102,"ns":"cljs.analyzer.api","name":"get-options","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":27,"arglist-strs":["[]","[state]"],"doc":"Return the compiler options from compiler state.","row":102},{"fixed-arities":[0,1],"end-row":113,"meta":null,"name-end-col":19,"name-end-row":108,"name-row":108,"ns":"cljs.analyzer.api","name":"get-js-index","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":39,"arglist-strs":["[]","[state]"],"doc":"Return the currently computed Google Closure js dependency index from the\n  compiler state.","row":108},{"end-row":117,"meta":{"doc":"ClojureScript's default analysis passes."},"name-end-col":17,"name-end-row":117,"name-row":117,"ns":"cljs.analyzer.api","name":"default-passes","defined-by":"clojure.core/def","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":3,"end-col":37,"doc":"ClojureScript's default analysis passes.","row":115},{"end-row":123,"meta":null,"name-end-col":22,"name-end-row":119,"name-row":119,"ns":"cljs.analyzer.api","name":"with-passes","defined-by":"clojure.core/defmacro","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[passes & body]"],"varargs-min-arity":1,"doc":"Evaluate the body with the provided sequence of compiler passes.","row":119},{"fixed-arities":[4,3,2,5],"end-row":141,"meta":null,"name-end-col":17,"name-end-row":126,"name-row":126,"ns":"cljs.analyzer.api","name":"analyze","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":4,"name-col":10,"end-col":47,"arglist-strs":["[env form]","[env form name]","[env form name opts]","[state env form name opts]"],"doc":"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.","row":126},{"fixed-arities":[1,2],"end-row":148,"meta":null,"name-end-col":19,"name-end-row":144,"name-row":144,"ns":"cljs.analyzer.api","name":"forms-seq","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":4,"name-col":10,"end-col":53,"arglist-strs":["[rdr]","[rdr filename]"],"doc":"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.","row":144},{"fixed-arities":[1,4,3,2],"end-row":168,"meta":null,"name-end-col":18,"name-end-row":151,"name-row":151,"ns":"cljs.analyzer.api","name":"parse-ns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":4,"name-col":10,"end-col":43,"arglist-strs":["[src]","[src opts]","[src dest opts]","[state src dest opts]"],"doc":"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n\n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.","row":151},{"fixed-arities":[1,3,2],"end-row":186,"meta":null,"name-end-col":22,"name-end-row":171,"name-row":171,"ns":"cljs.analyzer.api","name":"analyze-file","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":4,"name-col":10,"end-col":40,"arglist-strs":["[f]","[f opts]","[state f opts]"],"doc":"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n\n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \":output-dir/some/ns/foo.cljs.cache.edn\". This function does not return a\n      meaningful value.","row":171},{"fixed-arities":[1],"end-row":196,"meta":null,"name-end-col":29,"name-end-row":189,"name-row":189,"ns":"cljs.analyzer.api","name":"read-analysis-cache","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":4,"name-col":10,"end-col":69,"arglist-strs":["[cache-file]"],"doc":"Read an analysis cache.","row":189},{"fixed-arities":[2],"end-row":211,"meta":null,"name-end-col":14,"name-end-row":201,"name-row":201,"ns":"cljs.analyzer.api","name":"resolve","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":41,"arglist-strs":["[env sym]"],"doc":"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve","row":201},{"fixed-arities":[0,1],"end-row":219,"meta":null,"name-end-col":13,"name-end-row":213,"name-row":213,"ns":"cljs.analyzer.api","name":"all-ns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":42,"arglist-strs":["[]","[state]"],"doc":"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","row":213},{"fixed-arities":[1,2],"end-row":228,"meta":null,"name-end-col":14,"name-end-row":221,"name-row":221,"ns":"cljs.analyzer.api","name":"find-ns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":44,"arglist-strs":["[sym]","[state sym]"],"doc":"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","row":221},{"fixed-arities":[1,2],"end-row":239,"meta":null,"name-end-col":17,"name-end-row":230,"name-row":230,"ns":"cljs.analyzer.api","name":"ns-interns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":52,"arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","row":230},{"fixed-arities":[1,2],"end-row":252,"meta":null,"name-end-col":17,"name-end-row":241,"name-row":241,"ns":"cljs.analyzer.api","name":"ns-publics","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":21,"arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","row":241},{"fixed-arities":[3,2],"end-row":261,"meta":null,"name-end-col":17,"name-end-row":254,"name-row":254,"ns":"cljs.analyzer.api","name":"ns-resolve","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":53,"arglist-strs":["[ns sym]","[state ns sym]"],"doc":"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","row":254},{"fixed-arities":[1,2],"end-row":269,"meta":null,"name-end-col":16,"name-end-row":263,"name-row":263,"ns":"cljs.analyzer.api","name":"remove-ns","defined-by":"clojure.core/defn","lang":"clj","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":58,"arglist-strs":["[ns]","[state ns]"],"doc":"Removes the namespace named by the symbol.","row":263},{"end-row":277,"meta":null,"name-end-col":23,"name-end-row":271,"name-row":271,"ns":"cljs.analyzer.api","name":"in-cljs-user","defined-by":"clojure.core/defmacro","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[env & body]"],"varargs-min-arity":1,"doc":"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.","row":271},{"fixed-arities":[0,1],"end-row":34,"meta":null,"name-end-col":18,"name-end-row":25,"name-row":25,"ns":"cljs.analyzer.api","name":"empty-state","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":37,"arglist-strs":["[]","[opts]"],"doc":"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","row":25},{"fixed-arities":[0],"end-row":39,"meta":null,"name-end-col":20,"name-end-row":36,"name-row":36,"ns":"cljs.analyzer.api","name":"current-state","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":18,"arglist-strs":["[]"],"doc":"Return the current compiler state atom.","row":36},{"fixed-arities":[0],"end-row":44,"meta":null,"name-end-col":19,"name-end-row":41,"name-row":41,"ns":"cljs.analyzer.api","name":"current-file","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":19,"arglist-strs":["[]"],"doc":"Return the current file under analysis or compilation.","row":41},{"fixed-arities":[0],"end-row":49,"meta":null,"name-end-col":17,"name-end-row":46,"name-row":46,"ns":"cljs.analyzer.api","name":"current-ns","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":17,"arglist-strs":["[]"],"doc":"Return the current ns under analysis or compilation.","row":46},{"end-row":55,"meta":null,"name-end-col":21,"name-end-row":51,"name-row":51,"ns":"cljs.analyzer.api","name":"with-state","defined-by":"cljs.core/defmacro","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[state & body]"],"varargs-min-arity":1,"doc":"Run the body with the given compilation state Atom<Map>.","row":51},{"fixed-arities":[0],"end-row":60,"meta":null,"name-end-col":16,"name-end-row":57,"name-row":57,"ns":"cljs.analyzer.api","name":"empty-env","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":19,"arglist-strs":["[]"],"doc":"Creates an empty analysis environment.","row":57},{"end-row":67,"meta":null,"name-end-col":18,"name-end-row":62,"name-row":62,"ns":"cljs.analyzer.api","name":"no-warn","defined-by":"cljs.core/defmacro","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Disable analyzer warnings for any analysis executed in body.","row":62},{"fixed-arities":[1],"end-row":72,"meta":null,"name-end-col":23,"name-end-row":69,"name-row":69,"ns":"cljs.analyzer.api","name":"warning-enabled?","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":38,"arglist-strs":["[warning-type]"],"doc":"Test if the given warning-type is enabled.","row":69},{"fixed-arities":[3],"end-row":79,"meta":null,"name-end-col":30,"name-end-row":74,"name-row":74,"ns":"cljs.analyzer.api","name":"default-warning-handler","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":56,"arglist-strs":["[warning-type env extra]"],"doc":"The default warning handler.\n\n   Outputs the warning messages to *err*.","row":74},{"end-row":89,"meta":null,"name-end-col":32,"name-end-row":81,"name-row":81,"ns":"cljs.analyzer.api","name":"with-warning-handlers","defined-by":"cljs.core/defmacro","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[handlers & body]"],"varargs-min-arity":1,"doc":"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.","row":81},{"fixed-arities":[2],"end-row":95,"meta":null,"name-end-col":22,"name-end-row":91,"name-row":91,"ns":"cljs.analyzer.api","name":"warning-message","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":43,"arglist-strs":["[warn-type warn-info]"],"doc":"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.","row":91},{"fixed-arities":[0],"end-row":100,"meta":null,"name-end-col":23,"name-end-row":97,"name-row":97,"ns":"cljs.analyzer.api","name":"enabled-warnings","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":23,"arglist-strs":["[]"],"doc":"Get the enabled warning types.","row":97},{"fixed-arities":[0,1],"end-row":106,"meta":null,"name-end-col":18,"name-end-row":102,"name-row":102,"ns":"cljs.analyzer.api","name":"get-options","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":27,"arglist-strs":["[]","[state]"],"doc":"Return the compiler options from compiler state.","row":102},{"fixed-arities":[0,1],"end-row":113,"meta":null,"name-end-col":19,"name-end-row":108,"name-row":108,"ns":"cljs.analyzer.api","name":"get-js-index","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":39,"arglist-strs":["[]","[state]"],"doc":"Return the currently computed Google Closure js dependency index from the\n  compiler state.","row":108},{"end-row":117,"meta":{"doc":"ClojureScript's default analysis passes."},"name-end-col":17,"name-end-row":117,"name-row":117,"ns":"cljs.analyzer.api","name":"default-passes","defined-by":"cljs.core/def","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":3,"end-col":37,"doc":"ClojureScript's default analysis passes.","row":115},{"end-row":123,"meta":null,"name-end-col":22,"name-end-row":119,"name-row":119,"ns":"cljs.analyzer.api","name":"with-passes","defined-by":"cljs.core/defmacro","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[passes & body]"],"varargs-min-arity":1,"doc":"Evaluate the body with the provided sequence of compiler passes.","row":119},{"fixed-arities":[2],"end-row":211,"meta":null,"name-end-col":14,"name-end-row":201,"name-row":201,"ns":"cljs.analyzer.api","name":"resolve","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":41,"arglist-strs":["[env sym]"],"doc":"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve","row":201},{"fixed-arities":[0,1],"end-row":219,"meta":null,"name-end-col":13,"name-end-row":213,"name-row":213,"ns":"cljs.analyzer.api","name":"all-ns","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":42,"arglist-strs":["[]","[state]"],"doc":"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","row":213},{"fixed-arities":[1,2],"end-row":228,"meta":null,"name-end-col":14,"name-end-row":221,"name-row":221,"ns":"cljs.analyzer.api","name":"find-ns","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":44,"arglist-strs":["[sym]","[state sym]"],"doc":"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","row":221},{"fixed-arities":[1,2],"end-row":239,"meta":null,"name-end-col":17,"name-end-row":230,"name-row":230,"ns":"cljs.analyzer.api","name":"ns-interns","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":52,"arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","row":230},{"fixed-arities":[1,2],"end-row":252,"meta":null,"name-end-col":17,"name-end-row":241,"name-row":241,"ns":"cljs.analyzer.api","name":"ns-publics","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":21,"arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","row":241},{"fixed-arities":[3,2],"end-row":261,"meta":null,"name-end-col":17,"name-end-row":254,"name-row":254,"ns":"cljs.analyzer.api","name":"ns-resolve","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":53,"arglist-strs":["[ns sym]","[state ns sym]"],"doc":"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","row":254},{"fixed-arities":[1,2],"end-row":269,"meta":null,"name-end-col":16,"name-end-row":263,"name-row":263,"ns":"cljs.analyzer.api","name":"remove-ns","defined-by":"cljs.core/defn","lang":"cljs","filename":"cljs/analyzer/api.cljc","col":1,"name-col":7,"end-col":58,"arglist-strs":["[ns]","[state ns]"],"doc":"Removes the namespace named by the symbol.","row":263},{"end-row":277,"meta":null,"name-end-col":23,"name-end-row":271,"name-row":271,"ns":"cljs.analyzer.api","name":"in-cljs-user","defined-by":"cljs.core/defmacro","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[env & body]"],"varargs-min-arity":1,"doc":"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.","row":271}]