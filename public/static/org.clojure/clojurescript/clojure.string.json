[{"arglist-strs":["[coll]"],"end-row":16,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"seq-reverse","ns":"clojure.string","private":true,"row":14},{"end-row":19,"filename":"clojure/string.cljs","name":"re-surrogate-pair","ns":"clojure.string","private":true,"row":18},{"arglist-strs":["[s]"],"doc":"Returns s with its characters reversed.","end-row":25,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"reverse","ns":"clojure.string","row":21},{"arglist-strs":["[s re replacement]"],"end-row":34,"filename":"clojure/string.cljs","fixed-arities":[3],"name":"replace-all","ns":"clojure.string","private":true,"row":27},{"arglist-strs":["[f]"],"end-row":42,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"replace-with","ns":"clojure.string","private":true,"row":36},{"arglist-strs":["[s match replacement]"],"doc":"Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\"","end-row":74,"filename":"clojure/string.cljs","fixed-arities":[3],"name":"replace","ns":"clojure.string","row":44},{"arglist-strs":["[s match replacement]"],"doc":"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\"","end-row":98,"filename":"clojure/string.cljs","fixed-arities":[3],"name":"replace-first","ns":"clojure.string","row":76},{"arglist-strs":["[coll]","[separator coll]"],"doc":"Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.","end-row":117,"filename":"clojure/string.cljs","fixed-arities":[1,2],"name":"join","ns":"clojure.string","row":100},{"arglist-strs":["[s]"],"doc":"Converts string to all upper-case.","end-row":122,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"upper-case","ns":"clojure.string","row":119},{"arglist-strs":["[s]"],"doc":"Converts string to all lower-case.","end-row":127,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"lower-case","ns":"clojure.string","row":124},{"arglist-strs":["[s]"],"doc":"Converts first character of the string to upper-case, all other\n  characters to lower-case.","end-row":133,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"capitalize","ns":"clojure.string","row":129},{"arglist-strs":["[v]"],"end-row":149,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"pop-last-while-empty","ns":"clojure.string","private":true,"row":144},{"arglist-strs":["[limit v]"],"end-row":155,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"discard-trailing-if-needed","ns":"clojure.string","private":true,"row":151},{"arglist-strs":["[s limit]"],"end-row":165,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"split-with-empty-regex","ns":"clojure.string","private":true,"row":157},{"arglist-strs":["[s re]","[s re limit]"],"doc":"Splits string on a regular expression. Optional argument limit is\n  the maximum number of parts. Not lazy. Returns vector of the parts.\n  Trailing empty strings are not returned - pass limit of -1 to return all.","end-row":190,"filename":"clojure/string.cljs","fixed-arities":[3,2],"name":"split","ns":"clojure.string","row":167},{"arglist-strs":["[s]"],"doc":"Splits s on \\n or \\r\\n. Trailing empty lines are not returned.","end-row":195,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"split-lines","ns":"clojure.string","row":192},{"arglist-strs":["[s]"],"doc":"Removes whitespace from both ends of string.","end-row":200,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"trim","ns":"clojure.string","row":197},{"arglist-strs":["[s]"],"doc":"Removes whitespace from the left side of string.","end-row":205,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"triml","ns":"clojure.string","row":202},{"arglist-strs":["[s]"],"doc":"Removes whitespace from the right side of string.","end-row":210,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"trimr","ns":"clojure.string","row":207},{"arglist-strs":["[s]"],"doc":"Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp.","end-row":223,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"trim-newline","ns":"clojure.string","row":212},{"arglist-strs":["[s]"],"doc":"True is s is nil, empty, or contains only whitespace.","end-row":228,"filename":"clojure/string.cljs","fixed-arities":[1],"name":"blank?","ns":"clojure.string","row":225},{"arglist-strs":["[s cmap]"],"doc":"Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.","end-row":247,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"escape","ns":"clojure.string","row":230},{"arglist-strs":["[s value]","[s value from-index]"],"doc":"Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.","end-row":261,"filename":"clojure/string.cljs","fixed-arities":[3,2],"name":"index-of","ns":"clojure.string","row":249},{"arglist-strs":["[s value]","[s value from-index]"],"doc":"Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.","end-row":275,"filename":"clojure/string.cljs","fixed-arities":[3,2],"name":"last-index-of","ns":"clojure.string","row":263},{"arglist-strs":["[s substr]"],"doc":"True if s starts with substr.","end-row":280,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"starts-with?","ns":"clojure.string","row":277},{"arglist-strs":["[s substr]"],"doc":"True if s ends with substr.","end-row":285,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"ends-with?","ns":"clojure.string","row":282},{"arglist-strs":["[s substr]"],"doc":"True if s includes substr.","end-row":290,"filename":"clojure/string.cljs","fixed-arities":[2],"name":"includes?","ns":"clojure.string","row":287}]