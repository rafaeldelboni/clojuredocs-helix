[{"fixed-arities":[1],"end-row":21,"name-end-col":14,"name-end-row":20,"private":true,"name-row":20,"ns":"clojure.core.reducers","name":"fjtask","defined-by":"cljs.core/defn-","filename":"clojure/core/reducers.cljs","col":1,"name-col":8,"end-col":5,"arglist-strs":["[f]"],"row":20},{"fixed-arities":[1],"end-row":24,"name-end-col":16,"name-end-row":23,"private":true,"name-row":23,"ns":"clojure.core.reducers","name":"fjinvoke","defined-by":"cljs.core/defn-","filename":"clojure/core/reducers.cljs","col":1,"name-col":8,"end-col":7,"arglist-strs":["[f]"],"row":23},{"fixed-arities":[1],"end-row":27,"name-end-col":14,"name-end-row":26,"private":true,"name-row":26,"ns":"clojure.core.reducers","name":"fjfork","defined-by":"cljs.core/defn-","filename":"clojure/core/reducers.cljs","col":1,"name-col":8,"end-col":8,"arglist-strs":["[task]"],"row":26},{"fixed-arities":[1],"end-row":30,"name-end-col":14,"name-end-row":29,"private":true,"name-row":29,"ns":"clojure.core.reducers","name":"fjjoin","defined-by":"cljs.core/defn-","filename":"clojure/core/reducers.cljs","col":1,"name-col":8,"end-col":10,"arglist-strs":["[task]"],"row":29},{"fixed-arities":[3,2],"end-row":44,"name-end-col":13,"name-end-row":33,"name-row":33,"ns":"clojure.core.reducers","name":"reduce","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":41,"arglist-strs":["[f coll]","[f init coll]"],"doc":"Like core/reduce except:\n     When init is not provided, (f) is used.\n     Maps are reduced with reduce-kv","row":33},{"end-row":47,"name-end-col":22,"name-end-row":46,"name-row":46,"ns":"clojure.core.reducers","name":"CollFold","defined-by":"cljs.core/defprotocol","filename":"clojure/core/reducers.cljs","col":1,"name-col":14,"end-col":41,"row":46},{"fixed-arities":[4],"end-row":47,"name-end-col":13,"protocol-ns":"clojure.core.reducers","name-end-row":47,"name-row":47,"ns":"clojure.core.reducers","name":"coll-fold","defined-by":"cljs.core/defprotocol","protocol-name":"CollFold","filename":"clojure/core/reducers.cljs","col":3,"name-col":4,"end-col":40,"arglist-strs":["[coll n combinef reducef]"],"row":47},{"fixed-arities":[4,3,2],"end-row":64,"name-end-col":11,"name-end-row":49,"name-row":49,"ns":"clojure.core.reducers","name":"fold","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":43,"arglist-strs":["[reducef coll]","[combinef reducef coll]","[n combinef reducef coll]"],"doc":"Reduces a collection using a (potentially parallel) reduce-combine\n  strategy. The collection is partitioned into groups of approximately\n  n (default 512), each of which is reduced with reducef (with a seed\n  value obtained by calling (combinef) with no arguments). The results\n  of these reductions are then reduced with combinef (default\n  reducef). combinef must be associative, and, when called with no\n  arguments, (combinef) must produce its identity element. These\n  operations may be performed in parallel, but the results will\n  preserve order.\n\n  Note: Performing operations in parallel is currently not implemented.","row":49},{"fixed-arities":[2],"end-row":77,"name-end-col":14,"name-end-row":66,"name-row":66,"ns":"clojure.core.reducers","name":"reducer","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":41,"arglist-strs":["[coll xf]"],"doc":"Given a reducible collection, and a transformation function xf,\n  returns a reducible collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.","row":66},{"fixed-arities":[2],"end-row":94,"name-end-col":13,"name-end-row":79,"name-row":79,"ns":"clojure.core.reducers","name":"folder","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":54,"arglist-strs":["[coll xf]"],"doc":"Given a foldable collection, and a transformation function xf,\n  returns a foldable collection, where any supplied reducing\n  fn will be transformed by xf. xf is a function of reducing fn to\n  reducing fn.","row":79},{"end-row":211,"name-end-col":13,"name-end-row":193,"name-row":193,"ns":"clojure.core.reducers","name":"Cat","defined-by":"cljs.core/deftype","filename":"clojure/core/reducers.cljs","col":1,"name-col":10,"end-col":29,"row":193},{"fixed-arities":[3],"end-row":211,"name-end-col":13,"name-end-row":193,"name-row":193,"ns":"clojure.core.reducers","name":"->Cat","defined-by":"cljs.core/deftype","filename":"clojure/core/reducers.cljs","col":1,"name-col":10,"end-col":29,"arglist-strs":["[cnt left right]"],"row":193},{"fixed-arities":[0,1,2],"end-row":230,"name-end-col":10,"name-end-row":213,"name-row":213,"ns":"clojure.core.reducers","name":"cat","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":59,"arglist-strs":["[]","[ctor]","[left right]"],"doc":"A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.","row":213},{"fixed-arities":[2],"end-row":235,"name-end-col":14,"name-end-row":232,"name-row":232,"ns":"clojure.core.reducers","name":"append!","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":24,"arglist-strs":["[acc x]"],"doc":".adds x to acc and returns acc","row":232},{"fixed-arities":[1],"end-row":240,"name-end-col":14,"name-end-row":237,"name-row":237,"ns":"clojure.core.reducers","name":"foldcat","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":27,"arglist-strs":["[coll]"],"doc":"Equivalent to (fold cat append! coll)","row":237},{"fixed-arities":[2],"end-row":249,"name-end-col":13,"name-end-row":242,"name-row":242,"ns":"clojure.core.reducers","name":"monoid","defined-by":"cljs.core/defn","filename":"clojure/core/reducers.cljs","col":1,"name-col":7,"end-col":23,"arglist-strs":["[op ctor]"],"doc":"Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it.","row":242},{"end-row":254,"name-end-col":7,"name-end-row":254,"name-row":254,"ns":"clojure.core.reducers","name":"v","defined-by":"cljs.core/def","filename":"clojure/core/reducers.cljs","col":1,"name-col":6,"end-col":31,"row":254},{"fixed-arities":[4],"end-row":287,"name-end-col":15,"name-end-row":273,"private":true,"name-row":273,"ns":"clojure.core.reducers","name":"foldvec","defined-by":"cljs.core/defn-","filename":"clojure/core/reducers.cljs","col":1,"name-col":8,"end-col":42,"arglist-strs":["[v n combinef reducef]"],"row":273}]