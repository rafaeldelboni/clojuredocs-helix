[{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"read*","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"macros","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"dispatch-macros","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*read-eval*","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*data-readers*","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*default-data-reader-fn*","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*suppress-read*","ns":"cljs.vendor.clojure.tools.reader","row":34},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"default-data-readers","ns":"cljs.vendor.clojure.tools.reader","row":34},{"arglist-strs":["[x]"],"end-row":45,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"ns-name*","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":42},{"arglist-strs":["[ch]"],"end-row":50,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"macro-terminating?","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":47},{"fixed-arities":[3],"end-row":64,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-token","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr kind initch]"],"doc":"Read in a single logical token from the reader","row":52},{"end-row":66,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"read-tagged","ns":"cljs.vendor.clojure.tools.reader","row":66},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":74,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-dispatch","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":68},{"arglist-strs":["[rdr ch opts pending-forms]"],"end-row":78,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-unmatched-delimiter","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":76},{"arglist-strs":["[rdr ch opts pending-forms]"],"end-row":99,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-regex","ns":"cljs.vendor.clojure.tools.reader","row":84},{"arglist-strs":["[token offset length base]","[rdr initch base length exact?]"],"end-row":133,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4,5],"name":"read-unicode-char","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":101},{"end-row":135,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"upper-limit","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":135},{"end-row":136,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"lower-limit","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":136},{"fixed-arities":[4],"end-row":177,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-char*","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr backslash opts pending-forms]"],"doc":"Read in a character literal","row":138},{"arglist-strs":["[rdr]"],"end-row":181,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"starting-line-col-info","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":179},{"arglist-strs":["[rdr]"],"end-row":185,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"ending-line-col-info","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":183},{"end-row":187,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"READ_EOF","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":187},{"end-row":188,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"READ_FINISHED","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":188},{"end-row":190,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*read-delim*","ns":"cljs.vendor.clojure.tools.reader","row":190},{"fixed-arities":[5],"end-row":203,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-delimited","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[kind delim rdr opts pending-forms]"],"doc":"Reads and returns a collection ended with delim","row":191},{"fixed-arities":[4],"end-row":221,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-list","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a list, including its location if the reader is an indexing reader","row":205},{"fixed-arities":[4],"end-row":237,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-vector","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a vector, including its location if the reader is an indexing reader","row":223},{"fixed-arities":[4],"end-row":259,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-map","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read in a map, including its location if the reader is an indexing reader","row":239},{"arglist-strs":["[rdr initch]"],"end-row":270,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"read-number","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":261},{"arglist-strs":["[sb rdr]"],"end-row":291,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"escape-char","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":272},{"arglist-strs":["[reader _ opts pending-forms]"],"end-row":302,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-string*","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":293},{"arglist-strs":["[rdr initch]"],"end-row":327,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"read-symbol","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":304},{"doc":"Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases instead of (ns-aliases *ns*).\n\n   Defaults to nil","end-row":334,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*alias-map*","ns":"cljs.vendor.clojure.tools.reader","row":329},{"arglist-strs":["[sym]"],"end-row":338,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"resolve-alias","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":336},{"arglist-strs":["[sym]"],"end-row":342,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"resolve-ns","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":340},{"arglist-strs":["[reader initch opts pending-forms]"],"end-row":362,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-keyword","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":344},{"fixed-arities":[1],"end-row":368,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"wrapping-reader","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[sym]"],"doc":"Returns a function which wraps a reader in a call to sym","row":364},{"fixed-arities":[4],"end-row":386,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-meta","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read metadata and return the following object with the metadata applied","row":370},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":404,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-set","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":388},{"fixed-arities":[4],"end-row":410,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-discard","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Read and discard the first object from rdr","row":406},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":419,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-symbolic-value","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":412},{"end-row":421,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"RESERVED_FEATURES","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":421},{"arglist-strs":["[rdr feature opts]"],"end-row":427,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[3],"name":"has-feature?","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":423},{"arglist-strs":["[form rdr first-line]"],"end-row":433,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[3],"name":"check-eof-error","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":430},{"arglist-strs":["[rdr form]"],"end-row":438,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"check-reserved-features","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":435},{"arglist-strs":["[form rdr first-line]"],"end-row":445,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[3],"name":"check-invalid-read-cond","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":440},{"fixed-arities":[4],"end-row":454,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-suppress","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[first-line rdr opts pending-forms]"],"doc":"Read next form and suppress. Return nil or READ_FINISHED.","row":447},{"end-row":456,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"NO_MATCH","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":456},{"fixed-arities":[4],"end-row":475,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"match-feature","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[first-line rdr opts pending-forms]"],"doc":"Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil.","row":458},{"arglist-strs":["[rdr splicing opts pending-forms]"],"end-row":504,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-cond-delimited","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":477},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":524,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-cond","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":506},{"end-row":526,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"arg-env","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":526},{"fixed-arities":[1],"end-row":532,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"garg","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[n]"],"doc":"Get a symbol for an anonymous ?argument?","row":528},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":553,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-fn","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":534},{"fixed-arities":[1],"end-row":564,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"register-arg","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[n]"],"doc":"Registers an argument to the arg-env","row":555},{"end-row":566,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"read-symbol","ns":"cljs.vendor.clojure.tools.reader","row":566},{"arglist-strs":["[rdr pct opts pending-forms]"],"end-row":587,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-arg","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":568},{"fixed-arities":[4],"end-row":594,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"read-eval","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[rdr _ opts pending-forms]"],"doc":"Evaluate a reader literal","row":589},{"end-row":596,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"gensym-env","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":596},{"arglist-strs":["[rdr comma opts pending-forms]"],"end-row":603,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-unquote","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":598},{"end-row":605,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"syntax-quote*","ns":"cljs.vendor.clojure.tools.reader","row":605},{"arglist-strs":["[form]"],"end-row":608,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"unquote-splicing?","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":606},{"arglist-strs":["[form]"],"end-row":612,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"unquote?","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":610},{"fixed-arities":[1],"end-row":626,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"expand-list","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[s]"],"doc":"Expand a list by resolving its syntax quotes and unquotes","row":614},{"fixed-arities":[1],"end-row":637,"private":true,"ns":"cljs.vendor.clojure.tools.reader","name":"flatten-map","filename":"cljs/vendor/clojure/tools/reader.clj","arglist-strs":["[form]"],"doc":"Flatten a map into a seq of alternate keys and values","row":628},{"arglist-strs":["[sym]"],"end-row":647,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"register-gensym","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":639},{"arglist-strs":["[s]"],"doc":"Resolve a symbol s into its fully qualified namespace version","end-row":668,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"resolve-symbol","ns":"cljs.vendor.clojure.tools.reader","row":649},{"arglist-strs":["[form ret]"],"end-row":674,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"add-meta","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":670},{"arglist-strs":["[type coll]"],"end-row":685,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[2],"name":"syntax-quote-coll","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":676},{"arglist-strs":["[coll]"],"doc":"Decide which map type to use, array-map if less than 16 elements","end-row":692,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"map-func","ns":"cljs.vendor.clojure.tools.reader","row":687},{"arglist-strs":["[form]"],"end-row":745,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"syntax-quote*","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":694},{"arglist-strs":["[rdr backquote opts pending-forms]"],"end-row":751,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-syntax-quote","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":747},{"arglist-strs":["[rdr _ opts pending-forms]"],"end-row":786,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-namespaced-map","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":753},{"arglist-strs":["[ch]"],"end-row":807,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"macros","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":788},{"arglist-strs":["[ch]"],"end-row":823,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1],"name":"dispatch-macros","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":809},{"arglist-strs":["[rdr class-name opts pending-forms]"],"end-row":856,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-ctor","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":825},{"arglist-strs":["[rdr initch opts pending-forms]"],"end-row":871,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[4],"name":"read-tagged","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":858},{"doc":"Defaults to true.\n\n   ***WARNING***\n   This setting implies that the full power of the reader is in play,\n   including syntax that can cause code to execute. It should never be\n   used with untrusted sources. See also: cljs.vendor.clojure.tools.reader.edn/read.\n\n   When set to logical false in the thread-local binding,\n   the eval reader (#=) and *record/type literal syntax* are disabled in read/load.\n   Example (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\n   When set to :unknown all reads will fail in contexts where *read-eval*\n   has not been explicitly bound to either true or false. This setting\n   can be a useful diagnostic tool to ensure that all of your reads\n   occur in considered contexts.","end-row":893,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*read-eval*","ns":"cljs.vendor.clojure.tools.reader","row":877},{"doc":"Map from reader tag symbols to data reader Vars.\n   Reader tags without namespace qualifiers are reserved for Clojure.\n   Default reader tags are defined in cljs.vendor.clojure.tools.reader/default-data-readers\n   and may be overridden by binding this Var.","end-row":900,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*data-readers*","ns":"cljs.vendor.clojure.tools.reader","row":895},{"doc":"When no data reader is found for a tag and *default-data-reader-fn*\n   is non-nil, it will be called with two arguments, the tag and the value.\n   If *default-data-reader-fn* is nil (the default value), an exception\n   will be thrown for the unknown tag.","end-row":907,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*default-data-reader-fn*","ns":"cljs.vendor.clojure.tools.reader","row":902},{"end-row":909,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"*suppress-read*","ns":"cljs.vendor.clojure.tools.reader","row":909},{"doc":"Default map of data reader functions provided by Clojure.\n   May be overridden by binding *data-readers*","end-row":915,"filename":"cljs/vendor/clojure/tools/reader.clj","name":"default-data-readers","ns":"cljs.vendor.clojure.tools.reader","row":911},{"arglist-strs":["[reader eof-error? sentinel opts pending-forms]","[reader eof-error? sentinel return-on opts pending-forms]"],"end-row":959,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[6,5],"name":"read*","ns":"cljs.vendor.clojure.tools.reader","private":true,"row":917},{"arglist-strs":["[]","[reader]","[{eof :eof :as opts :or {eof :eofthrow}} reader]","[reader eof-error? sentinel]"],"doc":"Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is provided, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   ***WARNING***\n   Note that read can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use cljs.vendor.clojure.tools.reader.edn/read\n\n   Note that the function signature of cljs.vendor.clojure.tools.reader/read and\n   cljs.vendor.clojure.tools.reader.edn/read is not the same for eof-handling","end-row":993,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[0,1,3,2],"name":"read","ns":"cljs.vendor.clojure.tools.reader","row":961},{"arglist-strs":["[s]","[opts s]"],"doc":"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   ***WARNING***\n   Note that read-string can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use cljs.vendor.clojure.tools.reader.edn/read-string\n\n   Note that the function signature of cljs.vendor.clojure.tools.reader/read-string and\n   cljs.vendor.clojure.tools.reader.edn/read-string is not the same for eof-handling","end-row":1011,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[1,2],"name":"read-string","ns":"cljs.vendor.clojure.tools.reader","row":995},{"fixed-arities":[1],"end-row":1017,"ns":"cljs.vendor.clojure.tools.reader","name":"syntax-quote","filename":"cljs/vendor/clojure/tools/reader.clj","macro":true,"arglist-strs":["[form]"],"doc":"Macro equivalent to the syntax-quote reader macro (`).","row":1013},{"arglist-strs":["[]","[stream]","[stream eof-error? eof-value]","[opts stream]"],"doc":"Like read, and taking the same args. reader must be a SourceLoggingPushbackReader.\n  Returns a vector containing the object read and the (whitespace-trimmed) string read.","end-row":1031,"filename":"cljs/vendor/clojure/tools/reader.clj","fixed-arities":[0,1,3,2],"name":"read+string","ns":"cljs.vendor.clojure.tools.reader","row":1019}]