[{"fixed-arities":[0,1],"end-row":34,"ns":"cljs.analyzer.api","name":"empty-state","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[opts]"],"doc":"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","row":25},{"fixed-arities":[0],"end-row":39,"ns":"cljs.analyzer.api","name":"current-state","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current compiler state atom.","row":36},{"fixed-arities":[0],"end-row":44,"ns":"cljs.analyzer.api","name":"current-file","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current file under analysis or compilation.","row":41},{"fixed-arities":[0],"end-row":49,"ns":"cljs.analyzer.api","name":"current-ns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current ns under analysis or compilation.","row":46},{"end-row":55,"ns":"cljs.analyzer.api","name":"with-state","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[state & body]"],"doc":"Run the body with the given compilation state Atom<Map>.","row":51},{"fixed-arities":[0],"end-row":60,"ns":"cljs.analyzer.api","name":"empty-env","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Creates an empty analysis environment.","row":57},{"end-row":67,"ns":"cljs.analyzer.api","name":"no-warn","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Disable analyzer warnings for any analysis executed in body.","row":62},{"fixed-arities":[1],"end-row":72,"ns":"cljs.analyzer.api","name":"warning-enabled?","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warning-type]"],"doc":"Test if the given warning-type is enabled.","row":69},{"fixed-arities":[3],"end-row":79,"ns":"cljs.analyzer.api","name":"default-warning-handler","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warning-type env extra]"],"doc":"The default warning handler.\n\n   Outputs the warning messages to *err*.","row":74},{"end-row":89,"ns":"cljs.analyzer.api","name":"with-warning-handlers","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[handlers & body]"],"doc":"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.","row":81},{"fixed-arities":[2],"end-row":95,"ns":"cljs.analyzer.api","name":"warning-message","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warn-type warn-info]"],"doc":"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.","row":91},{"fixed-arities":[0],"end-row":100,"ns":"cljs.analyzer.api","name":"enabled-warnings","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Get the enabled warning types.","row":97},{"fixed-arities":[0,1],"end-row":106,"ns":"cljs.analyzer.api","name":"get-options","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return the compiler options from compiler state.","row":102},{"fixed-arities":[0,1],"end-row":113,"ns":"cljs.analyzer.api","name":"get-js-index","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return the currently computed Google Closure js dependency index from the\n  compiler state.","row":108},{"doc":"ClojureScript's default analysis passes.","end-row":117,"filename":"cljs/analyzer/api.cljc","lang":"clj","name":"default-passes","ns":"cljs.analyzer.api","row":115},{"end-row":123,"ns":"cljs.analyzer.api","name":"with-passes","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[passes & body]"],"doc":"Evaluate the body with the provided sequence of compiler passes.","row":119},{"fixed-arities":[4,3,2,5],"end-row":141,"ns":"cljs.analyzer.api","name":"analyze","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[env form]","[env form name]","[env form name opts]","[state env form name opts]"],"doc":"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.","row":126},{"fixed-arities":[1,2],"end-row":148,"ns":"cljs.analyzer.api","name":"forms-seq","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[rdr]","[rdr filename]"],"doc":"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.","row":144},{"fixed-arities":[1,4,3,2],"end-row":168,"ns":"cljs.analyzer.api","name":"parse-ns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[src]","[src opts]","[src dest opts]","[state src dest opts]"],"doc":"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n\n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.","row":151},{"fixed-arities":[1,3,2],"end-row":186,"ns":"cljs.analyzer.api","name":"analyze-file","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[f]","[f opts]","[state f opts]"],"doc":"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n\n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \":output-dir/some/ns/foo.cljs.cache.edn\". This function does not return a\n      meaningful value.","row":171},{"fixed-arities":[1],"end-row":196,"ns":"cljs.analyzer.api","name":"read-analysis-cache","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[cache-file]"],"doc":"Read an analysis cache.","row":189},{"fixed-arities":[2],"end-row":211,"ns":"cljs.analyzer.api","name":"resolve","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[env sym]"],"doc":"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve","row":201},{"fixed-arities":[0,1],"end-row":219,"ns":"cljs.analyzer.api","name":"all-ns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","row":213},{"fixed-arities":[1,2],"end-row":228,"ns":"cljs.analyzer.api","name":"find-ns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[sym]","[state sym]"],"doc":"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","row":221},{"fixed-arities":[1,2],"end-row":239,"ns":"cljs.analyzer.api","name":"ns-interns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","row":230},{"fixed-arities":[1,2],"end-row":252,"ns":"cljs.analyzer.api","name":"ns-publics","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","row":241},{"fixed-arities":[3,2],"end-row":261,"ns":"cljs.analyzer.api","name":"ns-resolve","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns sym]","[state ns sym]"],"doc":"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","row":254},{"fixed-arities":[1,2],"end-row":269,"ns":"cljs.analyzer.api","name":"remove-ns","lang":"clj","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Removes the namespace named by the symbol.","row":263},{"end-row":277,"ns":"cljs.analyzer.api","name":"in-cljs-user","lang":"clj","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[env & body]"],"doc":"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.","row":271},{"fixed-arities":[0,1],"end-row":34,"ns":"cljs.analyzer.api","name":"empty-state","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[opts]"],"doc":"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","row":25},{"fixed-arities":[0],"end-row":39,"ns":"cljs.analyzer.api","name":"current-state","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current compiler state atom.","row":36},{"fixed-arities":[0],"end-row":44,"ns":"cljs.analyzer.api","name":"current-file","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current file under analysis or compilation.","row":41},{"fixed-arities":[0],"end-row":49,"ns":"cljs.analyzer.api","name":"current-ns","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Return the current ns under analysis or compilation.","row":46},{"end-row":55,"ns":"cljs.analyzer.api","name":"with-state","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[state & body]"],"doc":"Run the body with the given compilation state Atom<Map>.","row":51},{"fixed-arities":[0],"end-row":60,"ns":"cljs.analyzer.api","name":"empty-env","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Creates an empty analysis environment.","row":57},{"end-row":67,"ns":"cljs.analyzer.api","name":"no-warn","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Disable analyzer warnings for any analysis executed in body.","row":62},{"fixed-arities":[1],"end-row":72,"ns":"cljs.analyzer.api","name":"warning-enabled?","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warning-type]"],"doc":"Test if the given warning-type is enabled.","row":69},{"fixed-arities":[3],"end-row":79,"ns":"cljs.analyzer.api","name":"default-warning-handler","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warning-type env extra]"],"doc":"The default warning handler.\n\n   Outputs the warning messages to *err*.","row":74},{"end-row":89,"ns":"cljs.analyzer.api","name":"with-warning-handlers","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[handlers & body]"],"doc":"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.","row":81},{"fixed-arities":[2],"end-row":95,"ns":"cljs.analyzer.api","name":"warning-message","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[warn-type warn-info]"],"doc":"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.","row":91},{"fixed-arities":[0],"end-row":100,"ns":"cljs.analyzer.api","name":"enabled-warnings","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]"],"doc":"Get the enabled warning types.","row":97},{"fixed-arities":[0,1],"end-row":106,"ns":"cljs.analyzer.api","name":"get-options","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return the compiler options from compiler state.","row":102},{"fixed-arities":[0,1],"end-row":113,"ns":"cljs.analyzer.api","name":"get-js-index","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return the currently computed Google Closure js dependency index from the\n  compiler state.","row":108},{"doc":"ClojureScript's default analysis passes.","end-row":117,"filename":"cljs/analyzer/api.cljc","lang":"cljs","name":"default-passes","ns":"cljs.analyzer.api","row":115},{"end-row":123,"ns":"cljs.analyzer.api","name":"with-passes","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[passes & body]"],"doc":"Evaluate the body with the provided sequence of compiler passes.","row":119},{"fixed-arities":[2],"end-row":211,"ns":"cljs.analyzer.api","name":"resolve","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[env sym]"],"doc":"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve","row":201},{"fixed-arities":[0,1],"end-row":219,"ns":"cljs.analyzer.api","name":"all-ns","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[]","[state]"],"doc":"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","row":213},{"fixed-arities":[1,2],"end-row":228,"ns":"cljs.analyzer.api","name":"find-ns","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[sym]","[state sym]"],"doc":"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","row":221},{"fixed-arities":[1,2],"end-row":239,"ns":"cljs.analyzer.api","name":"ns-interns","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","row":230},{"fixed-arities":[1,2],"end-row":252,"ns":"cljs.analyzer.api","name":"ns-publics","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","row":241},{"fixed-arities":[3,2],"end-row":261,"ns":"cljs.analyzer.api","name":"ns-resolve","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns sym]","[state ns sym]"],"doc":"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","row":254},{"fixed-arities":[1,2],"end-row":269,"ns":"cljs.analyzer.api","name":"remove-ns","lang":"cljs","filename":"cljs/analyzer/api.cljc","arglist-strs":["[ns]","[state ns]"],"doc":"Removes the namespace named by the symbol.","row":263},{"end-row":277,"ns":"cljs.analyzer.api","name":"in-cljs-user","lang":"cljs","filename":"cljs/analyzer/api.cljc","macro":true,"arglist-strs":["[env & body]"],"doc":"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.","row":271}]