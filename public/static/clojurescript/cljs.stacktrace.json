[{"doc":"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str","end-row":31,"filename":"cljs/stacktrace.cljc","lang":"clj","name":"parse-stacktrace","ns":"cljs.stacktrace","row":17},{"arglist-strs":["[s]"],"end-row":35,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"parse-int","ns":"cljs.stacktrace","row":33},{"arglist-strs":["[s0 s1]"],"end-row":41,"filename":"cljs/stacktrace.cljc","fixed-arities":[2],"lang":"clj","name":"starts-with?","ns":"cljs.stacktrace","row":37},{"arglist-strs":["[s0 s1]"],"end-row":47,"filename":"cljs/stacktrace.cljc","fixed-arities":[2],"lang":"clj","name":"ends-with?","ns":"cljs.stacktrace","row":43},{"arglist-strs":["[s]"],"end-row":51,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"string->regex","ns":"cljs.stacktrace","row":49},{"arglist-strs":["[opts]"],"end-row":55,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"output-directory","ns":"cljs.stacktrace","row":53},{"arglist-strs":["[flc]"],"end-row":79,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"parse-file-line-column","ns":"cljs.stacktrace","row":60},{"fixed-arities":[3],"end-row":106,"ns":"cljs.stacktrace","name":"parse-file","lang":"clj","filename":"cljs/stacktrace.cljc","arglist-strs":["[{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]"],"doc":"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.","row":81},{"arglist-strs":["[repl-env st-el opts]"],"end-row":129,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"clj","name":"chrome-st-el->frame","ns":"cljs.stacktrace","row":111},{"arglist-strs":["[repl-env st-el opts]"],"end-row":227,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"clj","name":"safari-st-el->frame","ns":"cljs.stacktrace","row":212},{"arglist-strs":["[f]"],"end-row":304,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"firefox-clean-function","ns":"cljs.stacktrace","row":294},{"arglist-strs":["[repl-env st-el opts]"],"end-row":321,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"clj","name":"firefox-st-el->frame","ns":"cljs.stacktrace","row":306},{"arglist-strs":["[file]"],"end-row":448,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"clj","name":"remove-ext","ns":"cljs.stacktrace","row":443},{"fixed-arities":[4],"end-row":469,"ns":"cljs.stacktrace","name":"mapped-line-column-call","lang":"clj","filename":"cljs/stacktrace.cljc","arglist-strs":["[sms file line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":450},{"fixed-arities":[3],"end-row":489,"ns":"cljs.stacktrace","name":"mapped-frame","lang":"clj","filename":"cljs/stacktrace.cljc","arglist-strs":["[{:keys [function file line column]} sms opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":471},{"fixed-arities":[3,2],"end-row":526,"ns":"cljs.stacktrace","name":"mapped-stacktrace","lang":"clj","filename":"cljs/stacktrace.cljc","arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":491},{"fixed-arities":[3,2],"end-row":541,"ns":"cljs.stacktrace","name":"mapped-stacktrace-str","lang":"clj","filename":"cljs/stacktrace.cljc","arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","row":528},{"end-row":560,"filename":"cljs/stacktrace.cljc","lang":"clj","name":"sms","ns":"cljs.stacktrace","row":555},{"doc":"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str","end-row":31,"filename":"cljs/stacktrace.cljc","lang":"cljs","name":"parse-stacktrace","ns":"cljs.stacktrace","row":17},{"arglist-strs":["[s]"],"end-row":35,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"parse-int","ns":"cljs.stacktrace","row":33},{"arglist-strs":["[s0 s1]"],"end-row":41,"filename":"cljs/stacktrace.cljc","fixed-arities":[2],"lang":"cljs","name":"starts-with?","ns":"cljs.stacktrace","row":37},{"arglist-strs":["[s0 s1]"],"end-row":47,"filename":"cljs/stacktrace.cljc","fixed-arities":[2],"lang":"cljs","name":"ends-with?","ns":"cljs.stacktrace","row":43},{"arglist-strs":["[s]"],"end-row":51,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"string->regex","ns":"cljs.stacktrace","row":49},{"arglist-strs":["[opts]"],"end-row":55,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"output-directory","ns":"cljs.stacktrace","row":53},{"arglist-strs":["[flc]"],"end-row":79,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"parse-file-line-column","ns":"cljs.stacktrace","row":60},{"fixed-arities":[3],"end-row":106,"ns":"cljs.stacktrace","name":"parse-file","lang":"cljs","filename":"cljs/stacktrace.cljc","arglist-strs":["[{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]"],"doc":"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.","row":81},{"arglist-strs":["[repl-env st-el opts]"],"end-row":129,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"cljs","name":"chrome-st-el->frame","ns":"cljs.stacktrace","row":111},{"arglist-strs":["[repl-env st-el opts]"],"end-row":227,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"cljs","name":"safari-st-el->frame","ns":"cljs.stacktrace","row":212},{"arglist-strs":["[f]"],"end-row":304,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"firefox-clean-function","ns":"cljs.stacktrace","row":294},{"arglist-strs":["[repl-env st-el opts]"],"end-row":321,"filename":"cljs/stacktrace.cljc","fixed-arities":[3],"lang":"cljs","name":"firefox-st-el->frame","ns":"cljs.stacktrace","row":306},{"arglist-strs":["[file]"],"end-row":448,"filename":"cljs/stacktrace.cljc","fixed-arities":[1],"lang":"cljs","name":"remove-ext","ns":"cljs.stacktrace","row":443},{"fixed-arities":[4],"end-row":469,"ns":"cljs.stacktrace","name":"mapped-line-column-call","lang":"cljs","filename":"cljs/stacktrace.cljc","arglist-strs":["[sms file line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":450},{"fixed-arities":[3],"end-row":489,"ns":"cljs.stacktrace","name":"mapped-frame","lang":"cljs","filename":"cljs/stacktrace.cljc","arglist-strs":["[{:keys [function file line column]} sms opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":471},{"fixed-arities":[3,2],"end-row":526,"ns":"cljs.stacktrace","name":"mapped-stacktrace","lang":"cljs","filename":"cljs/stacktrace.cljc","arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":491},{"fixed-arities":[3,2],"end-row":541,"ns":"cljs.stacktrace","name":"mapped-stacktrace-str","lang":"cljs","filename":"cljs/stacktrace.cljc","arglist-strs":["[stacktrace sms]","[stacktrace sms opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","row":528},{"end-row":560,"filename":"cljs/stacktrace.cljc","lang":"cljs","name":"sms","ns":"cljs.stacktrace","row":555}]