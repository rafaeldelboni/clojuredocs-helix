[{"arglist-strs":["[ns-sym]","[ns-sym output-dir]"],"doc":"Given an output directory and a clojurescript namespace return the\n  compilation target file for that namespace.\n\n  For example:\n  (target-file-from-cljs-ns \"resources/out\" 'example.core) ->\n  <File: \"resources/out/example/core.js\">","end-row":35,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"target-file-for-cljs-ns","ns":"cljs.build.api","row":27},{"arglist-strs":["[ns-sym]","[ns-sym output-dir]"],"doc":"Backdates a cljs target file so that it the cljs compiler will recompile it.","end-row":40,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"mark-cljs-ns-for-recompile!","ns":"cljs.build.api","row":37},{"arglist-strs":["[namespaces]","[state namespaces]"],"doc":"Takes a list of Clojure (.clj) namespaces that define macros and\n  returns a list ClojureScript (.cljs) namespaces that depend on those macro\n  namespaces.\n\n  For example where example.macros is defined in the clojure file\n  \"example/macros.clj\" and both 'example.core and 'example.util are\n  ClojureScript namespaces that require and use the macros from\n  'example.macros :\n  (cljs-dependents-for-macro-namespaces 'example.macros) ->\n  ('example.core 'example.util)","end-row":57,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"cljs-dependents-for-macro-namespaces","ns":"cljs.build.api","row":42},{"arglist-strs":["[f]"],"doc":"Given a Google Closure style JavaScript file or resource return the namespace\n  information for the given file. Only returns the value extracted from the\n  first provide statement.","end-row":64,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"parse-js-ns","ns":"cljs.build.api","row":59},{"arglist-strs":["[src]","[src opts]","[state src opts]"],"doc":"Given a ClojureScript source file return the target file. May optionally\n  provide build options with :output-dir specified.","end-row":76,"filename":"cljs/build/api.clj","fixed-arities":[1,3,2],"name":"src-file->target-file","ns":"cljs.build.api","row":66},{"arglist-strs":["[src]","[src opts]","[state src opts]"],"doc":"Given a ClojureScript or Google Closure style JavaScript source file return\n  the goog.require statement for it.","end-row":88,"filename":"cljs/build/api.clj","fixed-arities":[1,3,2],"name":"src-file->goog-require","ns":"cljs.build.api","row":78},{"arglist-strs":["[xs]"],"doc":"Given a sequence of cljs.closure/IJavaScript values, create an index using\n  :provides. The original values will appear under each :provide.","end-row":98,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"index-ijs","ns":"cljs.build.api","row":90},{"arglist-strs":["[opts ijs]"],"doc":"Given compiler options and a IJavaScript instance return the corresponding\n  goog.addDependency string","end-row":107,"filename":"cljs/build/api.clj","fixed-arities":[2],"name":"goog-dep-string","ns":"cljs.build.api","row":103},{"arglist-strs":["[opts ijs]"],"doc":"Ensure that the given IJavaScript exists on disk in the output directory.\n  Return updated IJavaScript with the new location if necessary.","end-row":113,"filename":"cljs/build/api.clj","fixed-arities":[2],"name":"source-on-disk","ns":"cljs.build.api","row":109},{"arglist-strs":["[ns]"],"doc":"Given a namespace as a symbol return the corresponding resource if it exists.","end-row":118,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"ns->source","ns":"cljs.build.api","row":115},{"arglist-strs":["[ns]","[ns compiler-env]"],"doc":"Given a namespace and compilation environment return the relative path and\n  uri of the corresponding source regardless of the source language extension:\n  .cljs, .cljc, .js. Returns a map containing :relative-path a string, and\n  :uri a URL.","end-row":128,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"ns->location","ns":"cljs.build.api","row":120},{"arglist-strs":["[x]","[x opts]"],"doc":"Given a cljs.closure/Compilable value, return the corresponding\n  cljs.closure/IJavaScript value.","end-row":136,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"compilable->ijs","ns":"cljs.build.api","row":130},{"arglist-strs":["[xs]","[xs opts]","[state xs opts]"],"doc":"Given a sequence of cljs.closure/IJavaScript values, return a set that includes\n  all dependencies.","end-row":147,"filename":"cljs/build/api.clj","fixed-arities":[1,3,2],"name":"add-dependency-sources","ns":"cljs.build.api","row":138},{"arglist-strs":["[opts & ijss]"],"doc":"DEPRECATED: Given one or more IJavaScript objects in dependency order, produce\n  a new sequence of IJavaScript objects which includes the input list\n  plus all dependencies in dependency order.","end-row":154,"filename":"cljs/build/api.clj","name":"add-dependencies","ns":"cljs.build.api","row":149},{"arglist-strs":["[state xs opts]"],"doc":"Given a collection of IJavaScript values representing a build, index all\n  node modules, convert all JS modules (ES6 etc), and store the updated\n  js-dependency-index (likely changed due to modules) in compiler state.","end-row":161,"filename":"cljs/build/api.clj","fixed-arities":[3],"name":"handle-js-modules","ns":"cljs.build.api","row":156},{"arglist-strs":["[xs]"],"doc":"Topologically sort a collection of IJavaScript values.","end-row":166,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"dependency-order","ns":"cljs.build.api","row":163},{"arglist-strs":["[opts]"],"doc":"Given a valid map of build options add any standard implicit options. For\n  example :optimizations :none implies :cache-analysis true and :source-map\n  true.","end-row":173,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"add-implicit-options","ns":"cljs.build.api","row":168},{"arglist-strs":["[& xs]"],"doc":"Given a list of directories and files, return a compilable object that may\n  be passed to build or watch.","end-row":192,"filename":"cljs/build/api.clj","name":"inputs","ns":"cljs.build.api","row":175},{"arglist-strs":["[opts compilable]","[state opts compilable]"],"doc":"Given a Compilable, compile it and return an IJavaScript.","end-row":200,"filename":"cljs/build/api.clj","fixed-arities":[3,2],"name":"compile","ns":"cljs.build.api","row":194},{"arglist-strs":["[opts & sources]"],"doc":"Ensure that all JavaScript source files are on disk (not in jars),\n   write the goog deps file including only the libraries that are being\n   used and write the deps file for the current project.\n\n   The deps file for the current project will include third-party\n   libraries.","end-row":210,"filename":"cljs/build/api.clj","name":"output-unoptimized","ns":"cljs.build.api","row":202},{"arglist-strs":["[opts]","[source opts]","[source opts compiler-env]"],"doc":"Given compiler options, produce runnable JavaScript. An optional source\n   parameter may be provided.","end-row":231,"filename":"cljs/build/api.clj","fixed-arities":[1,3,2],"name":"build","ns":"cljs.build.api","row":212},{"arglist-strs":["[source opts]","[source opts compiler-env]","[source opts compiler-env stop]"],"doc":"Given a source which can be compiled, watch it for changes to produce.","end-row":244,"filename":"cljs/build/api.clj","fixed-arities":[4,3,2],"name":"watch","ns":"cljs.build.api","row":233},{"arglist-strs":["[m]"],"end-row":256,"filename":"cljs/build/api.clj","fixed-arities":[1],"name":"compiler-opts?","ns":"cljs.build.api","row":249},{"arglist-strs":["[dependencies]","[dependencies opts]"],"doc":"EXPERIMENTAL: Install the supplied dependencies via NPM. dependencies must be\n   a map of name to version or a valid compiler options map.","end-row":271,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"install-node-deps!","ns":"cljs.build.api","row":258},{"arglist-strs":["[dependencies]","[dependencies opts]"],"doc":"EXPERIMENTAL: Get the Node.js dependency graph of the supplied dependencies.\n   Dependencies must be a sequence of strings or symbols naming packages or paths\n   within packages (e.g. [react \"react-dom/server\"] or a valid compiler options\n   map. Assumes dependencies have been been previously installed, either by\n   `cljs.build.api/install-node-deps!` or by an NPM client, and reside in the\n   `node_modules` directory.","end-row":290,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"get-node-deps","ns":"cljs.build.api","row":273},{"arglist-strs":["[entries]","[entries opts]"],"doc":"EXPERIMENTAL: return the foreign libs entries as computed by running\n   the module-deps package on the supplied JavaScript entry points. Assumes\n   that the `@cljs-oss/module-deps` NPM package is either locally or globally\n   installed.","end-row":301,"filename":"cljs/build/api.clj","fixed-arities":[1,2],"name":"node-inputs","ns":"cljs.build.api","row":292},{"arglist-strs":["[]","[opts]"],"doc":"Return a sequence of requirable libraries found under node_modules.","end-row":309,"filename":"cljs/build/api.clj","fixed-arities":[0,1],"name":"node-modules","ns":"cljs.build.api","row":303}]