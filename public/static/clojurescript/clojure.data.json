[{"end-row":15,"filename":"clojure/data.cljs","name":"diff","ns":"clojure.data","row":15},{"fixed-arities":[2],"end-row":20,"private":true,"ns":"clojure.data","name":"atom-diff","filename":"clojure/data.cljs","arglist-strs":["[a b]"],"doc":"Internal helper for diff.","row":17},{"fixed-arities":[1],"end-row":31,"private":true,"ns":"clojure.data","name":"vectorize","filename":"clojure/data.cljs","arglist-strs":["[m]"],"doc":"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys","row":23},{"fixed-arities":[3],"end-row":47,"private":true,"ns":"clojure.data","name":"diff-associative-key","filename":"clojure/data.cljs","arglist-strs":["[a b k]"],"doc":"Diff associative things a and b, comparing only the key k.","row":33},{"fixed-arities":[3,2],"end-row":60,"private":true,"ns":"clojure.data","name":"diff-associative","filename":"clojure/data.cljs","arglist-strs":["[a b]","[a b ks]"],"doc":"Diff associative things a and b, comparing only keys in ks (if supplied).","row":49},{"arglist-strs":["[a b]"],"end-row":67,"filename":"clojure/data.cljs","fixed-arities":[2],"name":"diff-sequential","ns":"clojure.data","private":true,"row":62},{"arglist-strs":["[a b]"],"end-row":73,"filename":"clojure/data.cljs","fixed-arities":[2],"name":"diff-set","ns":"clojure.data","private":true,"row":69},{"doc":"Implementation detail. Subject to change.","end-row":77,"filename":"clojure/data.cljs","name":"EqualityPartition","ns":"clojure.data","row":75},{"arglist-strs":["[x]"],"doc":"Implementation detail. Subject to change.","end-row":77,"filename":"clojure/data.cljs","fixed-arities":[1],"name":"equality-partition","ns":"clojure.data","row":77},{"doc":"Implementation detail. Subject to change.","end-row":81,"filename":"clojure/data.cljs","name":"Diff","ns":"clojure.data","row":79},{"arglist-strs":["[a b]"],"doc":"Implementation detail. Subject to change.","end-row":81,"filename":"clojure/data.cljs","fixed-arities":[2],"name":"diff-similar","ns":"clojure.data","row":81},{"arglist-strs":["[a b]"],"doc":"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.","end-row":161,"filename":"clojure/data.cljs","fixed-arities":[2],"name":"diff","ns":"clojure.data","row":144}]