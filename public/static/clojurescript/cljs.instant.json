[{"end-row":20,"filename":"cljs/instant.clj","name":"utc-format","ns":"cljs.instant","private":true,"row":17},{"arglist-strs":["[s]"],"end-row":23,"filename":"cljs/instant.clj","fixed-arities":[1],"name":"remove-last-char","ns":"cljs.instant","private":true,"row":22},{"fixed-arities":[2],"end-row":30,"private":true,"ns":"cljs.instant","name":"print-instant","filename":"cljs/instant.clj","arglist-strs":["[instant w]"],"doc":"Print a java.time.Instant as RFC3339 timestamp, always in UTC.","row":25},{"fixed-arities":[10],"end-row":46,"private":true,"ns":"cljs.instant","name":"construct-instant","filename":"cljs/instant.clj","arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.time.Instant, which has nanosecond precision.","row":40},{"arglist-strs":["[cs]"],"doc":"To read an instant as a java.time.Instant, bind *data-readers* to a\n  map with this var as the value for the 'inst key. Instant preserves\n  fractional seconds with nanosecond precision. The timezone offset will\n  be used to convert into UTC.","end-row":54,"filename":"cljs/instant.clj","fixed-arities":[1],"name":"read-instant-instant","ns":"cljs.instant","row":48}]