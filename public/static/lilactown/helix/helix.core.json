[{"end-row":58,"meta":{},"name-end-col":12,"name-end-row":8,"name-row":8,"ns":"helix.core","name":"$","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L8","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":80,"arglist-strs":["[type & args]"],"varargs-min-arity":1,"doc":"Create a new React element from a valid React type.\n\n  Will try to statically convert props to a JS object.\n\n  To pass in dynamic props, use the special `&` or `:&` key in the props map\n  to have the map merged in.\n\n  Simple example:\n\n  ($ my-component\n     \"child1\"\n     ($ \"span\"\n        {:style {:color \"green\"}}\n        \"child2\" ))\n\n  Dynamic exmaple:\n\n  (let [dynamic-props {:foo \"bar\"}]\n    ($ my-component\n       {:static \"prop\"\n        & dynamic-props}))\n  ","row":8},{"end-row":64,"meta":{},"name-end-col":13,"name-end-row":61,"name-row":61,"ns":"helix.core","name":"<>","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L61","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":46,"arglist-strs":["[& children]"],"varargs-min-arity":0,"doc":"Creates a new React Fragment Element","row":61},{"end-row":80,"meta":{},"name-end-col":19,"name-end-row":67,"name-row":67,"ns":"helix.core","name":"provider","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L67","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":37,"arglist-strs":["[{:keys [context value] :as props} & children]"],"varargs-min-arity":1,"doc":"Creates a Provider for a React Context value.\n\n  Example:\n\n    (def my-context (react/createContext))\n\n    (provider {:context my-context :value my-value} child1 child2 ...childN)","row":67},{"end-row":89,"meta":{},"name-end-col":19,"name-end-row":83,"name-row":83,"ns":"helix.core","name":"suspense","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L83","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":37,"arglist-strs":["[{:keys [fallback]} & children]"],"varargs-min-arity":1,"doc":"Creates a React Suspense boundary.","row":83},{"fixed-arities":[3],"end-row":98,"meta":{},"name-end-col":12,"name-end-row":92,"private":true,"name-row":92,"ns":"helix.core","name":"fnc*","defined-by":"clojure.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L92","filename":"/src/helix/core.clj","col":1,"name-col":8,"end-col":17,"arglist-strs":["[display-name props-bindings body]"],"row":92},{"end-row":113,"meta":{},"name-end-col":16,"name-end-row":101,"name-row":101,"ns":"helix.core","name":"meta->form","defined-by":"clojure.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L101","filename":"/src/helix/core.clj","col":1,"name-col":6,"end-col":27,"row":101},{"end-row":168,"meta":{},"name-end-col":14,"name-end-row":116,"name-row":116,"ns":"helix.core","name":"fnc","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L116","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":30,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Creates a new anonymous function React component. Used like:\n\n  (fnc ?optional-component-name\n    [props ?forwarded-ref]\n    {,,,opts-map}\n    ,,,body)\n\n  Returns a function that can be used just like a component defined with\n  `defnc`, i.e. accepts a JS object as props and the body receives them as a\n  map, can be used with `$` macro, forwardRef, etc.\n\n  `opts-map` is optional and can be used to pass some configuration options.\n  Current options:\n   - ':wrap' - ordered sequence of higher-order components to wrap the component in\n   - ':helix/features' - a map of feature flags to enable.\n\n  Some feature flags only pertain to named components, i.e. Fast Refresh and\n  factory functions, and thus can not be used with `fnc`.","row":116},{"end-row":281,"meta":{},"name-end-col":16,"name-end-row":171,"name-row":171,"ns":"helix.core","name":"defnc","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L171","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":26,"arglist-strs":["[display-name & form-body]"],"varargs-min-arity":1,"doc":"Defines a new functional React component. Used like:\n\n  ```\n  (defnc component-name\n    \"Optional docstring\"\n    {,,,fn-meta}\n    [props ?ref]\n    {,,,opts-map}\n    ,,,body)\n  ```\n\n  `component-name` will now be bound in the namespace a React function component\n  that returns a React Element.\n\n\n  Your component should adhere to the following:\n\n  First parameter is 'props', a map of properties passed to the component.\n\n  Second parameter is optional and is used with `React.forwardRef`.\n\n  `fn-meta` is optional and will be merged into the metadata of the `component-name`\n  symbol. A special `:wrap` key may contain an ordered sequence of higher-order\n  components to wrap the component in.\n\n  `opts-map` is optional and can be used to pass some configuration options to the\n  macro. Current options:\n   - `:helix/features` - a map of feature flags to enable. See \"Experimental\" docs.\n\n  `body` should return a React Element.","row":171},{"end-row":287,"meta":{},"name-end-col":17,"name-end-row":284,"name-row":284,"ns":"helix.core","name":"defnc-","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L284","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":68,"arglist-strs":["[display-name & rest]"],"varargs-min-arity":1,"doc":"Same as defnc, yielding a non-public def","row":284},{"end-row":326,"meta":{},"name-end-col":18,"name-end-row":295,"name-row":295,"ns":"helix.core","name":"defhook","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L295","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":16,"arglist-strs":["[sym & body]"],"varargs-min-arity":1,"doc":"Defines a new custom hook function.\n  Checks for invalid usage of other hooks in the body, and other helix\n  features.","row":295},{"fixed-arities":[1],"end-row":336,"meta":{},"name-end-col":15,"name-end-row":335,"private":true,"name-row":335,"ns":"helix.core","name":"static?","defined-by":"clojure.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L335","filename":"/src/helix/core.clj","col":1,"name-col":8,"end-col":35,"arglist-strs":["[form]"],"row":335},{"fixed-arities":[1],"end-row":342,"meta":{},"name-end-col":15,"name-end-row":339,"private":true,"name-row":339,"ns":"helix.core","name":"method?","defined-by":"clojure.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L339","filename":"/src/helix/core.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[form]"],"row":339},{"fixed-arities":[1],"end-row":349,"meta":{},"name-end-col":16,"name-end-row":345,"private":true,"name-row":345,"ns":"helix.core","name":"->method","defined-by":"clojure.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L345","filename":"/src/helix/core.clj","col":1,"name-col":8,"end-col":21,"arglist-strs":["[[sym-name bindings & form]]"],"row":345},{"fixed-arities":[1],"end-row":354,"meta":{},"name-end-col":15,"name-end-row":352,"private":true,"name-row":352,"ns":"helix.core","name":"->value","defined-by":"clojure.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L352","filename":"/src/helix/core.clj","col":1,"name-col":8,"end-col":31,"arglist-strs":["[[sym-name value]]"],"row":352},{"end-row":403,"meta":{},"name-end-col":23,"name-end-row":357,"name-row":357,"ns":"helix.core","name":"defcomponent","defined-by":"clojure.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.clj#L357","filename":"/src/helix/core.clj","macro":true,"col":1,"name-col":11,"end-col":50,"arglist-strs":["[display-name & spec]"],"varargs-min-arity":1,"doc":"Defines a React class component.\n  Like `class display-name extends React.Component { ... }` in JS.\n\n  Methods are defined using (method-name [this ,,,] ,,,) syntax.\n  Properties elide the arguments vector (property-name expr)\n\n  Static properties and methods can be added by annotating the method or\n  property with metadata containing the :static keyword.\n\n  Some assumptions:\n  - To use setState, you must store the state as a JS obj\n  - The render method receives three arguments: this, a CLJS map of props,\n    and the state object.\n  - displayName by default is the symbol passed in, but can be customized\n    by manually adding it as a static property\n\n  Example:\n\n  (defcomponent foo\n   (constructor\n    [this]\n    (set! (.-state this) #js {:counter 0})))","row":357},{"end-row":20,"meta":{},"name-end-col":14,"name-end-row":18,"name-row":18,"ns":"helix.core","name":"Fragment","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L18","filename":"/src/helix/core.cljs","col":1,"name-col":6,"end-col":18,"doc":"React.Fragment. See `helix.core/<>` for macro version.","row":18},{"end-row":25,"meta":{},"name-end-col":14,"name-end-row":23,"name-row":23,"ns":"helix.core","name":"Suspense","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L23","filename":"/src/helix/core.cljs","col":1,"name-col":6,"end-col":18,"doc":"React.Suspense. See `helix.core/suspense` for macro version.","row":23},{"end-row":28,"meta":{},"name-end-col":20,"name-end-row":28,"name-row":28,"ns":"helix.core","name":"create-element","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L28","filename":"/src/helix/core.cljs","col":1,"name-col":6,"end-col":41,"row":28},{"end-row":33,"meta":{},"name-end-col":20,"name-end-row":31,"name-row":31,"ns":"helix.core","name":"create-context","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L31","filename":"/src/helix/core.cljs","col":1,"name-col":6,"end-col":23,"doc":"React.createContext","row":31},{"fixed-arities":[0],"end-row":38,"meta":{},"name-end-col":26,"name-end-row":38,"name-row":38,"ns":"helix.core","name":"get-react","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L38","filename":"/src/helix/core.cljs","col":1,"name-col":17,"end-col":36,"arglist-strs":["[]"],"row":38},{"end-row":71,"meta":{},"name-end-col":8,"name-end-row":41,"name-row":41,"ns":"helix.core","name":"$","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L41","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":22,"arglist-strs":["[type & args]"],"varargs-min-arity":1,"doc":"Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```","row":41},{"end-row":88,"meta":{},"name-end-col":21,"name-end-row":74,"name-row":74,"ns":"helix.core","name":"$$","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L74","filename":"/src/helix/core.cljs","col":1,"deprecated":true,"name-col":19,"end-col":4,"doc":"Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \"child1\"\n   ($$ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```","row":74},{"end-row":92,"meta":{},"name-end-col":26,"name-end-row":91,"name-row":91,"ns":"helix.core","name":"IExtractType","defined-by":"cljs.core/defprotocol","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L91","filename":"/src/helix/core.cljs","col":1,"name-col":14,"end-col":79,"row":91},{"fixed-arities":[1],"end-row":92,"meta":{},"name-end-col":9,"protocol-ns":"helix.core","name-end-row":92,"name-row":92,"ns":"helix.core","name":"-type","defined-by":"cljs.core/defprotocol","protocol-name":"IExtractType","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L92","filename":"/src/helix/core.cljs","col":3,"name-col":4,"end-col":78,"arglist-strs":["[factory]"],"doc":"Extracts the underlying type from the factory function.","row":92},{"fixed-arities":[1],"end-row":99,"meta":{},"name-end-col":11,"name-end-row":95,"name-row":95,"ns":"helix.core","name":"type","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L95","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":13,"arglist-strs":["[f]"],"doc":"Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of.","row":95},{"fixed-arities":[1],"end-row":111,"meta":{},"name-end-col":14,"name-end-row":102,"name-row":102,"ns":"helix.core","name":"factory","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L102","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[type]"],"doc":"Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component.","row":102},{"fixed-arities":[1],"end-row":138,"meta":{},"name-end-col":19,"name-end-row":114,"name-row":114,"ns":"helix.core","name":"cljs-factory","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L114","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[type]"],"doc":"Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with.","row":114},{"fixed-arities":[3],"end-row":144,"meta":{},"name-end-col":18,"name-end-row":141,"private":true,"name-row":141,"ns":"helix.core","name":"assoc-some","defined-by":"cljs.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L141","filename":"/src/helix/core.cljs","col":1,"name-col":8,"end-col":8,"arglist-strs":["[m k x]"],"row":141},{"fixed-arities":[1],"end-row":157,"meta":{},"name-end-col":25,"name-end-row":147,"name-row":147,"ns":"helix.core","name":"extract-cljs-props","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L147","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":20,"arglist-strs":["[o]"],"doc":"A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC.","row":147},{"fixed-arities":[2],"end-row":167,"meta":{},"name-end-col":28,"name-end-row":160,"private":true,"name-row":160,"ns":"helix.core","name":"props-kvs-identical?","defined-by":"cljs.core/defn-","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L160","filename":"/src/helix/core.cljs","col":1,"name-col":8,"end-col":31,"arglist-strs":["[prev cur]"],"row":160},{"fixed-arities":[1,2],"end-row":182,"meta":{},"name-end-col":11,"name-end-row":170,"name-row":170,"ns":"helix.core","name":"memo","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L170","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":36,"arglist-strs":["[component]","[component compare]"],"doc":"Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.","row":170},{"fixed-arities":[2],"end-row":202,"meta":{},"name-end-col":23,"name-end-row":192,"name-row":192,"ns":"helix.core","name":"create-component","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L192","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":65,"arglist-strs":["[spec statics]"],"doc":"Helper function for creating a class component. See `defcomponent`.","row":192},{"end-row":214,"meta":{},"name-end-col":19,"name-end-row":205,"name-row":205,"ns":"helix.core","name":"MyComponent","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L205","filename":"/src/helix/core.cljs","col":3,"name-col":8,"end-col":28,"row":205},{"fixed-arities":[2],"end-row":232,"meta":{},"name-end-col":16,"name-end-row":226,"name-row":226,"ns":"helix.core","name":"register!","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L226","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":40,"arglist-strs":["[type id]"],"doc":"Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.","row":226},{"fixed-arities":[0],"end-row":238,"meta":{},"name-end-col":17,"name-end-row":235,"name-row":235,"ns":"helix.core","name":"signature!","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/core.cljs#L235","filename":"/src/helix/core.cljs","col":1,"name-col":7,"end-col":36,"arglist-strs":["[]"],"row":235}]