[{"end-row":278,"meta":{},"name-end-col":23,"index":0,"name-end-row":267,"name-row":267,"ns":"helix.hooks","name":"use-callback","defined-by":"cljs.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L267","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","macro":true,"col":1,"name-col":11,"end-col":65,"arglist-strs":["[deps & fn-body]"],"varargs-min-arity":1,"doc":"Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function.","row":267},{"fixed-arities":[1],"end-row":94,"meta":{},"name-end-col":17,"index":0,"name-end-row":67,"name-row":67,"ns":"helix.hooks","name":"use-ref","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L67","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":29,"arglist-strs":["[x]"],"doc":"Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`","row":67},{"fixed-arities":[3,2],"end-row":112,"meta":{},"name-end-col":21,"index":0,"name-end-row":98,"name-row":98,"ns":"helix.hooks","name":"use-reducer","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L98","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":15,"arglist-strs":["[reducer init-state]","[reducer init-state init]"],"doc":"Just react/useReducer.","row":98},{"end-row":252,"meta":{},"name-end-col":19,"index":0,"name-end-row":233,"name-row":233,"ns":"helix.hooks","name":"use-memo","defined-by":"cljs.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L233","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","macro":true,"col":1,"name-col":11,"end-col":64,"arglist-strs":["[deps & body]"],"varargs-min-arity":1,"doc":"Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function.","row":233},{"fixed-arities":[1],"end-row":128,"meta":{},"name-end-col":17,"index":0,"name-end-row":123,"name-row":123,"ns":"helix.hooks","name":"wrap-fx","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L123","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":28,"arglist-strs":["[f]"],"row":123},{"end-row":192,"meta":{},"name-end-col":21,"index":0,"name-end-row":177,"name-row":177,"ns":"helix.hooks","name":"use-effect","defined-by":"cljs.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L177","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","macro":true,"col":1,"name-col":11,"end-col":75,"arglist-strs":["[deps & body]"],"varargs-min-arity":1,"doc":"Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined.","row":177},{"fixed-arities":[1],"end-row":132,"meta":{},"name-end-col":19,"index":0,"name-end-row":131,"name-row":131,"ns":"helix.hooks","name":"simple-body?","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L131","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","col":1,"name-col":7,"end-col":51,"arglist-strs":["[body]"],"row":131},{"fixed-arities":[1,2],"end-row":230,"meta":{},"name-end-col":28,"index":0,"name-end-row":223,"name-row":223,"ns":"helix.hooks","name":"use-layout-effect*","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L223","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":60,"arglist-strs":["[f]","[f deps]"],"doc":"Like `use-effect*` but instead calls react/useLayoutEffect.","row":223},{"end-row":305,"meta":{},"name-end-col":32,"index":0,"name-end-row":292,"name-row":292,"ns":"helix.hooks","name":"use-imperative-handle","defined-by":"cljs.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L292","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[ref deps & body]"],"varargs-min-arity":2,"doc":"Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function.","row":292},{"end-row":30,"meta":{},"name-end-col":27,"index":0,"name-end-row":29,"name-row":29,"ns":"helix.hooks","name":"IStateUpdater","defined-by":"cljs.core/defprotocol","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L29","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","col":1,"name-col":14,"end-col":79,"doc":"Protocol that marks a type as callable when passed to a use-state setter.","row":29},{"fixed-arities":[5],"end-row":167,"meta":{},"name-end-col":25,"index":0,"name-end-row":136,"name-row":136,"ns":"helix.hooks","name":"deps-macro-body","defined-by":"clojure.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L136","lang":["clj"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":62,"arglist-strs":["[env deps body simple-body-ok? deps->hook-body]"],"row":136},{"end-row":219,"meta":{},"name-end-col":28,"index":0,"name-end-row":209,"name-row":209,"ns":"helix.hooks","name":"use-layout-effect","defined-by":"cljs.core/defmacro","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L209","lang":["clj","cljs"],"filename":"/src/helix/hooks.cljc","macro":true,"col":1,"name-col":11,"end-col":82,"arglist-strs":["[deps & body]"],"varargs-min-arity":1,"doc":"Like `use-effect` but instead calls react/useLayoutEffect.","row":209},{"end-row":24,"meta":{},"name-end-col":25,"index":0,"name-end-row":24,"name-row":24,"ns":"helix.hooks","name":"raw-use-memo","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L24","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":8,"name-col":13,"end-col":40,"row":24},{"fixed-arities":[1,2],"end-row":264,"meta":{},"name-end-col":19,"index":0,"name-end-row":256,"name-row":256,"ns":"helix.hooks","name":"use-memo*","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L256","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":42,"arglist-strs":["[f]","[f deps]"],"doc":"Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.","row":256},{"end-row":323,"meta":{},"name-end-col":24,"index":0,"name-end-row":321,"name-row":321,"ns":"helix.hooks","name":"use-debug-value","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L321","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":9,"end-col":26,"doc":"Just react/useDebugValue","row":321},{"fixed-arities":[1],"end-row":63,"meta":{},"name-end-col":19,"index":0,"name-end-row":40,"name-row":40,"ns":"helix.hooks","name":"use-state","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L40","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":21,"arglist-strs":["[initial]"],"doc":"Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```","row":40},{"fixed-arities":[1],"end-row":174,"meta":{},"name-end-col":30,"index":0,"name-end-row":169,"name-row":169,"ns":"helix.hooks","name":"determine-deps","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L169","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":10,"name-col":16,"end-col":31,"arglist-strs":["[deps]"],"row":169},{"fixed-arities":[1],"end-row":416,"meta":{},"name-end-col":26,"index":0,"name-end-row":327,"name-row":327,"ns":"helix.hooks","name":"use-subscription","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L327","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":37,"arglist-strs":["[{:keys [get-current-value subscribe]}]"],"doc":"Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some wayâ€“\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`.","row":327},{"fixed-arities":[1,2],"end-row":289,"meta":{},"name-end-col":23,"index":0,"name-end-row":281,"name-row":281,"ns":"helix.hooks","name":"use-callback*","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L281","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":46,"arglist-strs":["[f]","[f deps]"],"doc":"`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.","row":281},{"end-row":25,"meta":{},"name-end-col":29,"index":0,"name-end-row":25,"name-row":25,"ns":"helix.hooks","name":"raw-use-callback","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L25","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":8,"name-col":13,"end-col":48,"row":25},{"end-row":22,"meta":{},"name-end-col":27,"index":0,"name-end-row":22,"name-row":22,"ns":"helix.hooks","name":"raw-use-effect","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L22","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":8,"name-col":13,"end-col":44,"row":22},{"end-row":26,"meta":{},"name-end-col":38,"index":0,"name-end-row":26,"name-row":26,"ns":"helix.hooks","name":"raw-use-imperative-handle","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L26","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":8,"name-col":13,"end-col":65,"row":26},{"fixed-arities":[3,2],"end-row":317,"meta":{},"name-end-col":32,"index":0,"name-end-row":309,"name-row":309,"ns":"helix.hooks","name":"use-imperative-handle*","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L309","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":58,"arglist-strs":["[ref f]","[ref f deps]"],"doc":"Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`","row":309},{"end-row":23,"meta":{},"name-end-col":34,"index":0,"name-end-row":23,"name-row":23,"ns":"helix.hooks","name":"raw-use-layout-effect","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L23","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":8,"name-col":13,"end-col":57,"row":23},{"end-row":118,"meta":{},"name-end-col":20,"index":0,"name-end-row":116,"name-row":116,"ns":"helix.hooks","name":"use-context","defined-by":"cljs.core/def","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L116","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":9,"end-col":23,"doc":"Just react/useContext","row":116},{"fixed-arities":[1,2],"end-row":206,"meta":{},"name-end-col":21,"index":0,"name-end-row":199,"name-row":199,"ns":"helix.hooks","name":"use-effect*","defined-by":"cljs.core/defn","git-source":"https://github.com/lilactown/helix/blob/0.1.10/src/helix/hooks.cljc#L199","lang":["cljs"],"filename":"/src/helix/hooks.cljc","col":4,"name-col":10,"end-col":54,"arglist-strs":["[f]","[f deps]"],"doc":"Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.","row":199}]