[{"end-row":3696,"meta":{},"name-end-col":38,"name-end-row":3695,"private":true,"name-row":3695,"ns":"clojure.core","name":"system-newline","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3695","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":24,"end-col":44,"row":3695},{"fixed-arities":[1,3,2],"end-row":7340,"meta":{},"name-end-col":20,"name-end-row":7308,"name-row":7308,"added":"1.2","ns":"clojure.core","name":"partition-all","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7308","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":66,"arglist-strs":["[n]","[n coll]","[n step coll]"],"doc":"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.","row":7308},{"end-row":7621,"meta":{},"name-end-col":17,"name-end-row":7606,"name-row":7606,"added":"1.5","ns":"clojure.core","name":"cond->","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7606","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":27,"arglist-strs":["[expr & clauses]"],"varargs-min-arity":1,"doc":"Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.","row":7606},{"fixed-arities":[1],"end-row":4177,"meta":{},"name-end-col":13,"name-end-row":4172,"name-row":4172,"added":"1.0","ns":"clojure.core","name":"ns-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4172","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[ns]"],"doc":"Returns a map of all the mappings for the namespace.","row":4172},{"fixed-arities":[1,2],"end-row":5308,"meta":{},"name-end-col":18,"name-end-row":5302,"name-row":5302,"added":"1.0","ns":"clojure.core","name":"float-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5302","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of floats","row":5302},{"fixed-arities":[1,2],"end-row":2494,"meta":{},"name-end-col":22,"name-end-row":2487,"name-row":2487,"added":"1.1","ns":"clojure.core","name":"ref-min-history","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2487","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[ref]","[ref n]"],"doc":"Gets the min-history of a ref, or sets it and returns the ref","row":2487},{"fixed-arities":[1],"end-row":574,"meta":{},"name-end-col":15,"name-end-row":570,"name-row":570,"added":"1.0","ns":"clojure.core","name":"keyword?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L570","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[x]"],"doc":"Return true if x is a Keyword","row":570},{"fixed-arities":[1],"end-row":5411,"meta":{},"name-end-col":17,"name-end-row":5408,"name-row":5408,"added":"1.0","ns":"clojure.core","name":"longs","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5408","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":44,"arglist-strs":["[xs]"],"doc":"Casts to long[]","row":5408},{"fixed-arities":[0,1,2],"end-row":996,"meta":{},"name-end-col":8,"name-end-row":986,"name-row":986,"added":"1.2","ns":"clojure.core","name":"+","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L986","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'","row":986},{"fixed-arities":[0],"end-row":6142,"meta":{},"name-end-col":18,"name-end-row":6139,"name-row":6139,"added":"1.0","ns":"clojure.core","name":"loaded-libs","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6139","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[]"],"doc":"Returns a sorted set of symbols naming the currently loaded libs","row":6139},{"end-row":492,"meta":{},"name-end-col":13,"name-end-row":170,"name-row":170,"ns":"clojure.core","name":"Vec","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L170","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":2,"row":170},{"fixed-arities":[1],"end-row":411,"meta":{},"name-end-col":14,"name-end-row":406,"name-row":406,"added":"1.6","ns":"clojure.core","name":"record?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L406","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[x]"],"doc":"Returns true if x is a record","row":406},{"fixed-arities":[1,2],"end-row":2949,"meta":{},"name-end-col":11,"name-end-row":2926,"name-row":2926,"added":"1.0","ns":"clojure.core","name":"drop","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2926","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.","row":2926},{"fixed-arities":[2],"end-row":2398,"meta":{},"name-end-col":13,"name-end-row":2393,"name-row":2393,"added":"1.0","ns":"clojure.core","name":"reset!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2393","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[atom newval]"],"doc":"Sets the value of atom to newval without regard for the\n  current value. Returns newval.","row":2393},{"fixed-arities":[1],"end-row":2116,"meta":{},"name-end-col":35,"name-end-row":2112,"name-row":2112,"added":"1.5","ns":"clojure.core","name":"set-agent-send-off-executor!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2112","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[executor]"],"doc":"Sets the ExecutorService to be used by send-off","row":2112},{"fixed-arities":[1],"end-row":528,"meta":{},"name-end-col":19,"name-end-row":526,"private":true,"name-row":526,"ns":"clojure.core","name":"super-chain","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L526","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":48,"arglist-strs":["[c]"],"row":526},{"fixed-arities":[1],"end-row":8088,"meta":{},"name-end-col":20,"name-end-row":8079,"name-row":8079,"added":"1.11","ns":"clojure.core","name":"parse-boolean","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8079","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[s]"],"doc":"Parse strings \"true\" or \"false\" and return a boolean, or nil if invalid","row":8079},{"end-row":7117,"meta":{},"name-end-col":18,"name-end-row":7111,"name-row":7111,"added":"1.0","ns":"clojure.core","name":"pvalues","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7111","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":44,"arglist-strs":["[& exprs]"],"varargs-min-arity":0,"doc":"Returns a lazy sequence of the values of the exprs, which are\n  evaluated in parallel","row":7111},{"fixed-arities":[1,3,2],"end-row":7542,"meta":{},"name-end-col":14,"name-end-row":7504,"name-row":7504,"added":"1.3","ns":"clojure.core","name":"some-fn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7504","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":60,"arglist-strs":["[p]","[p1 p2]","[p1 p2 p3]","[p1 p2 p3 & ps]"],"varargs-min-arity":3,"doc":"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.","row":7504},{"fixed-arities":[1],"end-row":283,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":9,"name-end-row":279,"name-row":279,"added":"1.0","ns":"clojure.core","name":"butlast","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L274","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":29,"arglist-strs":["[s]"],"doc":"Return a seq of all but the last item in coll, in linear time","row":274},{"fixed-arities":[4],"end-row":5288,"meta":{},"name-end-col":15,"name-end-row":5274,"name-row":5274,"added":"1.0","ns":"clojure.core","name":"amap","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5274","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":18,"arglist-strs":["[a idx ret expr]"],"doc":"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting \n  each element of ret to the evaluation of expr, returning the new \n  array ret.","row":5274},{"fixed-arities":[2],"end-row":4287,"meta":{},"name-end-col":17,"name-end-row":4282,"name-row":4282,"added":"1.0","ns":"clojure.core","name":"ns-unalias","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4282","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[ns sym]"],"doc":"Removes the alias for the symbol from the namespace.","row":4282},{"fixed-arities":[0,1,2],"end-row":984,"meta":{},"name-end-col":9,"name-end-row":974,"name-row":974,"added":"1.0","ns":"clojure.core","name":"+'","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L974","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the sum of nums. (+') returns 0. Supports arbitrary precision.\n  See also: +","row":974},{"fixed-arities":[1],"end-row":1811,"meta":{},"name-end-col":25,"name-end-row":1806,"name-row":1806,"added":"1.2","ns":"clojure.core","name":"remove-all-methods","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1806","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[multifn]"],"doc":"Removes all of the methods of multimethod.","row":1806},{"fixed-arities":[1],"end-row":98,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":8,"name-end-row":98,"name-row":98,"added":"1.0","ns":"clojure.core","name":"second","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L93","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":51,"arglist-strs":["[x]"],"doc":"Same as (first (next x))","row":93},{"end-row":7906,"meta":{},"name-end-col":60,"name-end-row":7901,"name-row":7901,"added":"1.5","ns":"clojure.core","name":"*default-data-reader-fn*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7901","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":36,"end-col":7,"doc":"When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments,\n  the tag and the value.  If *default-data-reader-fn* is nil (the\n  default), an exception will be thrown for the unknown tag.","row":7901},{"fixed-arities":[1],"end-row":3485,"meta":{},"name-end-col":11,"name-end-row":3481,"name-row":3481,"added":"1.0","ns":"clojure.core","name":"long","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3481","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[x]"],"doc":"Coerce to long","row":3481},{"fixed-arities":[3],"end-row":4971,"meta":{},"name-end-col":15,"name-end-row":4956,"name-row":4956,"added":"1.0","ns":"clojure.core","name":"tree-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4956","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[branch? children root]"],"doc":"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.","row":4956},{"fixed-arities":[1,2],"end-row":5725,"meta":{},"name-end-col":16,"name-end-row":5710,"name-row":5710,"added":"1.0","ns":"clojure.core","name":"distinct?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5710","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns true if no two of the arguments are =","row":5710},{"fixed-arities":[1],"end-row":656,"meta":{},"name-end-col":22,"name-end-row":643,"private":true,"name-row":643,"ns":"clojure.core","name":"asm-type","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L643","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":14,"end-col":30,"arglist-strs":["[c]"],"doc":"Returns an asm Type object for c, which may be a primitive class\n  (such as Integer/TYPE), any other class (such as Double), or a\n  fully-qualified class name given as a string or symbol\n  (such as 'java.lang.String)","row":643},{"fixed-arities":[1],"end-row":7991,"meta":{},"name-end-col":14,"name-end-row":7982,"name-row":7982,"added":"1.10","ns":"clojure.core","name":"add-tap","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7982","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[f]"],"doc":"adds f, a fn of one argument, to the tap set. This function will be called with anything sent via tap>.\n  This function may (briefly) block (e.g. for streams), and will never impede calls to tap>,\n  but blocking indefinitely may cause tap values to be dropped.\n  Remember f in order to remove-tap","row":7982},{"fixed-arities":[2],"end-row":1289,"meta":{},"name-end-col":10,"name-end-row":1283,"name-row":1283,"added":"1.0","ns":"clojure.core","name":"rem","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1283","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[num div]"],"doc":"remainder of dividing numerator by denominator.","row":1283},{"fixed-arities":[1,2],"end-row":604,"meta":{},"name-end-col":13,"name-end-row":591,"name-row":591,"added":"1.0","ns":"clojure.core","name":"symbol","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L591","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[name]","[ns name]"],"doc":"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.","row":591},{"fixed-arities":[1],"end-row":6307,"meta":{},"name-end-col":18,"name-end-row":6303,"name-row":6303,"added":"1.0","ns":"clojure.core","name":"reversible?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6303","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[coll]"],"doc":"Returns true if coll implements Reversible","row":6303},{"fixed-arities":[2],"end-row":85,"meta":{},"name-end-col":19,"name-end-row":83,"name-row":83,"ns":"clojure.core","name":"print-simple","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L83","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[o w]"],"row":83},{"fixed-arities":[1],"end-row":3000,"meta":{},"name-end-col":12,"name-end-row":2996,"name-row":2996,"added":"1.0","ns":"clojure.core","name":"cycle","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2996","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[coll]"],"doc":"Returns a lazy (infinite!) sequence of repetitions of the items in coll.","row":2996},{"fixed-arities":[1],"end-row":62,"meta":{},"name-end-col":17,"name-end-row":59,"private":true,"name-row":59,"ns":"clojure.core","name":"ctor-sigs","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L59","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":50,"arglist-strs":["[super]"],"row":59},{"end-row":3290,"meta":{},"name-end-col":12,"name-end-row":3275,"name-row":3275,"added":"1.0","ns":"clojure.core","name":"await","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3275","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[& agents]"],"varargs-min-arity":0,"doc":"Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true or shutdown-agents was called.","row":3275},{"fixed-arities":[3],"end-row":102,"meta":{},"name-end-col":17,"name-end-row":97,"name-row":97,"ns":"clojure.core","name":"print-ctor","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L97","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[o print-args w]"],"row":97},{"fixed-arities":[3],"end-row":5951,"meta":{},"name-end-col":16,"name-end-row":5941,"private":true,"name-row":5941,"ns":"clojure.core","name":"load-all","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5941","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[lib need-ns require]"],"doc":"Loads a lib given its name and forces a load of any libs it directly or\n  indirectly loads. If need-ns, ensures that the associated namespace\n  exists after loading. If require, records the load so any duplicate loads\n  can be skipped.","row":5941},{"fixed-arities":[2],"end-row":4920,"meta":{},"name-end-col":17,"name-end-row":4911,"name-row":4911,"added":"1.0","ns":"clojure.core","name":"re-matches","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4911","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[re s]"],"doc":"Returns the match, if any, of string to pattern, using\n  java.util.regex.Matcher.matches().  Uses re-groups to return the\n  groups.","row":4911},{"end-row":6638,"meta":{},"name-end-col":37,"name-end-row":6638,"private":true,"name-row":6638,"ns":"clojure.core","name":"max-switch-table-size","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6638","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":71,"row":6638},{"end-row":300,"meta":{},"name-end-col":22,"name-end-row":295,"name-row":295,"added":"1.0","ns":"clojure.core","name":"construct-proxy","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L295","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":62,"arglist-strs":["[c & ctor-args]"],"varargs-min-arity":1,"doc":"Takes a proxy class and any arguments for its superclass ctor and\n  creates and returns an instance of the proxy.","row":295},{"end-row":4597,"meta":{},"name-end-col":13,"name-end-row":4535,"name-row":4535,"added":"1.0","ns":"clojure.core","name":"fn","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4535","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":24,"arglist-strs":["[& sigs]"],"varargs-min-arity":0,"doc":"params => positional-params*, or positional-params* & rest-param\n  positional-param => binding-form\n  rest-param => binding-form\n  binding-form => name, or destructuring-form\n\n  Defines a function.\n\n  See https://clojure.org/reference/special_forms#fn for more information","row":4535},{"fixed-arities":[1],"end-row":1203,"meta":{},"name-end-col":23,"name-end-row":1198,"name-row":1198,"added":"1.0","ns":"clojure.core","name":"unchecked-negate","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1198","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[x]"],"doc":"Returns the negation of x, a long.\n  Note - uses a primitive operator subject to overflow.","row":1198},{"end-row":47,"meta":{},"name-end-col":4,"name-end-row":45,"name-row":45,"added":"1.0","ns":"clojure.core","name":"fn","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L42","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":2,"end-col":57,"row":42},{"fixed-arities":[1],"end-row":568,"meta":{},"name-end-col":16,"name-end-row":564,"name-row":564,"added":"1.2","ns":"clojure.core","name":"extenders","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L564","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[protocol]"],"doc":"Returns a collection of the types explicitly extending protocol","row":564},{"end-row":102,"meta":{},"name-end-col":34,"name-end-row":85,"private":true,"name-row":85,"ns":"clojure.core","name":"prim->class","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L85","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":23,"end-col":36,"row":85},{"fixed-arities":[1],"end-row":761,"meta":{},"name-end-col":13,"name-end-row":757,"name-row":757,"added":"1.0","ns":"clojure.core","name":"delay?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L757","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"returns true if x is a Delay created with delay","row":757},{"fixed-arities":[1],"end-row":7604,"meta":{},"name-end-col":16,"name-end-row":7601,"name-row":7601,"added":"1.3","ns":"clojure.core","name":"realized?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7601","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[x]"],"doc":"Returns true if a value has been produced for a promise, delay, future or lazy sequence.","row":7601},{"fixed-arities":[2],"end-row":1342,"meta":{},"name-end-col":18,"name-end-row":1334,"name-row":1334,"added":"1.0","ns":"clojure.core","name":"bit-and-not","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1334","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Bitwise and with complement","row":1334},{"end-row":2458,"meta":{},"name-end-col":14,"name-end-row":2439,"name-row":2439,"added":"1.0","ns":"clojure.core","name":"commute","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2439","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[ref fun & args]"],"varargs-min-arity":2,"doc":"Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set.","row":2439},{"fixed-arities":[2],"end-row":875,"meta":{},"name-end-col":28,"name-end-row":870,"private":true,"name-row":870,"ns":"clojure.core","name":"emit-extend-protocol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L870","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":24,"arglist-strs":["[p specs]"],"row":870},{"fixed-arities":[1],"end-row":49,"meta":{},"name-end-col":27,"name-end-row":42,"private":true,"name-row":42,"ns":"clojure.core","name":"non-private-methods","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L42","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":42,"arglist-strs":["[c]"],"row":42},{"end-row":5776,"meta":{},"name-end-col":13,"name-end-row":5771,"name-row":5771,"added":"1.0","ns":"clojure.core","name":"printf","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5771","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[fmt & args]"],"varargs-min-arity":1,"doc":"Prints formatted output, as per format","row":5771},{"fixed-arities":[4,3,2],"end-row":2383,"meta":{},"name-end-col":17,"name-end-row":2374,"name-row":2374,"added":"1.9","ns":"clojure.core","name":"swap-vals!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2374","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":106,"arglist-strs":["[atom f]","[atom f x]","[atom f x y]","[atom f x y & args]"],"varargs-min-arity":4,"doc":"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.","row":2374},{"fixed-arities":[1],"end-row":5229,"meta":{},"name-end-col":26,"name-end-row":5220,"name-row":5220,"added":"1.6","ns":"clojure.core","name":"hash-unordered-coll","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5220","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[coll]"],"doc":"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.","row":5220},{"fixed-arities":[2],"end-row":5909,"meta":{},"name-end-col":17,"name-end-row":5904,"private":true,"name-row":5904,"ns":"clojure.core","name":"prependss","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5904","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[x coll]"],"doc":"Prepends a symbol or a seq to coll","row":5904},{"fixed-arities":[1],"end-row":2421,"meta":{},"name-end-col":20,"name-end-row":2417,"name-row":2417,"added":"1.0","ns":"clojure.core","name":"get-validator","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2417","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[iref]"],"doc":"Gets the validator-fn for a var/ref/agent/atom.","row":2417},{"fixed-arities":[1],"end-row":3597,"meta":{},"name-end-col":18,"name-end-row":3591,"name-row":3591,"added":"1.2","ns":"clojure.core","name":"denominator","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3591","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[r]"],"doc":"Returns the denominator part of a Ratio.","row":3591},{"fixed-arities":[4,3,2,5],"end-row":675,"meta":{},"name-end-col":12,"name-end-row":662,"name-row":662,"added":"1.0","ns":"clojure.core","name":"apply","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L662","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":73,"arglist-strs":["[f args]","[f x args]","[f x y args]","[f x y z args]","[f a b c d & args]"],"varargs-min-arity":5,"doc":"Applies fn f to the argument list formed by prepending intervening arguments to args.","row":662},{"fixed-arities":[2],"end-row":1568,"meta":{},"name-end-col":18,"name-end-row":1555,"name-row":1555,"added":"1.0","ns":"clojure.core","name":"select-keys","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1555","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[map keyseq]"],"doc":"Returns a map containing only those entries in map whose key is in keys","row":1555},{"end-row":7109,"meta":{},"name-end-col":13,"name-end-row":7104,"name-row":7104,"added":"1.0","ns":"clojure.core","name":"pcalls","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7104","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[& fns]"],"varargs-min-arity":0,"doc":"Executes the no-arg fns in parallel, returning a lazy sequence of\n  their values","row":7104},{"fixed-arities":[1],"end-row":5754,"meta":{},"name-end-col":19,"name-end-row":5746,"name-row":5746,"added":"1.0","ns":"clojure.core","name":"iterator-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5746","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[iter]"],"doc":"Returns a seq on a java.util.Iterator. Note that most collections\n  providing iterators implement Iterable and thus support seq directly.\n  Seqs cache values, thus iterator-seq should not be used on any\n  iterator that repeatedly returns the same mutable object.","row":5746},{"end-row":7831,"meta":{},"name-end-col":16,"name-end-row":7786,"name-row":7786,"added":"1.11","ns":"clojure.core","name":"iteration","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7786","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[step & {:keys [somef vf kf initk] :or {vf identity kf identity somef some? initk nil}}]"],"varargs-min-arity":1,"doc":"Creates a seqable/reducible via repeated calls to step,\n  a function of some (continuation token) 'k'. The first call to step\n  will be passed initk, returning 'ret'. Iff (somef ret) is true,\n  (vf ret) will be included in the iteration, else iteration will\n  terminate and vf/kf will not be called. If (kf ret) is non-nil it\n  will be passed to the next step call, else iteration will terminate.\n\n  This can be used e.g. to consume APIs that return paginated or batched data.\n\n   step - (possibly impure) fn of 'k' -> 'ret'\n\n   :somef - fn of 'ret' -> logical true/false, default 'some?'\n   :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n   :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n   :initk - the first value passed to step, default 'nil'\n\n  It is presumed that step with non-initk is unreproducible/non-idempotent.\n  If step with initk is unreproducible it is on the consumer to not consume twice.","row":7786},{"end-row":4070,"meta":{},"name-end-col":13,"name-end-row":4063,"name-row":4063,"added":"1.0","ns":"clojure.core","name":"struct","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4063","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[s & vals]"],"varargs-min-arity":1,"doc":"Returns a new structmap instance with the keys of the\n  structure-basis. vals must be supplied for basis keys in order -\n  where values are not supplied they will default to nil.","row":4063},{"fixed-arities":[1],"end-row":1438,"meta":{},"name-end-col":15,"name-end-row":1434,"name-row":1434,"added":"1.9","ns":"clojure.core","name":"nat-int?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1434","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[x]"],"doc":"Return true if x is a non-negative fixed precision integer","row":1434},{"end-row":4954,"meta":{},"name-end-col":16,"name-end-row":4950,"name-row":4950,"added":"1.0","ns":"clojure.core","name":"defn-","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4950","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":76,"arglist-strs":["[name & decls]"],"varargs-min-arity":2,"doc":"same as defn, yielding non-public def","row":4950},{"end-row":7664,"meta":{},"name-end-col":17,"name-end-row":7652,"name-row":7652,"added":"1.5","ns":"clojure.core","name":"some->","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7652","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":27,"arglist-strs":["[expr & forms]"],"varargs-min-arity":1,"doc":"When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc","row":7652},{"fixed-arities":[2],"end-row":72,"meta":{},"name-end-col":21,"name-end-row":68,"private":true,"name-row":68,"ns":"clojure.core","name":"overload-name","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L68","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":26,"arglist-strs":["[mname pclasses]"],"row":68},{"fixed-arities":[1],"end-row":8053,"meta":{},"name-end-col":17,"name-end-row":8044,"name-row":8044,"added":"1.11","ns":"clojure.core","name":"parse-long","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8044","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[s]"],"doc":"Parse string of decimal digits with optional leading -/+ and return a\n  Long value, or nil if parse fails","row":8044},{"fixed-arities":[1],"end-row":1625,"meta":{},"name-end-col":14,"name-end-row":1620,"name-row":1620,"added":"1.0","ns":"clojure.core","name":"boolean","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1620","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Coerce to boolean","row":1620},{"fixed-arities":[1],"end-row":3545,"meta":{},"name-end-col":21,"name-end-row":3541,"name-row":3541,"added":"1.3","ns":"clojure.core","name":"unchecked-long","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3541","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[x]"],"doc":"Coerce to long. Subject to rounding or truncation.","row":3541},{"fixed-arities":[1],"end-row":55,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":7,"name-end-row":55,"name-row":55,"added":"1.0","ns":"clojure.core","name":"first","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L49","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":68,"arglist-strs":["[coll]"],"doc":"Returns the first item in the collection. Calls seq on its\n    argument. If coll is nil, returns nil.","row":49},{"fixed-arities":[3,2],"end-row":4371,"meta":{},"name-end-col":17,"name-end-row":4360,"name-row":4360,"added":"1.0","ns":"clojure.core","name":"ns-resolve","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4360","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[ns sym]","[ns env sym]"],"doc":"Returns the var or Class to which a symbol will be resolved in the\n  namespace (unless found in the environment), else nil.  Note that\n  if the symbol is fully qualified, the var/Class to which it resolves\n  need not be present in the namespace.","row":4360},{"fixed-arities":[2],"end-row":4273,"meta":{},"name-end-col":12,"name-end-row":4265,"name-row":4265,"added":"1.0","ns":"clojure.core","name":"alias","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4265","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[alias namespace-sym]"],"doc":"Add an alias in the current namespace to another\n  namespace. Arguments are two symbols: the alias to be used, and\n  the symbolic name of the target namespace. Use :as in the ns macro in preference\n  to calling this directly.","row":4265},{"fixed-arities":[1],"end-row":1182,"meta":{},"name-end-col":24,"name-end-row":1177,"name-row":1177,"added":"1.0","ns":"clojure.core","name":"unchecked-dec-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1177","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]"],"doc":"Returns a number one less than x, an int.\n  Note - uses a primitive operator subject to overflow.","row":1177},{"fixed-arities":[2],"end-row":715,"meta":{},"name-end-col":26,"name-end-row":712,"name-row":712,"ns":"clojure.core","name":"chunk-cons","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L712","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":45,"arglist-strs":["[chunk rest]"],"row":712},{"end-row":515,"meta":{},"name-end-col":26,"name-end-row":507,"private":true,"name-row":507,"ns":"clojure.core","name":"ams","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L507","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":23,"end-col":33,"row":507},{"fixed-arities":[2],"end-row":4881,"meta":{},"name-end-col":17,"name-end-row":4874,"name-row":4874,"added":"1.0","ns":"clojure.core","name":"re-matcher","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4874","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[re s]"],"doc":"Returns an instance of java.util.regex.Matcher, for use, e.g. in\n  re-find.","row":4874},{"fixed-arities":[1],"end-row":1655,"meta":{},"name-end-col":22,"name-end-row":1652,"name-row":1652,"added":"1.9","ns":"clojure.core","name":"simple-keyword?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1652","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[x]"],"doc":"Return true if x is a keyword without a namespace","row":1652},{"fixed-arities":[1],"end-row":519,"meta":{},"name-end-col":12,"name-end-row":514,"name-row":514,"added":"1.0","ns":"clojure.core","name":"true?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L514","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[x]"],"doc":"Returns true if x is the value true, false otherwise.","row":514},{"fixed-arities":[1],"end-row":332,"meta":{},"name-end-col":21,"name-end-row":328,"name-row":328,"added":"1.0","ns":"clojure.core","name":"proxy-mappings","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L328","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[proxy]"],"doc":"Takes a proxy instance and returns the proxy's fn map.","row":328},{"fixed-arities":[2],"end-row":7857,"meta":{},"name-end-col":25,"name-end-row":7852,"name-row":7852,"added":"1.7","ns":"clojure.core","name":"reader-conditional","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7852","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[form splicing?]"],"doc":"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.","row":7852},{"fixed-arities":[2],"end-row":1380,"meta":{},"name-end-col":22,"name-end-row":1376,"name-row":1376,"added":"1.0","ns":"clojure.core","name":"bit-shift-right","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1376","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[x n]"],"doc":"Bitwise shift right","row":1376},{"fixed-arities":[1,2],"end-row":5099,"meta":{},"name-end-col":14,"name-end-row":5083,"name-row":5083,"added":"1.0","ns":"clojure.core","name":"replace","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5083","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[smap]","[smap coll]"],"doc":"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.","row":5083},{"fixed-arities":[1],"end-row":767,"meta":{},"name-end-col":12,"name-end-row":763,"name-row":763,"added":"1.0","ns":"clojure.core","name":"force","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L763","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"If x is a Delay, returns the (possibly cached) value of its expression, else returns x","row":763},{"fixed-arities":[1],"end-row":889,"meta":{},"name-end-col":10,"name-end-row":884,"name-row":884,"added":"1.0","ns":"clojure.core","name":"int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L884","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Coerce to int","row":884},{"end-row":3870,"meta":{},"name-end-col":15,"name-end-row":3853,"name-row":3853,"added":"1.0","ns":"clojure.core","name":"doto","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3853","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":16,"arglist-strs":["[x & forms]"],"varargs-min-arity":1,"doc":"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))","row":3853},{"end-row":20,"meta":{},"name-end-col":16,"name-end-row":20,"name-row":20,"ns":"clojure.core","name":"EMPTY-NODE","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L20","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":6,"end-col":50,"row":20},{"fixed-arities":[1],"end-row":5355,"meta":{},"name-end-col":19,"name-end-row":5350,"name-row":5350,"added":"1.2","ns":"clojure.core","name":"object-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5350","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[size-or-seq]"],"doc":"Creates an array of objects","row":5350},{"fixed-arities":[3,2],"end-row":6194,"meta":{},"name-end-col":13,"name-end-row":6177,"name-row":6177,"added":"1.2","ns":"clojure.core","name":"get-in","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6177","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[m ks]","[m ks not-found]"],"doc":"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key\n  is not present, or the not-found value if supplied.","row":6177},{"fixed-arities":[0,1,2],"end-row":3367,"meta":{},"name-end-col":12,"name-end-row":3359,"name-row":3359,"added":"1.1","ns":"clojure.core","name":"conj!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3359","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[]","[coll]","[coll x]"],"doc":"Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.","row":3359},{"fixed-arities":[2],"end-row":7226,"meta":{},"name-end-col":15,"name-end-row":7214,"name-row":7214,"added":"1.2","ns":"clojure.core","name":"group-by","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7214","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[f coll]"],"doc":"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.","row":7214},{"fixed-arities":[2],"end-row":1323,"meta":{},"name-end-col":13,"name-end-row":1316,"name-row":1316,"added":"1.0","ns":"clojure.core","name":"bit-or","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1316","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Bitwise or","row":1316},{"fixed-arities":[6],"end-row":165,"meta":{},"name-end-col":16,"name-end-row":59,"name-row":59,"ns":"clojure.core","name":"->VecSeq","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L59","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":26,"arglist-strs":["[am vec anode i offset _meta]"],"row":59},{"fixed-arities":[1,2],"end-row":5332,"meta":{},"name-end-col":17,"name-end-row":5326,"name-row":5326,"added":"1.1","ns":"clojure.core","name":"char-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5326","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":85,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of chars","row":5326},{"fixed-arities":[1],"end-row":686,"meta":{},"name-end-col":26,"name-end-row":658,"private":true,"name-row":658,"ns":"clojure.core","name":"generate-interface","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L658","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[{:keys [name extends methods]}]"],"row":658},{"fixed-arities":[1],"end-row":211,"meta":{"arglists":["quote",[["obj"]]]},"name-end-col":6,"name-end-row":209,"name-row":209,"added":"1.0","ns":"clojure.core","name":"meta","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L204","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":46,"arglist-strs":["[x]"],"doc":"Returns the metadata of obj, returns nil if there is no metadata.","row":204},{"end-row":4646,"meta":{},"name-end-col":19,"name-end-row":4638,"name-row":4638,"added":"1.0","ns":"clojure.core","name":"lazy-cat","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4638","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":47,"arglist-strs":["[& colls]"],"varargs-min-arity":0,"doc":"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed. \n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))","row":4638},{"fixed-arities":[1],"end-row":6832,"meta":{},"name-end-col":12,"protocol-ns":"clojure.core","name-end-row":6832,"name-row":6832,"ns":"clojure.core","name":"inst-ms*","defined-by":"clojure.core/defprotocol","protocol-name":"Inst","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6832","lang":[],"filename":"/src/clj/clojure/core.clj","col":3,"name-col":4,"end-col":20,"arglist-strs":["[inst]"],"row":6832},{"end-row":6137,"meta":{},"name-end-col":10,"name-end-row":6128,"name-row":6128,"added":"1.0","ns":"clojure.core","name":"use","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6128","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[& args]"],"varargs-min-arity":0,"doc":"Like 'require, but also refers to each lib's namespace using\n  clojure.core/refer. Use :use in the ns macro in preference to calling\n  this directly.\n\n  'use accepts additional options in libspecs: :exclude, :only, :rename.\n  The arguments and semantics for :exclude, :only, and :rename are the same\n  as those documented for clojure.core/refer.","row":6128},{"end-row":3666,"meta":{},"name-end-col":23,"name-end-row":3664,"name-row":3664,"ns":"clojure.core","name":"print-method","defined-by":"clojure.core/defmulti","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3664","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":11,"end-col":60,"row":3664},{"fixed-arities":[3],"end-row":25,"meta":{},"name-end-col":12,"protocol-ns":"clojure.core","name-end-row":25,"name-row":25,"ns":"clojure.core","name":"pushTail","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L25","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":86,"arglist-strs":["[level parent tailnode]"],"row":25},{"fixed-arities":[2],"end-row":843,"meta":{},"name-end-col":24,"name-end-row":840,"private":true,"name-row":840,"ns":"clojure.core","name":"emit-extend-type","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L840","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":62,"arglist-strs":["[c specs]"],"row":840},{"fixed-arities":[1],"end-row":112,"meta":{},"name-end-col":24,"name-end-row":104,"private":true,"name-row":104,"ns":"clojure.core","name":"the-class","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L104","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":15,"end-col":43,"arglist-strs":["[x]"],"row":104},{"fixed-arities":[1],"end-row":632,"meta":{},"name-end-col":21,"name-end-row":629,"name-row":629,"ns":"clojure.core","name":"-reset-methods","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L629","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[protocol]"],"row":629},{"fixed-arities":[1],"end-row":5587,"meta":{},"name-end-col":13,"name-end-row":5578,"name-row":5578,"added":"1.0","ns":"clojure.core","name":"supers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5578","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[class]"],"doc":"Returns the immediate and indirect superclasses and interfaces of c, if any","row":5578},{"fixed-arities":[2],"end-row":1374,"meta":{},"name-end-col":21,"name-end-row":1370,"name-row":1370,"added":"1.0","ns":"clojure.core","name":"bit-shift-left","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1370","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[x n]"],"doc":"Bitwise shift left","row":1370},{"fixed-arities":[2],"end-row":3575,"meta":{},"name-end-col":10,"name-end-row":3567,"name-row":3567,"added":"1.0","ns":"clojure.core","name":"mod","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3567","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[num div]"],"doc":"Modulus of num and div. Truncates toward negative infinity.","row":3567},{"fixed-arities":[1],"end-row":25,"meta":{},"name-end-col":21,"name-end-row":23,"private":true,"name-row":23,"ns":"clojure.core","name":"most-specific","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L23","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[rtypes]"],"row":23},{"end-row":2470,"meta":{},"name-end-col":12,"name-end-row":2460,"name-row":2460,"added":"1.0","ns":"clojure.core","name":"alter","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2460","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[ref fun & args]"],"varargs-min-arity":2,"doc":"Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.","row":2460},{"fixed-arities":[2],"end-row":7200,"meta":{},"name-end-col":14,"name-end-row":7195,"name-row":7195,"added":"1.1","ns":"clojure.core","name":"deliver","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7195","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[promise val]"],"doc":"Delivers the supplied value to the promise, releasing any pending\n  derefs. A subsequent call to deliver on a promise will have no effect.","row":7195},{"fixed-arities":[1],"end-row":3527,"meta":{},"name-end-col":22,"name-end-row":3523,"name-row":3523,"added":"1.3","ns":"clojure.core","name":"unchecked-short","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3523","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]"],"doc":"Coerce to short. Subject to rounding or truncation.","row":3523},{"end-row":1988,"meta":{},"name-end-col":18,"name-end-row":1964,"name-row":1964,"added":"1.0","ns":"clojure.core","name":"binding","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1964","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.","row":1964},{"fixed-arities":[1],"end-row":1587,"meta":{},"name-end-col":10,"name-end-row":1582,"name-row":1582,"added":"1.0","ns":"clojure.core","name":"key","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1582","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[e]"],"doc":"Returns the key of the map entry.","row":1582},{"fixed-arities":[],"end-row":490,"meta":{"arglists":["quote",[["name","doc-string?","attr-map?",["params*"],"body"],["name","doc-string?","attr-map?",[["params*"],"body"],"+","attr-map?"]]]},"name-end-col":10,"name-end-row":454,"name-row":454,"added":"1.0","ns":"clojure.core","name":"defmacro","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L446","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":2,"end-col":42,"arglist-strs":["[&form &env name & args]"],"varargs-min-arity":2,"doc":"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.","row":446},{"fixed-arities":[1],"end-row":512,"meta":{},"name-end-col":13,"name-end-row":507,"name-row":507,"added":"1.0","ns":"clojure.core","name":"false?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L507","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x]"],"doc":"Returns true if x is the value false, false otherwise.","row":507},{"fixed-arities":[1],"end-row":1161,"meta":{},"name-end-col":10,"name-end-row":1156,"name-row":1156,"added":"1.2","ns":"clojure.core","name":"dec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1156","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Returns a number one less than num. Does not auto-promote\n  longs, will throw on overflow. See also: dec'","row":1156},{"fixed-arities":[1],"end-row":505,"meta":{},"name-end-col":16,"name-end-row":497,"private":true,"name-row":497,"ns":"clojure.core","name":"mk-am","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L497","lang":[],"filename":"/src/clj/clojure/gvec.clj","macro":true,"col":1,"name-col":11,"end-col":67,"arglist-strs":["[t]"],"row":497},{"fixed-arities":[1],"end-row":1946,"meta":{},"name-end-col":27,"name-end-row":1930,"name-row":1930,"added":"1.1","ns":"clojure.core","name":"push-thread-bindings","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1930","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[bindings]"],"doc":"WARNING: This is a low-level function. Prefer high-level macros like\n  binding where ever possible.\n\n  Takes a map of Var/value pairs. Binds each Var to the associated value for\n  the current thread. Each call *MUST* be accompanied by a matching call to\n  pop-thread-bindings wrapped in a try-finally!\n  \n      (push-thread-bindings bindings)\n      (try\n        ...\n        (finally\n          (pop-thread-bindings)))","row":1930},{"fixed-arities":[0],"end-row":3804,"meta":{},"name-end-col":16,"name-end-row":3797,"name-row":3797,"added":"1.0","ns":"clojure.core","name":"read-line","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3797","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[]"],"doc":"Reads the next line from stream that is the current value of *in* .","row":3797},{"end-row":6327,"meta":{},"name-end-col":4,"name-end-row":6327,"name-row":6327,"added":"1.0","ns":"clojure.core","name":"*3","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6324","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":5,"doc":"bound in a repl thread to the third most recent value printed","row":6324},{"fixed-arities":[0],"end-row":2159,"meta":{},"name-end-col":28,"name-end-row":2150,"name-row":2150,"added":"1.0","ns":"clojure.core","name":"release-pending-sends","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2150","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[]"],"doc":"Normally, actions sent directly or indirectly during another action\n  are held until the action completes (changes the agent's\n  state). This function can be used to dispatch any pending sent\n  actions immediately. This has no impact on actions sent during a\n  transaction, which are still held until commit. If no action is\n  occurring, does nothing. Returns the number of actions dispatched.","row":2150},{"fixed-arities":[1,2],"end-row":3147,"meta":{},"name-end-col":12,"name-end-row":3134,"name-row":3134,"added":"1.0","ns":"clojure.core","name":"dorun","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3134","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[coll]","[n coll]"],"doc":"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.","row":3134},{"fixed-arities":[2],"end-row":3007,"meta":{},"name-end-col":15,"name-end-row":3002,"name-row":3002,"added":"1.0","ns":"clojure.core","name":"split-at","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3002","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[n coll]"],"doc":"Returns a vector of [(take n coll) (drop n coll)]","row":3002},{"end-row":1891,"meta":{},"name-end-col":19,"name-end-row":1878,"name-row":1878,"added":"1.0","ns":"clojure.core","name":"when-let","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1878","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":23,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test","row":1878},{"fixed-arities":[3,2],"end-row":775,"meta":{},"name-end-col":17,"name-end-row":769,"name-row":769,"added":"1.0","ns":"clojure.core","name":"if-not","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L769","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":35,"arglist-strs":["[test then]","[test then else]"],"doc":"Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.","row":769},{"end-row":18,"meta":{},"name-end-col":17,"name-end-row":18,"name-row":18,"ns":"clojure.core","name":"VecNode","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L18","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":29,"row":18},{"end-row":3330,"meta":{},"name-end-col":18,"name-end-row":3314,"name-row":3314,"added":"1.0","ns":"clojure.core","name":"dotimes","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3314","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":43,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.","row":3314},{"fixed-arities":[2],"end-row":7760,"meta":{},"name-end-col":18,"name-end-row":7750,"name-row":7750,"ns":"clojure.core","name":"->Eduction","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7750","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":28,"arglist-strs":["[xform coll]"],"row":7750},{"end-row":3459,"meta":{},"name-end-col":8,"name-end-row":3458,"private":true,"name-row":3458,"ns":"clojure.core","name":"array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3457","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":24,"arglist-strs":["[& items]"],"varargs-min-arity":0,"row":3457},{"fixed-arities":[3],"end-row":5132,"meta":{},"name-end-col":18,"name-end-row":5128,"private":true,"name-row":5128,"ns":"clojure.core","name":"mk-bound-fn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5128","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":66,"arglist-strs":["[sc test key]"],"row":5128},{"fixed-arities":[2],"end-row":2437,"meta":{},"name-end-col":18,"name-end-row":2433,"name-row":2433,"added":"1.0","ns":"clojure.core","name":"reset-meta!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2433","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":78,"arglist-strs":["[iref metadata-map]"],"doc":"Atomically resets the metadata for a namespace/var/ref/agent/atom","row":2433},{"fixed-arities":[1],"end-row":181,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":9,"name-end-row":181,"name-row":181,"added":"1.0","ns":"clojure.core","name":"vector?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L176","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":81,"arglist-strs":["[x]"],"doc":"Return true if x implements IPersistentVector","row":176},{"fixed-arities":[1],"end-row":2059,"meta":{},"name-end-col":26,"name-end-row":2039,"private":true,"name-row":2039,"added":"1.3","ns":"clojure.core","name":"binding-conveyor-fn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2039","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[f]"],"row":2039},{"fixed-arities":[2],"end-row":6681,"meta":{},"name-end-col":17,"name-end-row":6667,"private":true,"name-row":6667,"ns":"clojure.core","name":"prep-ints","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6667","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":94,"arglist-strs":["[tests thens]"],"doc":"Takes a sequence of int-sized test constants and a corresponding sequence of\n  then expressions. Returns a tuple of [shift mask case-map switch-type] where\n  case-map is a map of int case values to [test then] tuples, and switch-type\n  is either :sparse or :compact.","row":6667},{"fixed-arities":[3,2],"end-row":6366,"meta":{},"name-end-col":13,"name-end-row":6352,"name-row":6352,"added":"1.0","ns":"clojure.core","name":"intern","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6352","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[ns name]","[ns name val]"],"doc":"Finds or creates a var named by the symbol name in the namespace\n  ns (which can be a symbol or a namespace), setting its root binding\n  to val if supplied. The namespace must exist. The var will adopt any\n  metadata from the name symbol.  Returns the var.","row":6352},{"fixed-arities":[1],"end-row":7962,"meta":{},"name-end-col":11,"name-end-row":7959,"name-row":7959,"added":"1.9","ns":"clojure.core","name":"uri?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7959","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[x]"],"doc":"Return true if x is a java.net.URI","row":7959},{"fixed-arities":[1],"end-row":1304,"meta":{},"name-end-col":14,"name-end-row":1300,"name-row":1300,"added":"1.0","ns":"clojure.core","name":"bit-not","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1300","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[x]"],"doc":"Bitwise complement","row":1300},{"fixed-arities":[1],"end-row":6350,"meta":{},"name-end-col":17,"name-end-row":6334,"name-row":6334,"added":"1.0","ns":"clojure.core","name":"trampoline","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6334","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[f]","[f & args]"],"varargs-min-arity":1,"doc":"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.","row":6334},{"fixed-arities":[1],"end-row":1420,"meta":{},"name-end-col":11,"name-end-row":1414,"name-row":1414,"added":"1.9","ns":"clojure.core","name":"int?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1414","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[x]"],"doc":"Return true if x is a fixed precision integer","row":1414},{"fixed-arities":[1],"end-row":505,"meta":{},"name-end-col":21,"name-end-row":471,"name-row":471,"added":"1.7","ns":"clojure.core","name":"Throwable->map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L471","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[o]"],"doc":"Constructs a data representation for a Throwable with keys:\n    :cause - root cause message\n    :phase - error phase\n    :via - cause chain, with cause keys:\n             :type - exception class symbol\n             :message - exception message\n             :data - ex-data\n             :at - top stack element\n    :trace - root cause stack elements","row":471},{"fixed-arities":[1],"end-row":5272,"meta":{},"name-end-col":12,"name-end-row":5266,"name-row":5266,"added":"1.0","ns":"clojure.core","name":"empty","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5266","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[coll]"],"doc":"Returns an empty collection of the same category as coll, or nil","row":5266},{"fixed-arities":[2],"end-row":274,"meta":{},"name-end-col":22,"name-end-row":48,"private":true,"name-row":48,"ns":"clojure.core","name":"generate-proxy","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L48","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[super interfaces]"],"row":48},{"fixed-arities":[1,2],"end-row":1055,"meta":{},"name-end-col":8,"name-end-row":1045,"name-row":1045,"added":"1.2","ns":"clojure.core","name":"-","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1045","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Does not auto-promote\n  longs, will throw on overflow. See also: -'","row":1045},{"fixed-arities":[1],"end-row":874,"meta":{},"name-end-col":12,"name-end-row":869,"name-row":869,"added":"1.0","ns":"clojure.core","name":"zero?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L869","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[num]"],"doc":"Returns true if num is zero, else false","row":869},{"fixed-arities":[1],"end-row":2021,"meta":{},"name-end-col":16,"name-end-row":2011,"name-row":2011,"added":"1.1","ns":"clojure.core","name":"bound-fn*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2011","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[f]"],"doc":"Returns a function, which will install the same bindings in effect as in\n  the thread at the time bound-fn* was called and then call f with any given\n  arguments. This may be used to define a helper function which runs on a\n  different thread, but needs the same bindings in place.","row":2011},{"fixed-arities":[3],"end-row":1826,"meta":{},"name-end-col":20,"name-end-row":1820,"name-row":1820,"added":"1.0","ns":"clojure.core","name":"prefer-method","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1820","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[multifn dispatch-val-x dispatch-val-y]"],"doc":"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \n   when there is a conflict","row":1820},{"fixed-arities":[3,2],"end-row":4814,"meta":{},"name-end-col":14,"name-end-row":4807,"name-row":4807,"added":"1.4","ns":"clojure.core","name":"ex-info","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4807","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":79,"arglist-strs":["[msg map]","[msg map cause]"],"doc":"Create an instance of ExceptionInfo, a RuntimeException subclass\n   that carries a map of additional data.","row":4807},{"fixed-arities":[1],"end-row":6126,"meta":{},"name-end-col":24,"name-end-row":6117,"name-row":6117,"added":"1.10","ns":"clojure.core","name":"requiring-resolve","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6117","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":79,"arglist-strs":["[sym]"],"doc":"Resolves namespace-qualified sym per 'resolve'. If initial resolve\nfails, attempts to require sym's namespace and retries.","row":6117},{"fixed-arities":[1,2],"end-row":1135,"meta":{},"name-end-col":10,"name-end-row":1127,"name-row":1127,"added":"1.0","ns":"clojure.core","name":"min","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1127","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the least of the nums.","row":1127},{"fixed-arities":[1,2],"end-row":4308,"meta":{},"name-end-col":15,"name-end-row":4289,"name-row":4289,"added":"1.0","ns":"clojure.core","name":"take-nth","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4289","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.","row":4289},{"end-row":2209,"meta":{},"name-end-col":20,"name-end-row":2194,"name-row":2194,"added":"1.2","ns":"clojure.core","name":"restart-agent","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2194","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":67,"arglist-strs":["[a new-state & options]"],"varargs-min-arity":2,"doc":"When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed.","row":2194},{"end-row":5998,"meta":{},"name-end-col":16,"name-end-row":5953,"private":true,"name-row":5953,"ns":"clojure.core","name":"load-lib","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5953","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[prefix lib & options]"],"varargs-min-arity":2,"doc":"Loads a lib with options","row":5953},{"fixed-arities":[1],"end-row":21,"meta":{},"name-end-col":17,"name-end-row":20,"name-row":20,"ns":"clojure.core","name":"method-sig","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L20","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":82,"arglist-strs":["[meth]"],"row":20},{"end-row":5264,"meta":{},"name-end-col":20,"name-end-row":5254,"name-row":5254,"added":"1.0","ns":"clojure.core","name":"definline","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5254","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":22,"arglist-strs":["[name & decl]"],"varargs-min-arity":1,"doc":"Experimental - like defmacro, except defines a named function whose\n  body is the expansion, calls to which may be expanded inline as if\n  it were a macro. Cannot be used with variadic (&) args.","row":5254},{"fixed-arities":[1],"end-row":7055,"meta":{},"name-end-col":18,"name-end-row":7030,"name-row":7030,"added":"1.1","ns":"clojure.core","name":"future-call","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7030","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[f]"],"doc":"Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?.","row":7030},{"fixed-arities":[2],"end-row":541,"meta":{},"name-end-col":23,"name-end-row":507,"private":true,"name-row":507,"ns":"clojure.core","name":"print-throwable","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L507","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":18,"arglist-strs":["[o w]"],"row":507},{"fixed-arities":[1],"end-row":7998,"meta":{},"name-end-col":17,"name-end-row":7993,"name-row":7993,"added":"1.10","ns":"clojure.core","name":"remove-tap","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7993","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[f]"],"doc":"Remove f from the tap set.","row":7993},{"fixed-arities":[1],"end-row":7306,"meta":{},"name-end-col":15,"name-end-row":7299,"name-row":7299,"added":"1.2","ns":"clojure.core","name":"rand-nth","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7299","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[coll]"],"doc":"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.","row":7299},{"fixed-arities":[1],"end-row":261,"meta":{},"name-end-col":6,"name-end-row":227,"private":true,"name-row":227,"ns":"clojure.core","name":"sigs","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L225","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":45,"arglist-strs":["[fdecl]"],"row":225},{"fixed-arities":[1],"end-row":882,"meta":{},"name-end-col":12,"name-end-row":876,"name-row":876,"added":"1.0","ns":"clojure.core","name":"count","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L876","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[coll]"],"doc":"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Java Collections and Maps","row":876},{"fixed-arities":[1],"end-row":6289,"meta":{},"name-end-col":18,"name-end-row":6285,"name-row":6285,"added":"1.0","ns":"clojure.core","name":"sequential?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6285","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[coll]"],"doc":"Returns true if coll implements Sequential","row":6285},{"fixed-arities":[3,2],"end-row":5608,"meta":{},"name-end-col":11,"name-end-row":5589,"name-row":5589,"added":"1.0","ns":"clojure.core","name":"isa?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5589","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":68,"arglist-strs":["[child parent]","[h child parent]"],"doc":"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy","row":5589},{"fixed-arities":[1,4,3,2],"end-row":2660,"meta":{},"name-end-col":14,"name-end-row":2631,"name-row":2631,"added":"1.0","ns":"clojure.core","name":"partial","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2631","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[f]","[f arg1]","[f arg1 arg2]","[f arg1 arg2 arg3]","[f arg1 arg2 arg3 & more]"],"varargs-min-arity":4,"doc":"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.","row":2631},{"fixed-arities":[1,4,3,2,5],"end-row":566,"meta":{"arglists":["quote",[["t"],["t","&","elements"]]]},"name-end-col":16,"name-end-row":523,"name-row":523,"added":"1.2","ns":"clojure.core","name":"vector-of","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L523","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":7,"end-col":13,"arglist-strs":["[t]","[t x1]","[t x1 x2]","[t x1 x2 x3]","[t x1 x2 x3 x4]","[t x1 x2 x3 x4 & xn]"],"varargs-min-arity":5,"doc":"Creates a new vector of a single primitive type t, where t is one\n  of :int :long :float :double :byte :short :char or :boolean. The\n  resulting vector complies with the interface of vectors in general,\n  but stores the values unboxed internally.\n\n  Optionally takes one or more elements to populate the vector.","row":523},{"fixed-arities":[1],"end-row":3521,"meta":{},"name-end-col":21,"name-end-row":3517,"name-row":3517,"added":"1.3","ns":"clojure.core","name":"unchecked-byte","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3517","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[x]"],"doc":"Coerce to byte. Subject to rounding or truncation.","row":3517},{"fixed-arities":[2],"end-row":1386,"meta":{},"name-end-col":31,"name-end-row":1382,"name-row":1382,"added":"1.6","ns":"clojure.core","name":"unsigned-bit-shift-right","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1382","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[x n]"],"doc":"Bitwise shift right, without sign-extension.","row":1382},{"fixed-arities":[1],"end-row":929,"meta":{},"name-end-col":10,"name-end-row":924,"name-row":924,"added":"1.2","ns":"clojure.core","name":"inc","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L924","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'","row":924},{"fixed-arities":[0],"end-row":3704,"meta":{},"name-end-col":14,"name-end-row":3698,"name-row":3698,"added":"1.0","ns":"clojure.core","name":"newline","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3698","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":9,"arglist-strs":["[]"],"doc":"Writes a platform-specific newline to *out*","row":3698},{"fixed-arities":[1],"end-row":51,"meta":{},"name-end-col":19,"name-end-row":46,"private":true,"name-row":46,"ns":"clojure.core","name":"parse-impls","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L46","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":13,"arglist-strs":["[specs]"],"row":46},{"end-row":775,"meta":{},"name-end-col":22,"name-end-row":713,"name-row":713,"added":"1.2","ns":"clojure.core","name":"defprotocol","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L713","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":34,"arglist-strs":["[name & opts+sigs]"],"varargs-min-arity":1,"doc":"A protocol is a named set of named methods and their signatures:\n  (defprotocol AProtocolName\n\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n   ;options\n   :extend-via-metadata true\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in \n  Java parlance). defprotocol is dynamic, has no special compile-time \n  effect, and defines no new types or classes. Implementations of \n  the protocol methods can be provided using extend.\n\n  When :extend-via-metadata is true, values can extend protocols by\n  adding metadata where keys are fully-qualified protocol function\n  symbols and values are function implementations. Protocol\n  implementations are checked first for direct definitions (defrecord,\n  deftype, reify), then metadata definitions, then external\n  extensions (extend, extend-type, extend-protocol)\n\n  defprotocol will automatically generate a corresponding interface,\n  with the same name as the protocol, i.e. given a protocol:\n  my.ns/Protocol, an interface: my.ns.Protocol. The interface will\n  have methods corresponding to the protocol functions, and the\n  protocol will automatically work with instances of the interface.\n\n  Note that you should not use this interface with deftype or\n  reify, as they support the protocol directly:\n\n  (defprotocol P \n    (foo [this]) \n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c] \n   P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n  \n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo \n    (let [x 42]\n      (reify P \n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17","row":713},{"fixed-arities":[2],"end-row":8022,"meta":{},"name-end-col":18,"name-end-row":8008,"name-row":8008,"added":"1.11","ns":"clojure.core","name":"update-vals","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8008","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[m f]"],"doc":"m f => {k (f v) ...}\n\n  Given a map m and a function f of 1-argument, returns a new map where the keys of m\n  are mapped to result of applying f to the corresponding values of m.","row":8008},{"fixed-arities":[0,1,3,2],"end-row":3056,"meta":{},"name-end-col":12,"name-end-row":3036,"name-row":3036,"added":"1.0","ns":"clojure.core","name":"range","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3036","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[]","[end]","[start end]","[start end step]"],"doc":"Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list.","row":3036},{"end-row":6322,"meta":{},"name-end-col":4,"name-end-row":6322,"name-row":6322,"added":"1.0","ns":"clojure.core","name":"*2","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6319","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":5,"doc":"bound in a repl thread to the second most recent value printed","row":6319},{"fixed-arities":[1,2],"end-row":2994,"meta":{},"name-end-col":17,"name-end-row":2969,"name-row":2969,"added":"1.0","ns":"clojure.core","name":"drop-while","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2969","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.","row":2969},{"fixed-arities":[3,2],"end-row":947,"meta":{},"name-end-col":10,"name-end-row":933,"private":true,"name-row":933,"ns":"clojure.core","name":"reduce1","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L932","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":17,"arglist-strs":["[f coll]","[f val coll]"],"row":932},{"fixed-arities":[2],"end-row":1332,"meta":{},"name-end-col":14,"name-end-row":1325,"name-row":1325,"added":"1.0","ns":"clojure.core","name":"bit-xor","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1325","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Bitwise exclusive or","row":1325},{"fixed-arities":[1],"end-row":6295,"meta":{},"name-end-col":14,"name-end-row":6291,"name-row":6291,"added":"1.0","ns":"clojure.core","name":"sorted?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6291","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[coll]"],"doc":"Returns true if coll implements Sorted","row":6291},{"fixed-arities":[4],"end-row":586,"meta":{},"name-end-col":25,"name-end-row":576,"name-row":576,"ns":"clojure.core","name":"-cache-protocol-fn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L576","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":8,"arglist-strs":["[pf x c interf]"],"row":576},{"fixed-arities":[1,3],"end-row":2342,"meta":{},"name-end-col":12,"name-end-row":2323,"name-row":2323,"added":"1.0","ns":"clojure.core","name":"deref","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2323","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[ref]","[ref timeout-ms timeout-val]"],"doc":"Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?.","row":2323},{"fixed-arities":[2],"end-row":2404,"meta":{},"name-end-col":18,"name-end-row":2400,"name-row":2400,"added":"1.9","ns":"clojure.core","name":"reset-vals!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2400","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":95,"arglist-strs":["[atom newval]"],"doc":"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.","row":2400},{"end-row":1737,"meta":{},"name-end-col":36,"name-end-row":1728,"private":true,"name-row":1728,"ns":"clojure.core","name":"check-valid-options","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1728","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":53,"arglist-strs":["[options & valid-keys]"],"varargs-min-arity":1,"doc":"Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.","row":1728},{"fixed-arities":[0,1,2],"end-row":91,"meta":{"arglists":["quote",[[],["coll"],["coll","x"],["coll","x","&","xs"]]]},"name-end-col":6,"name-end-row":84,"name-row":84,"added":"1.0","ns":"clojure.core","name":"conj","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L75","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":45,"arglist-strs":["[]","[coll]","[coll x]","[coll x & xs]"],"varargs-min-arity":2,"doc":"conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).\n    (conj coll) returns coll. (conj) returns [].\n    The 'addition' may happen at different 'places' depending\n    on the concrete type.","row":75},{"end-row":7599,"meta":{},"name-end-col":22,"name-end-row":7586,"name-row":7586,"added":"1.3","ns":"clojure.core","name":"with-redefs","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7586","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":37,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing.","row":7586},{"fixed-arities":[6],"end-row":492,"meta":{},"name-end-col":13,"name-end-row":170,"name-row":170,"ns":"clojure.core","name":"->Vec","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L170","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":2,"arglist-strs":["[am cnt shift root tail _meta]"],"row":170},{"end-row":425,"meta":{},"name-end-col":17,"name-end-row":419,"name-row":419,"added":"1.0","ns":"clojure.core","name":"sorted-set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L419","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[& keys]"],"varargs-min-arity":0,"doc":"Returns a new sorted set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.","row":419},{"end-row":7965,"meta":{},"name-end-col":65,"name-end-row":7965,"private":true,"name-row":7965,"ns":"clojure.core","name":"tapq","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7965","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":61,"end-col":114,"row":7965},{"fixed-arities":[1],"end-row":1266,"meta":{},"name-end-col":11,"name-end-row":1261,"name-row":1261,"added":"1.0","ns":"clojure.core","name":"pos?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1261","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[num]"],"doc":"Returns true if num is greater than zero, else false","row":1261},{"fixed-arities":[1,2],"end-row":3021,"meta":{},"name-end-col":13,"name-end-row":3016,"name-row":3016,"added":"1.0","ns":"clojure.core","name":"repeat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3016","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[x]","[n x]"],"doc":"Returns a lazy (infinite!, or length n if supplied) sequence of xs.","row":3016},{"fixed-arities":[1],"end-row":5406,"meta":{},"name-end-col":19,"name-end-row":5403,"name-row":5403,"added":"1.0","ns":"clojure.core","name":"doubles","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5403","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":46,"arglist-strs":["[xs]"],"doc":"Casts to double[]","row":5403},{"end-row":165,"meta":{},"name-end-col":16,"name-end-row":59,"name-row":59,"ns":"clojure.core","name":"VecSeq","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L59","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":26,"row":59},{"fixed-arities":[3],"end-row":6205,"meta":{},"name-end-col":15,"name-end-row":6196,"name-row":6196,"added":"1.0","ns":"clojure.core","name":"assoc-in","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6196","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[m [k & ks] v]"],"doc":"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.","row":6196},{"fixed-arities":[1],"end-row":346,"meta":{},"name-end-col":15,"name-end-row":340,"name-row":340,"added":"1.0","ns":"clojure.core","name":"to-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L340","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[coll]"],"doc":"Returns an array of Objects containing the contents of coll, which\n  can be any Collection.  Maps to java.util.Collection.toArray().","row":340},{"fixed-arities":[1],"end-row":1398,"meta":{},"name-end-col":15,"name-end-row":1388,"name-row":1388,"added":"1.0","ns":"clojure.core","name":"integer?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1388","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[n]"],"doc":"Returns true if n is an integer","row":1388},{"fixed-arities":[1],"end-row":2547,"meta":{},"name-end-col":16,"name-end-row":2542,"name-row":2542,"added":"1.7","ns":"clojure.core","name":"volatile!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2542","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[val]"],"doc":"Creates and returns a Volatile with an initial value of val.","row":2542},{"fixed-arities":[1],"end-row":7071,"meta":{},"name-end-col":20,"name-end-row":7067,"name-row":7067,"added":"1.1","ns":"clojure.core","name":"future-cancel","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7067","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[f]"],"doc":"Cancels the future, if possible.","row":7067},{"fixed-arities":[4,3],"end-row":6948,"meta":{},"name-end-col":16,"name-end-row":6933,"name-row":6933,"added":"1.7","ns":"clojure.core","name":"transduce","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6933","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[xform f coll]","[xform f init coll]"],"doc":"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.","row":6933},{"end-row":293,"meta":{},"name-end-col":22,"name-end-row":281,"name-row":281,"added":"1.0","ns":"clojure.core","name":"get-proxy-class","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L281","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":125,"arglist-strs":["[& bases]"],"varargs-min-arity":0,"doc":"Takes an optional single class followed by zero or more\n  interfaces. If not supplied class defaults to Object.  Creates an\n  returns an instance of a proxy class derived from the supplied\n  classes. The resulting value is cached and used for any subsequent\n  requests for the same class set. Returns a Class object.","row":281},{"fixed-arities":[3],"end-row":5506,"meta":{},"name-end-col":22,"name-end-row":5488,"private":true,"name-row":5488,"ns":"clojure.core","name":"add-annotation","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5488","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[av name v]"],"row":5488},{"fixed-arities":[2],"end-row":26,"meta":{},"name-end-col":11,"protocol-ns":"clojure.core","name-end-row":26,"name-row":26,"ns":"clojure.core","name":"popTail","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L26","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":30,"arglist-strs":["[level node]"],"row":26},{"end-row":5877,"meta":{},"name-end-col":22,"name-end-row":5877,"private":true,"name-row":5877,"ns":"clojure.core","name":"*loading-verbosely*","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5874","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":29,"doc":"True while a verbose load is pending","row":5874},{"fixed-arities":[3],"end-row":524,"meta":{},"name-end-col":32,"name-end-row":509,"private":true,"name-row":509,"ns":"clojure.core","name":"expand-method-impl-cache","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L509","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":95,"arglist-strs":["[cache c f]"],"row":509},{"end-row":13,"meta":{},"name-end-col":13,"name-end-row":13,"name-row":13,"ns":"clojure.core","name":"unquote","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L13","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":6,"end-col":14,"row":13},{"end-row":7770,"meta":{"arglists":["quote",[["xform*","coll"]]]},"name-end-col":15,"name-end-row":7762,"name-row":7762,"added":"1.7","ns":"clojure.core","name":"eduction","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7762","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[& xforms]"],"varargs-min-arity":0,"doc":"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.","row":7762},{"fixed-arities":[1,2],"end-row":7450,"meta":{},"name-end-col":19,"name-end-row":7414,"name-row":7414,"added":"1.2","ns":"clojure.core","name":"keep-indexed","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7414","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.","row":7414},{"end-row":2707,"meta":{"arglists":["quote",[["pred","coll"]]]},"name-end-col":12,"name-end-row":2707,"name-row":2707,"added":"1.0","ns":"clojure.core","name":"not-every?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2701","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":31,"doc":"Returns false if (pred x) is logical true for every x in\n  coll, else true.","row":2701},{"fixed-arities":[4,3,2],"end-row":6986,"meta":{},"name-end-col":11,"name-end-row":6970,"name-row":6970,"added":"1.4","ns":"clojure.core","name":"mapv","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6970","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[f coll]","[f c1 c2]","[f c1 c2 c3]","[f c1 c2 c3 & colls]"],"varargs-min-arity":4,"doc":"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.","row":6970},{"fixed-arities":[1],"end-row":1196,"meta":{},"name-end-col":27,"name-end-row":1191,"name-row":1191,"added":"1.0","ns":"clojure.core","name":"unchecked-negate-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1191","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[x]"],"doc":"Returns the negation of x, an int.\n  Note - uses a primitive operator subject to overflow.","row":1191},{"end-row":3723,"meta":{},"name-end-col":10,"name-end-row":3715,"name-row":3715,"added":"1.0","ns":"clojure.core","name":"prn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3715","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[& more]"],"varargs-min-arity":0,"doc":"Same as pr followed by (newline). Observes *flush-on-newline*","row":3715},{"fixed-arities":[2],"end-row":2478,"meta":{},"name-end-col":14,"name-end-row":2472,"name-row":2472,"added":"1.0","ns":"clojure.core","name":"ref-set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2472","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[ref val]"],"doc":"Must be called in a transaction. Sets the value of ref.\n  Returns val.","row":2472},{"fixed-arities":[1],"end-row":704,"meta":{},"name-end-col":49,"name-end-row":703,"name-row":703,"ns":"clojure.core","name":"chunk-first","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L703","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":38,"end-col":21,"arglist-strs":["[s]"],"row":703},{"end-row":3667,"meta":{},"name-end-col":20,"name-end-row":3667,"name-row":3667,"ns":"clojure.core","name":"print-dup","defined-by":"clojure.core/defmulti","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3667","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":11,"end-col":47,"row":3667},{"fixed-arities":[4],"end-row":6659,"meta":{},"name-end-col":16,"name-end-row":6650,"private":true,"name-row":6650,"ns":"clojure.core","name":"case-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6650","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":24,"arglist-strs":["[case-f test-f tests thens]"],"doc":"Transforms a sequence of test constants and a corresponding sequence of then\n  expressions into a sorted map to be consumed by case*. The form of the map\n  entries are {(case-f test) [(test-f test) then]}.","row":6650},{"fixed-arities":[1],"end-row":3357,"meta":{},"name-end-col":18,"name-end-row":3350,"name-row":3350,"added":"1.1","ns":"clojure.core","name":"persistent!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3350","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[coll]"],"doc":"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.","row":3350},{"fixed-arities":[5],"end-row":5300,"meta":{},"name-end-col":18,"name-end-row":5290,"name-row":5290,"added":"1.0","ns":"clojure.core","name":"areduce","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5290","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":18,"arglist-strs":["[a idx ret init expr]"],"doc":"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the \n  evaluation of expr at each step, returning ret.","row":5290},{"fixed-arities":[2],"end-row":311,"meta":{},"name-end-col":23,"name-end-row":294,"private":true,"name-row":294,"ns":"clojure.core","name":"validate-fields","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L294","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":65,"arglist-strs":["[fields name]"],"doc":"","row":294},{"end-row":57,"meta":{},"name-end-col":20,"name-end-row":37,"name-row":37,"ns":"clojure.core","name":"ArrayChunk","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L37","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":16,"row":37},{"fixed-arities":[2],"end-row":118,"meta":{},"name-end-col":20,"name-end-row":117,"private":true,"name-row":117,"ns":"clojure.core","name":"print-object","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L117","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":37,"arglist-strs":["[o w]"],"row":117},{"fixed-arities":[1,2],"end-row":638,"meta":{},"name-end-col":19,"name-end-row":627,"name-row":627,"added":"1.3","ns":"clojure.core","name":"find-keyword","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L627","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[name]","[ns name]"],"doc":"Returns a Keyword with the given namespace and name if one already\n  exists.  This function will not intern a new keyword. If the keyword\n  has not already been interned, it will return nil.  Do not use :\n  in the keyword strings, it will be added automatically.","row":627},{"fixed-arities":[2],"end-row":146,"meta":{"arglists":["quote",[["c","x"]]]},"name-end-col":11,"name-end-row":146,"name-row":146,"added":"1.0","ns":"clojure.core","name":"instance?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L141","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":61,"arglist-strs":["[c x]"],"doc":"Evaluates x and tests if it is an instance of the class\n    c. Returns true or false","row":141},{"fixed-arities":[1],"end-row":1602,"meta":{},"name-end-col":11,"name-end-row":1596,"name-row":1596,"added":"1.0","ns":"clojure.core","name":"rseq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1596","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[rev]"],"doc":"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil","row":1596},{"fixed-arities":[1],"end-row":1296,"meta":{},"name-end-col":18,"name-end-row":1291,"name-row":1291,"added":"1.0","ns":"clojure.core","name":"rationalize","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1291","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[num]"],"doc":"returns the rational value of num","row":1291},{"fixed-arities":[1],"end-row":2360,"meta":{},"name-end-col":11,"name-end-row":2344,"name-row":2344,"added":"1.0","ns":"clojure.core","name":"atom","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2344","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]","[x & options]"],"varargs-min-arity":1,"doc":"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.","row":2344},{"fixed-arities":[1],"end-row":5761,"meta":{},"name-end-col":22,"name-end-row":5756,"name-row":5756,"added":"1.0","ns":"clojure.core","name":"enumeration-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5756","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[e]"],"doc":"Returns a seq on a java.util.Enumeration","row":5756},{"fixed-arities":[1],"end-row":1660,"meta":{},"name-end-col":25,"name-end-row":1657,"name-row":1657,"added":"1.9","ns":"clojure.core","name":"qualified-keyword?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1657","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[x]"],"doc":"Return true if x is a keyword with a namespace","row":1657},{"fixed-arities":[2],"end-row":5512,"meta":{},"name-end-col":26,"name-end-row":5508,"private":true,"name-row":5508,"ns":"clojure.core","name":"process-annotation","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5508","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[av v]"],"row":5508},{"end-row":6832,"meta":{},"name-end-col":18,"name-end-row":6831,"name-row":6831,"ns":"clojure.core","name":"Inst","defined-by":"clojure.core/defprotocol","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6831","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":14,"end-col":21,"row":6831},{"end-row":1724,"meta":{},"name-end-col":14,"name-end-row":1710,"name-row":1710,"added":"1.1","ns":"clojure.core","name":"->>","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1710","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":11,"arglist-strs":["[x & forms]"],"varargs-min-arity":1,"doc":"Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.","row":1710},{"fixed-arities":[1],"end-row":2251,"meta":{},"name-end-col":17,"name-end-row":2246,"name-row":2246,"added":"1.2","ns":"clojure.core","name":"error-mode","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2246","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the error-mode of agent a.  See set-error-mode!","row":2246},{"fixed-arities":[1,2],"end-row":1115,"meta":{},"name-end-col":9,"name-end-row":1102,"name-row":1102,"added":"1.0","ns":"clojure.core","name":"==","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1102","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns non-nil if nums all have the equivalent\n  value (type-independent), otherwise false","row":1102},{"fixed-arities":[2],"end-row":4184,"meta":{},"name-end-col":15,"name-end-row":4179,"name-row":4179,"added":"1.0","ns":"clojure.core","name":"ns-unmap","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4179","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[ns sym]"],"doc":"Removes the mappings for the symbol from the namespace.","row":4179},{"fixed-arities":[0,1,2],"end-row":2591,"meta":{},"name-end-col":11,"name-end-row":2574,"name-row":2574,"added":"1.0","ns":"clojure.core","name":"comp","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2574","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[]","[f]","[f g]","[f g & fs]"],"varargs-min-arity":2,"doc":"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.","row":2574},{"fixed-arities":[],"end-row":336,"meta":{"arglists":["quote",[["name","doc-string?","attr-map?",["params*"],"prepost-map?","body"],["name","doc-string?","attr-map?",[["params*"],"prepost-map?","body"],"+","attr-map?"]]]},"name-end-col":6,"name-end-row":294,"name-row":294,"added":"1.0","ns":"clojure.core","name":"defn","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L285","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":2,"end-col":60,"arglist-strs":["[&form &env name & fdecl]"],"varargs-min-arity":2,"doc":"Same as (def name (fn [params* ] exprs*)) or (def\n    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.","row":285},{"fixed-arities":[1],"end-row":6283,"meta":{},"name-end-col":19,"name-end-row":6279,"name-row":6279,"added":"1.0","ns":"clojure.core","name":"associative?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6279","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[coll]"],"doc":"Returns true if coll implements Associative","row":6279},{"end-row":4044,"meta":{},"name-end-col":20,"name-end-row":4039,"name-row":4039,"added":"1.0","ns":"clojure.core","name":"create-struct","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4039","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[& keys]"],"varargs-min-arity":0,"doc":"Returns a structure basis object.","row":4039},{"fixed-arities":[1],"end-row":2870,"meta":{},"name-end-col":21,"name-end-row":2866,"name-row":2866,"added":"1.7","ns":"clojure.core","name":"ensure-reduced","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2866","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[x]"],"doc":"If x is already reduced?, returns it, else returns (reduced x)","row":2866},{"fixed-arities":[1],"end-row":117,"meta":{},"name-end-col":30,"name-end-row":115,"private":true,"name-row":115,"ns":"clojure.core","name":"valid-java-method-name","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L115","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":41,"arglist-strs":["[s]"],"row":115},{"fixed-arities":[1],"end-row":1432,"meta":{},"name-end-col":15,"name-end-row":1428,"name-row":1428,"added":"1.9","ns":"clojure.core","name":"neg-int?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1428","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[x]"],"doc":"Return true if x is a negative fixed precision integer","row":1428},{"fixed-arities":[1],"end-row":167,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":9,"name-end-row":167,"name-row":167,"added":"1.0","ns":"clojure.core","name":"string?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L162","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":57,"arglist-strs":["[x]"],"doc":"Return true if x is a String","row":162},{"fixed-arities":[1],"end-row":1412,"meta":{},"name-end-col":11,"name-end-row":1408,"name-row":1408,"added":"1.0","ns":"clojure.core","name":"odd?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1408","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[n]"],"doc":"Returns true if n is odd, throws an exception if n is not an integer","row":1408},{"fixed-arities":[2],"end-row":2967,"meta":{},"name-end-col":16,"name-end-row":2958,"name-row":2958,"added":"1.1","ns":"clojure.core","name":"take-last","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2958","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":11,"arglist-strs":["[n coll]"],"doc":"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.","row":2958},{"fixed-arities":[1,2],"end-row":5637,"meta":{},"name-end-col":16,"name-end-row":5623,"name-row":5623,"added":"1.0","ns":"clojure.core","name":"ancestors","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5623","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy","row":5623},{"fixed-arities":[1],"end-row":1640,"meta":{},"name-end-col":23,"name-end-row":1637,"name-row":1637,"added":"1.9","ns":"clojure.core","name":"qualified-ident?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1637","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword with a namespace","row":1637},{"end-row":2431,"meta":{},"name-end-col":18,"name-end-row":2423,"name-row":2423,"added":"1.0","ns":"clojure.core","name":"alter-meta!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2423","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":68,"arglist-strs":["[iref f & args]"],"varargs-min-arity":2,"doc":"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects","row":2423},{"fixed-arities":[1],"end-row":4263,"meta":{},"name-end-col":16,"name-end-row":4255,"name-row":4255,"added":"1.0","ns":"clojure.core","name":"ns-refers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4255","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[ns]"],"doc":"Returns a map of the refer mappings for the namespace.","row":4255},{"fixed-arities":[0,1],"end-row":4942,"meta":{},"name-end-col":11,"name-end-row":4936,"name-row":4936,"added":"1.0","ns":"clojure.core","name":"rand","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4936","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[]","[n]"],"doc":"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).","row":4936},{"fixed-arities":[4,3,2],"end-row":6617,"meta":{},"name-end-col":11,"name-end-row":6594,"name-row":6594,"added":"1.2","ns":"clojure.core","name":"fnil","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6594","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":90,"arglist-strs":["[f x]","[f x y]","[f x y z]"],"doc":"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.","row":6594},{"fixed-arities":[1],"end-row":4088,"meta":{},"name-end-col":18,"name-end-row":4083,"name-row":4083,"added":"1.0","ns":"clojure.core","name":"load-reader","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4083","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[rdr]"],"doc":"Sequentially read and evaluate the set of forms contained in the\n  stream/file","row":4083},{"fixed-arities":[1],"end-row":6034,"meta":{},"name-end-col":31,"name-end-row":6023,"private":true,"name-row":6023,"ns":"clojure.core","name":"check-cyclic-dependency","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6023","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":60,"arglist-strs":["[path]"],"doc":"Detects and rejects non-trivial cyclic load dependencies. The\n  exception message shows the dependency chain with the cycle\n  highlighted. Ignores the trivial case of a file attempting to load\n  itself because that can occur when a gen-class'd class loads its\n  implementation.","row":6023},{"fixed-arities":[2],"end-row":3014,"meta":{},"name-end-col":17,"name-end-row":3009,"name-row":3009,"added":"1.0","ns":"clojure.core","name":"split-with","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3009","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[pred coll]"],"doc":"Returns a vector of [(take-while pred coll) (drop-while pred coll)]","row":3009},{"end-row":683,"meta":{},"name-end-col":16,"name-end-row":677,"name-row":677,"added":"1.0","ns":"clojure.core","name":"vary-meta","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L677","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[obj f & args]"],"varargs-min-arity":2,"doc":"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.","row":677},{"end-row":35,"meta":{},"name-end-col":6,"name-end-row":35,"name-row":35,"added":"1.0","ns":"clojure.core","name":"let","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L32","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":3,"end-col":55,"row":32},{"end-row":6021,"meta":{},"name-end-col":17,"name-end-row":6000,"private":true,"name-row":6000,"ns":"clojure.core","name":"load-libs","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6000","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":63,"arglist-strs":["[& args]"],"varargs-min-arity":0,"doc":"Loads libs, interpreting libspecs, prefix lists, and flags for\n  forwarding to load-lib","row":6000},{"fixed-arities":[1],"end-row":33,"meta":{},"name-end-col":10,"protocol-ns":"clojure.core","name-end-row":33,"name-row":33,"ns":"clojure.core","name":"aclone","defined-by":"clojure.core/definterface","protocol-name":"ArrayManager","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L33","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":17,"arglist-strs":["[arr]"],"row":33},{"end-row":404,"meta":{"arglists":["quote",[["name",["&","fields"],"&","opts+specs"]]]},"name-end-col":20,"name-end-row":313,"name-row":313,"added":"1.2","ns":"clojure.core","name":"defrecord","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L313","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":21,"arglist-strs":["[name fields & opts+specs]"],"varargs-min-arity":2,"doc":"(defrecord name [fields*]  options* specs*)\n\n  Options are expressed as sequential keywords and arguments (in any order).\n\n  Supported options:\n  :load-ns - if true, importing the record class will cause the\n             namespace in which the record was defined to be loaded.\n             Defaults to false.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-interface-or-Object\n  (methodName [args*] body)*\n\n  Dynamically generates compiled bytecode for class with the given\n  name, in a package with the same name as the current namespace, the\n  given fields, and, optionally, methods for protocols and/or\n  interfaces.\n\n  The class will have the (immutable) fields named by\n  fields, which can have type hints. Protocols/interfaces and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s) and interface(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in Java parlance). Thus\n  methods for interfaces will take one more argument than do the\n  interface declarations. Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The class will have implementations of several (clojure.lang)\n  interfaces generated automatically: IObj (metadata support) and\n  IPersistentMap, and all of their superinterfaces.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will defined Java .hashCode and .equals consistent with the\n  contract for java.util.Map.\n\n  When AOT compiling, generates compiled bytecode for a class with the\n  given name (a symbol), prepends the current ns as the package, and\n  writes the .class file to the *compile-path* directory.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta,\n  __extmap, __hash and __hasheq are currently reserved and should not\n  be used when defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.","row":313},{"fixed-arities":[1],"end-row":922,"meta":{},"name-end-col":11,"name-end-row":917,"name-row":917,"added":"1.0","ns":"clojure.core","name":"inc'","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L917","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[x]"],"doc":"Returns a number one greater than num. Supports arbitrary precision.\n  See also: inc","row":917},{"fixed-arities":[1],"end-row":3093,"meta":{},"name-end-col":15,"name-end-row":3086,"name-row":3086,"added":"1.0","ns":"clojure.core","name":"line-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3086","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[rdr]"],"doc":"Returns the lines of text from rdr as a lazy sequence of strings.\n  rdr must implement java.io.BufferedReader.","row":3086},{"end-row":5109,"meta":{},"name-end-col":17,"name-end-row":5101,"name-row":5101,"added":"1.0","ns":"clojure.core","name":"dosync","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5101","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":23,"arglist-strs":["[& exprs]"],"varargs-min-arity":0,"doc":"Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of dosync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.","row":5101},{"fixed-arities":[3,2],"end-row":7297,"meta":{},"name-end-col":17,"name-end-row":7282,"name-row":7282,"added":"1.2","ns":"clojure.core","name":"reductions","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7282","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":65,"arglist-strs":["[f coll]","[f init coll]"],"doc":"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.","row":7282},{"end-row":2137,"meta":{},"name-end-col":11,"name-end-row":2128,"name-row":2128,"added":"1.0","ns":"clojure.core","name":"send","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2128","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[a f & args]"],"varargs-min-arity":2,"doc":"Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread from a thread pool, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)","row":2128},{"fixed-arities":[1],"end-row":2192,"meta":{},"name-end-col":18,"name-end-row":2186,"name-row":2186,"added":"1.2","ns":"clojure.core","name":"agent-error","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2186","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[a]"],"doc":"Returns the exception thrown during an asynchronous action of the\n  agent if the agent is failed.  Returns nil if the agent is not\n  failed.","row":2186},{"fixed-arities":[1],"end-row":3603,"meta":{},"name-end-col":15,"name-end-row":3599,"name-row":3599,"added":"1.0","ns":"clojure.core","name":"decimal?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3599","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[n]"],"doc":"Returns true if n is a BigDecimal","row":3599},{"end-row":210,"meta":{},"name-end-col":21,"name-end-row":203,"name-row":203,"added":"1.0","ns":"clojure.core","name":"char-escape-string","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L200","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":3,"end-col":24,"doc":"Returns escape string for char or nil if none","row":200},{"fixed-arities":[0],"end-row":7951,"meta":{},"name-end-col":25,"name-end-row":7947,"private":true,"name-row":7947,"ns":"clojure.core","name":"load-data-readers","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7947","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":60,"arglist-strs":["[]"],"row":7947},{"fixed-arities":[3],"end-row":4125,"meta":{},"name-end-col":13,"name-end-row":4119,"private":true,"name-row":4119,"ns":"clojure.core","name":"filter-key","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4117","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":15,"arglist-strs":["[keyfn pred amap]"],"row":4117},{"end-row":1740,"meta":{},"name-end-col":22,"name-end-row":1740,"name-row":1740,"ns":"clojure.core","name":"global-hierarchy","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1740","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":6,"end-col":23,"row":1740},{"fixed-arities":[1],"end-row":3348,"meta":{},"name-end-col":16,"name-end-row":3343,"name-row":3343,"added":"1.1","ns":"clojure.core","name":"transient","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3343","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[coll]"],"doc":"Returns a new, transient version of the collection, in constant time.","row":3343},{"fixed-arities":[1],"end-row":6312,"meta":{},"name-end-col":15,"name-end-row":6309,"name-row":6309,"added":"1.9","ns":"clojure.core","name":"indexed?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6309","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[coll]"],"doc":"Return true if coll implements Indexed, indicating efficient lookup by index","row":6309},{"fixed-arities":[1],"end-row":44,"meta":{},"name-end-col":18,"name-end-row":40,"private":true,"name-row":40,"ns":"clojure.core","name":"parse-opts","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L40","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":18,"arglist-strs":["[s]"],"row":40},{"fixed-arities":[1,2],"end-row":1531,"meta":{},"name-end-col":13,"name-end-row":1519,"name-row":1519,"added":"1.0","ns":"clojure.core","name":"dissoc","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1519","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[map]","[map key]","[map key & ks]"],"varargs-min-arity":2,"doc":"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).","row":1519},{"fixed-arities":[1],"end-row":1635,"meta":{},"name-end-col":20,"name-end-row":1632,"name-row":1632,"added":"1.9","ns":"clojure.core","name":"simple-ident?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1632","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword without a namespace","row":1632},{"end-row":6433,"meta":{},"name-end-col":16,"name-end-row":6394,"name-row":6394,"added":"1.0","ns":"clojure.core","name":"condp","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6394","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[pred expr & clauses]"],"varargs-min-arity":2,"doc":"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.","row":6394},{"fixed-arities":[2],"end-row":5860,"meta":{},"name-end-col":18,"name-end-row":5853,"name-row":5853,"added":"1.0","ns":"clojure.core","name":"defonce","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5853","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":28,"arglist-strs":["[name expr]"],"doc":"defs name to have the root value of the expr iff the named var has no root value,\n  else expr is unevaluated","row":5853},{"fixed-arities":[1],"end-row":3472,"meta":{},"name-end-col":11,"name-end-row":3467,"name-row":3467,"added":"1.0","ns":"clojure.core","name":"type","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3467","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Returns the :type metadata of x, or its Class if none","row":3467},{"fixed-arities":[1],"end-row":5902,"meta":{},"name-end-col":16,"name-end-row":5895,"private":true,"name-row":5895,"ns":"clojure.core","name":"libspec?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5895","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":38,"arglist-strs":["[x]"],"doc":"Returns true if x is a libspec","row":5895},{"fixed-arities":[1],"end-row":73,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":6,"name-end-row":73,"name-row":73,"added":"1.0","ns":"clojure.core","name":"rest","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L66","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":59,"arglist-strs":["[x]"],"doc":"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.","row":66},{"fixed-arities":[0],"end-row":23,"meta":{},"name-end-col":16,"protocol-ns":"clojure.core","name-end-row":23,"name-row":23,"ns":"clojure.core","name":"tailoff","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L23","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":9,"end-col":20,"arglist-strs":["[]"],"row":23},{"fixed-arities":[1],"end-row":8006,"meta":{},"name-end-col":11,"name-end-row":8000,"name-row":8000,"added":"1.10","ns":"clojure.core","name":"tap>","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8000","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[x]"],"doc":"sends x to any taps. Will not block. Returns true if there was room in the queue,\n  false if not (dropped).","row":8000},{"fixed-arities":[1],"end-row":8042,"meta":{},"name-end-col":19,"name-end-row":8039,"private":true,"name-row":8039,"ns":"clojure.core","name":"parsing-err","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8039","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":79,"arglist-strs":["[val]"],"doc":"Construct message for parsing for non-string parsing error","row":8039},{"fixed-arities":[1,2],"end-row":5621,"meta":{},"name-end-col":14,"name-end-row":5610,"name-row":5610,"added":"1.0","ns":"clojure.core","name":"parents","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5610","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy","row":5610},{"fixed-arities":[3],"end-row":27,"meta":{},"name-end-col":11,"protocol-ns":"clojure.core","name-end-row":27,"name-row":27,"ns":"clojure.core","name":"newPath","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L27","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":35,"arglist-strs":["[edit level node]"],"row":27},{"fixed-arities":[1],"end-row":4998,"meta":{},"name-end-col":22,"name-end-row":4993,"name-row":4993,"added":"1.0","ns":"clojure.core","name":"special-symbol?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4993","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[s]"],"doc":"Returns true if s names a special form","row":4993},{"fixed-arities":[3],"end-row":6919,"meta":{},"name-end-col":16,"name-end-row":6910,"name-row":6910,"added":"1.4","ns":"clojure.core","name":"reduce-kv","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6910","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[f init coll]"],"doc":"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.","row":6910},{"fixed-arities":[3,2],"end-row":3132,"meta":{},"name-end-col":14,"name-end-row":3120,"name-row":3120,"added":"1.0","ns":"clojure.core","name":"sort-by","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3120","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":67,"arglist-strs":["[keyfn coll]","[keyfn comp coll]"],"doc":"Returns a sorted sequence of the items in coll, where the sort\n  order is determined by comparing (keyfn item).  If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  Guaranteed to be stable: equal elements will\n  not be reordered.  If coll is a Java array, it will be modified.  To\n  avoid this, sort a copy of the array.","row":3120},{"fixed-arities":[1,3,2],"end-row":2629,"meta":{},"name-end-col":11,"name-end-row":2593,"name-row":2593,"added":"1.1","ns":"clojure.core","name":"juxt","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2593","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":79,"arglist-strs":["[f]","[f g]","[f g h]","[f g h & fs]"],"varargs-min-arity":3,"doc":"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]","row":2593},{"fixed-arities":[1],"end-row":7697,"meta":{},"name-end-col":10,"name-end-row":7687,"name-row":7687,"added":"1.7","ns":"clojure.core","name":"cat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7687","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[rf]"],"doc":"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.","row":7687},{"fixed-arities":[2],"end-row":1259,"meta":{},"name-end-col":30,"name-end-row":1254,"name-row":1254,"added":"1.0","ns":"clojure.core","name":"unchecked-remainder-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1254","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[x y]"],"doc":"Returns the remainder of division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.","row":1254},{"fixed-arities":[2],"end-row":46,"meta":{},"name-end-col":17,"name-end-row":37,"name-row":37,"ns":"clojure.core","name":"proxy-name","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L37","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[super interfaces]"],"row":37},{"fixed-arities":[1],"end-row":1189,"meta":{},"name-end-col":20,"name-end-row":1184,"name-row":1184,"added":"1.0","ns":"clojure.core","name":"unchecked-dec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1184","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[x]"],"doc":"Returns a number one less than x, a long.\n  Note - uses a primitive operator subject to overflow.","row":1184},{"end-row":3084,"meta":{},"name-end-col":17,"name-end-row":3068,"name-row":3068,"added":"1.0","ns":"clojure.core","name":"merge-with","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3068","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[f & maps]"],"varargs-min-arity":1,"doc":"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).","row":3068},{"fixed-arities":[3],"end-row":35,"meta":{},"name-end-col":8,"protocol-ns":"clojure.core","name-end-row":35,"name-row":35,"ns":"clojure.core","name":"aset","defined-by":"clojure.core/definterface","protocol-name":"ArrayManager","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L35","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":26,"arglist-strs":["[arr i val]"],"row":35},{"end-row":4051,"meta":{},"name-end-col":20,"name-end-row":4046,"name-row":4046,"added":"1.0","ns":"clojure.core","name":"defstruct","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4046","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":39,"arglist-strs":["[name & keys]"],"varargs-min-arity":1,"doc":"Same as (def name (create-struct keys...))","row":4046},{"fixed-arities":[1],"end-row":3465,"meta":{},"name-end-col":12,"name-end-row":3461,"name-row":3461,"added":"1.0","ns":"clojure.core","name":"class","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3461","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[x]"],"doc":"Returns the Class of x","row":3461},{"fixed-arities":[1],"end-row":1496,"meta":{},"name-end-col":17,"name-end-row":1492,"name-row":1492,"added":"1.8","ns":"clojure.core","name":"map-entry?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1492","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[x]"],"doc":"Return true if x is a map entry","row":1492},{"fixed-arities":[2],"end-row":311,"meta":{},"name-end-col":17,"name-end-row":302,"name-row":302,"added":"1.0","ns":"clojure.core","name":"init-proxy","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L302","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":11,"arglist-strs":["[proxy mappings]"],"doc":"Takes a proxy instance and a map of strings (which must\n  correspond to methods of the proxy superclass/superinterfaces) to\n  fns (which must take arguments matching the corresponding method,\n  plus an additional (explicit) first arg corresponding to this, and\n  sets the proxy's fn map.  Returns the proxy.","row":302},{"fixed-arities":[1],"end-row":6848,"meta":{},"name-end-col":12,"name-end-row":6844,"name-row":6844,"added":"1.9","ns":"clojure.core","name":"inst?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6844","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[x]"],"doc":"Return true if x satisfies Inst","row":6844},{"fixed-arities":[1],"end-row":24,"meta":{},"name-end-col":12,"protocol-ns":"clojure.core","name-end-row":24,"name-row":24,"ns":"clojure.core","name":"arrayFor","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L24","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":22,"arglist-strs":["[i]"],"row":24},{"fixed-arities":[0,1],"end-row":3693,"meta":{},"name-end-col":9,"name-end-row":3678,"name-row":3678,"added":"1.0","ns":"clojure.core","name":"pr","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3678","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[]","[x]","[x & more]"],"varargs-min-arity":1,"doc":"Prints the object(s) to the output stream that is the current value\n  of *out*.  Prints the object(s), separated by spaces if there is\n  more than one.  By default, pr and prn print in a way that objects\n  can be read by the reader","row":3678},{"fixed-arities":[2],"end-row":40,"meta":{},"name-end-col":22,"name-end-row":19,"private":true,"name-row":19,"ns":"clojure.core","name":"filter-methods","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L19","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":12,"arglist-strs":["[c invalid-method?]"],"row":19},{"fixed-arities":[1],"end-row":2876,"meta":{},"name-end-col":16,"name-end-row":2872,"name-row":2872,"added":"1.7","ns":"clojure.core","name":"unreduced","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2872","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":33,"arglist-strs":["[x]"],"doc":"If x is reduced?, returns (deref x), else returns x","row":2872},{"fixed-arities":[1],"end-row":3491,"meta":{},"name-end-col":12,"name-end-row":3487,"name-row":3487,"added":"1.0","ns":"clojure.core","name":"float","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3487","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x]"],"doc":"Coerce to float","row":3487},{"fixed-arities":[1,2],"end-row":2924,"meta":{},"name-end-col":17,"name-end-row":2905,"name-row":2905,"added":"1.0","ns":"clojure.core","name":"take-while","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2905","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","row":2905},{"fixed-arities":[1],"end-row":2485,"meta":{},"name-end-col":24,"name-end-row":2480,"name-row":2480,"added":"1.1","ns":"clojure.core","name":"ref-history-count","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2480","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[ref]"],"doc":"Returns the history count of a ref","row":2480},{"end-row":35,"meta":{},"name-end-col":27,"name-end-row":30,"name-row":30,"ns":"clojure.core","name":"ArrayManager","defined-by":"clojure.core/definterface","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L30","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":15,"end-col":27,"row":30},{"end-row":14,"meta":{},"name-end-col":22,"name-end-row":14,"name-row":14,"ns":"clojure.core","name":"unquote-splicing","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L14","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":6,"end-col":23,"row":14},{"fixed-arities":[1],"end-row":826,"meta":{},"name-end-col":17,"name-end-row":824,"private":true,"name-row":824,"ns":"clojure.core","name":"emit-impl","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L824","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":48,"arglist-strs":["[[p fs]]"],"row":824},{"fixed-arities":[1],"end-row":279,"meta":{},"name-end-col":32,"name-end-row":276,"private":true,"name-row":276,"ns":"clojure.core","name":"get-super-and-interfaces","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L276","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":8,"end-col":35,"arglist-strs":["[bases]"],"row":276},{"end-row":39,"meta":{},"name-end-col":36,"name-end-row":39,"name-row":39,"ns":"clojure.core","name":"*verbose-defrecords*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L39","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":16,"end-col":43,"row":39},{"fixed-arities":[1],"end-row":3589,"meta":{},"name-end-col":16,"name-end-row":3583,"name-row":3583,"added":"1.2","ns":"clojure.core","name":"numerator","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3583","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[r]"],"doc":"Returns the numerator part of a Ratio.","row":3583},{"fixed-arities":[1],"end-row":6276,"meta":{},"name-end-col":10,"name-end-row":6272,"name-row":6272,"added":"1.0","ns":"clojure.core","name":"fn?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6272","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[x]"],"doc":"Returns true if x implements Fn, i.e. is an object created via fn.","row":6272},{"fixed-arities":[3,2],"end-row":1876,"meta":{},"name-end-col":17,"name-end-row":1858,"name-row":1858,"added":"1.0","ns":"clojure.core","name":"if-let","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1858","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":21,"arglist-strs":["[bindings then]","[bindings then else & oldform]"],"varargs-min-arity":3,"doc":"bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else","row":1858},{"end-row":40,"meta":{},"name-end-col":6,"name-end-row":40,"name-row":40,"added":"1.0","ns":"clojure.core","name":"loop","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L37","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":2,"end-col":57,"row":37},{"end-row":6808,"meta":{},"name-end-col":15,"name-end-row":6748,"name-row":6748,"added":"1.2","ns":"clojure.core","name":"case","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6748","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":114,"arglist-strs":["[e & clauses]"],"varargs-min-arity":1,"doc":"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an IllegalArgumentException is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (Clojure) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.","row":6748},{"fixed-arities":[1],"end-row":4981,"meta":{},"name-end-col":15,"name-end-row":4973,"name-row":4973,"added":"1.0","ns":"clojure.core","name":"file-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4973","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":11,"arglist-strs":["[dir]"],"doc":"A tree seq on java.io.Files","row":4973},{"fixed-arities":[1],"end-row":6859,"meta":{},"name-end-col":12,"name-end-row":6856,"name-row":6856,"added":"1.9","ns":"clojure.core","name":"uuid?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6856","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[x]"],"doc":"Return true if x is a java.util.UUID","row":6856},{"fixed-arities":[1,2],"end-row":5316,"meta":{},"name-end-col":20,"name-end-row":5310,"name-row":5310,"added":"1.1","ns":"clojure.core","name":"boolean-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5310","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":88,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of booleans","row":5310},{"end-row":4794,"meta":{},"name-end-col":18,"name-end-row":4787,"name-row":4787,"added":"1.0","ns":"clojure.core","name":"println-str","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4787","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":26,"arglist-strs":["[& xs]"],"varargs-min-arity":0,"doc":"println to a string, returning it","row":4787},{"fixed-arities":[1],"end-row":6648,"meta":{},"name-end-col":22,"name-end-row":6640,"private":true,"name-row":6640,"ns":"clojure.core","name":"maybe-min-hash","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6640","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":31,"arglist-strs":["[hashes]"],"doc":"takes a collection of hashes and returns [shift mask] or nil if none found","row":6640},{"fixed-arities":[1,2],"end-row":3455,"meta":{},"name-end-col":17,"name-end-row":3444,"name-row":3444,"added":"1.0","ns":"clojure.core","name":"into-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3444","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[aseq]","[type aseq]"],"doc":"Returns an array with components set to the values in aseq. The array's\n  component type is type if provided, or the type of the first value in\n  aseq if present, or Object. All values in aseq must be compatible with\n  the component type. Class objects for the primitive types can be obtained\n  using, e.g., Integer/TYPE.","row":3444},{"fixed-arities":[1],"end-row":4199,"meta":{},"name-end-col":17,"name-end-row":4190,"name-row":4190,"added":"1.0","ns":"clojure.core","name":"ns-publics","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4190","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[ns]"],"doc":"Returns a map of the public intern mappings for the namespace.","row":4190},{"fixed-arities":[1],"end-row":2864,"meta":{},"name-end-col":15,"name-end-row":2859,"name-row":2859,"added":"1.5","ns":"clojure.core","name":"reduced?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2859","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Returns true if x is the result of a call to reduced","row":2859},{"fixed-arities":[1],"end-row":57,"meta":{},"name-end-col":31,"name-end-row":51,"private":true,"name-row":51,"ns":"clojure.core","name":"protected-final-methods","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L51","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":40,"arglist-strs":["[c]"],"row":51},{"fixed-arities":[1],"end-row":1457,"meta":{},"name-end-col":17,"name-end-row":1447,"name-row":1447,"added":"1.0","ns":"clojure.core","name":"complement","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1447","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[f]"],"doc":"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.","row":1447},{"fixed-arities":[1],"end-row":4098,"meta":{},"name-end-col":18,"name-end-row":4090,"name-row":4090,"added":"1.0","ns":"clojure.core","name":"load-string","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4090","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[s]"],"doc":"Sequentially read and evaluate the set of forms contained in the\n  string","row":4090},{"fixed-arities":[1,2],"end-row":5649,"meta":{},"name-end-col":18,"name-end-row":5639,"name-row":5639,"added":"1.0","ns":"clojure.core","name":"descendants","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5639","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on Java type inheritance\n  relationships.","row":5639},{"fixed-arities":[3,2],"end-row":5528,"meta":{},"name-end-col":23,"name-end-row":5514,"private":true,"name-row":5514,"ns":"clojure.core","name":"add-annotations","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5514","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":37,"arglist-strs":["[visitor m]","[visitor m i]"],"row":5514},{"fixed-arities":[1],"end-row":5924,"meta":{},"name-end-col":22,"name-end-row":5920,"private":true,"name-row":5920,"ns":"clojure.core","name":"root-directory","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5920","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":38,"arglist-strs":["[lib]"],"doc":"Returns the root resource path for a lib","row":5920},{"fixed-arities":[2],"end-row":643,"meta":{},"name-end-col":28,"name-end-row":634,"private":true,"name-row":634,"ns":"clojure.core","name":"assert-same-protocol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L634","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":55,"arglist-strs":["[protocol-var method-syms]"],"row":634},{"end-row":4785,"meta":{},"name-end-col":16,"name-end-row":4778,"name-row":4778,"added":"1.0","ns":"clojure.core","name":"print-str","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4778","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[& xs]"],"varargs-min-arity":0,"doc":"print to a string, returning it","row":4778},{"fixed-arities":[2],"end-row":3676,"meta":{},"name-end-col":12,"name-end-row":3669,"private":true,"name-row":3669,"ns":"clojure.core","name":"pr-on","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3669","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[x w]"],"row":3669},{"fixed-arities":[2],"end-row":2244,"meta":{},"name-end-col":22,"name-end-row":2229,"name-row":2229,"added":"1.2","ns":"clojure.core","name":"set-error-mode!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2229","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[a mode-keyword]"],"doc":"Sets the error-mode of agent a to mode-keyword, which must be\n  either :fail or :continue.  If an action being run by the agent\n  throws an exception or doesn't pass the validator fn, an\n  error-handler may be called (see set-error-handler!), after which,\n  if the mode is :continue, the agent will continue as if neither the\n  action that caused the error nor the error itself ever happened.\n  \n  If the mode is :fail, the agent will become failed and will stop\n  accepting new 'send' and 'send-off' actions, and any previously\n  queued actions will be held until a 'restart-agent'.  Deref will\n  still work, returning the state of the agent before the error.","row":2229},{"fixed-arities":[1,2],"end-row":4852,"meta":{},"name-end-col":17,"name-end-row":4841,"name-row":4841,"added":"1.0","ns":"clojure.core","name":"assert","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4841","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":94,"arglist-strs":["[x]","[x message]"],"doc":"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.","row":4841},{"fixed-arities":[1],"end-row":3911,"meta":{},"name-end-col":13,"name-end-row":3906,"name-row":3906,"added":"1.0","ns":"clojure.core","name":"aclone","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3906","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[array]"],"doc":"Returns a clone of the Java array. Works on arrays of known\n  types.","row":3906},{"end-row":4758,"meta":{},"name-end-col":22,"name-end-row":4751,"name-row":4751,"added":"1.0","ns":"clojure.core","name":"with-in-str","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4751","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":17,"arglist-strs":["[s & body]"],"varargs-min-arity":1,"doc":"Evaluates body in a context in which *in* is bound to a fresh\n  StringReader initialized with the string s.","row":4751},{"fixed-arities":[1],"end-row":4170,"meta":{},"name-end-col":14,"name-end-row":4165,"name-row":4165,"added":"1.0","ns":"clojure.core","name":"ns-name","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4165","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":26,"arglist-strs":["[ns]"],"doc":"Returns the name of the namespace, a symbol.","row":4165},{"fixed-arities":[1],"end-row":3479,"meta":{},"name-end-col":10,"name-end-row":3474,"name-row":3474,"added":"1.0","ns":"clojure.core","name":"num","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3474","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Coerce to Number","row":3474},{"fixed-arities":[1],"end-row":17,"meta":{},"name-end-col":22,"name-end-row":13,"name-row":13,"added":"1.2","ns":"clojure.core","name":"namespace-munge","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L13","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[ns]"],"doc":"Convert a Clojure namespace name to a legal Java package name.","row":13},{"fixed-arities":[1],"end-row":707,"meta":{},"name-end-col":45,"name-end-row":706,"name-row":706,"ns":"clojure.core","name":"chunk-rest","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L706","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":35,"end-col":20,"arglist-strs":["[s]"],"row":706},{"end-row":5778,"meta":{},"name-end-col":19,"name-end-row":5778,"name-row":5778,"ns":"clojure.core","name":"gen-class","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5778","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":20,"row":5778},{"fixed-arities":[1],"end-row":1463,"meta":{},"name-end-col":17,"name-end-row":1459,"name-row":1459,"added":"1.0","ns":"clojure.core","name":"constantly","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1459","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[x]"],"doc":"Returns a function that takes any number of arguments and returns x.","row":1459},{"fixed-arities":[1,2],"end-row":2851,"meta":{},"name-end-col":13,"name-end-row":2843,"name-row":2843,"added":"1.0","ns":"clojure.core","name":"remove","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2843","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","row":2843},{"fixed-arities":[0],"end-row":6866,"meta":{},"name-end-col":18,"name-end-row":6861,"name-row":6861,"added":"1.11","ns":"clojure.core","name":"random-uuid","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6861","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[]"],"doc":"Returns a pseudo-randomly generated java.util.UUID instance (i.e. type 4).\n\n  See: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--","row":6861},{"fixed-arities":[1],"end-row":122,"meta":{},"name-end-col":39,"name-end-row":119,"private":true,"name-row":119,"ns":"clojure.core","name":"validate-generate-class-options","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L119","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":95,"arglist-strs":["[{:keys [methods]}]"],"row":119},{"end-row":417,"meta":{},"name-end-col":20,"name-end-row":409,"name-row":409,"added":"1.0","ns":"clojure.core","name":"sorted-map-by","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L409","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[comparator & keyvals]"],"varargs-min-arity":1,"doc":"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied\n  comparator.  If any keys are equal, they are handled as if by\n  repeated uses of assoc.","row":409},{"end-row":2030,"meta":{},"name-end-col":19,"name-end-row":2023,"name-row":2023,"added":"1.1","ns":"clojure.core","name":"bound-fn","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2023","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":30,"arglist-strs":["[& fntail]"],"varargs-min-arity":0,"doc":"Returns a function defined by the given fntail, which will install the\n  same bindings in effect as in the thread at the time bound-fn was called.\n  This may be used to define a helper function which runs on a different\n  thread, but needs the same bindings in place.","row":2023},{"end-row":1708,"meta":{},"name-end-col":13,"name-end-row":1694,"name-row":1694,"added":"1.0","ns":"clojure.core","name":"->","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1694","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":11,"arglist-strs":["[x & forms]"],"varargs-min-arity":1,"doc":"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.","row":1694},{"fixed-arities":[2],"end-row":7844,"meta":{},"name-end-col":21,"name-end-row":7839,"name-row":7839,"added":"1.7","ns":"clojure.core","name":"tagged-literal","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7839","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[tag form]"],"doc":"Construct a data representation of a tagged literal from a\n  tag symbol and a form.","row":7839},{"fixed-arities":[1],"end-row":272,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":6,"name-end-row":269,"name-row":269,"added":"1.0","ns":"clojure.core","name":"last","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L264","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":23,"arglist-strs":["[s]"],"doc":"Return the last item in coll, in linear time","row":264},{"end-row":4767,"meta":{},"name-end-col":13,"name-end-row":4760,"name-row":4760,"added":"1.0","ns":"clojure.core","name":"pr-str","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4760","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[& xs]"],"varargs-min-arity":0,"doc":"pr to a string, returning it","row":4760},{"fixed-arities":[1],"end-row":552,"meta":{},"name-end-col":17,"name-end-row":550,"private":true,"name-row":550,"ns":"clojure.core","name":"protocol?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L550","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":37,"arglist-strs":["[maybe-p]"],"row":550},{"end-row":401,"meta":{},"name-end-col":22,"name-end-row":396,"name-row":396,"added":"1.0","ns":"clojure.core","name":"proxy-super","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L396","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","macro":true,"col":1,"name-col":11,"end-col":80,"arglist-strs":["[meth & args]"],"varargs-min-arity":1,"doc":"Use to call a superclass method in the body of a proxy method. \n  Note, expansion captures 'this","row":396},{"end-row":2148,"meta":{},"name-end-col":15,"name-end-row":2139,"name-row":2139,"added":"1.0","ns":"clojure.core","name":"send-off","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2139","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[a f & args]"],"varargs-min-arity":2,"doc":"Dispatch a potentially blocking action to an agent. Returns the\n  agent immediately. Subsequently, in a separate thread, the state of\n  the agent will be set to the value of:\n\n  (apply action-fn state-of-agent args)","row":2139},{"fixed-arities":[1],"end-row":5391,"meta":{},"name-end-col":18,"name-end-row":5388,"name-row":5388,"added":"1.1","ns":"clojure.core","name":"shorts","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5388","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":45,"arglist-strs":["[xs]"],"doc":"Casts to shorts[]","row":5388},{"end-row":2126,"meta":{},"name-end-col":15,"name-end-row":2118,"name-row":2118,"added":"1.5","ns":"clojure.core","name":"send-via","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2118","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":77,"arglist-strs":["[executor a f & args]"],"varargs-min-arity":3,"doc":"Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread supplied by executor, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)","row":2118},{"fixed-arities":[1],"end-row":6173,"meta":{},"name-end-col":14,"name-end-row":6163,"name-row":6163,"added":"1.0","ns":"clojure.core","name":"compile","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6163","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[lib]"],"doc":"Compiles the namespace named by the symbol lib into a set of\n  classfiles. The source for the lib must be in a proper\n  classpath-relative directory. The output files will go into the\n  directory specified by *compile-path*, and that directory too must\n  be in the classpath.","row":6163},{"fixed-arities":[1],"end-row":3660,"meta":{},"name-end-col":13,"name-end-row":3648,"name-row":3648,"added":"1.0","ns":"clojure.core","name":"bigdec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3648","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[x]"],"doc":"Coerce to BigDecimal","row":3648},{"fixed-arities":[0,1],"end-row":613,"meta":{},"name-end-col":13,"name-end-row":606,"name-row":606,"added":"1.0","ns":"clojure.core","name":"gensym","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L606","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":109,"arglist-strs":["[]","[prefix-string]"],"doc":"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.","row":606},{"fixed-arities":[2],"end-row":838,"meta":{},"name-end-col":24,"name-end-row":828,"private":true,"name-row":828,"ns":"clojure.core","name":"emit-hinted-impl","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L828","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":58,"arglist-strs":["[c [p fs]]"],"row":828},{"fixed-arities":[1],"end-row":6252,"meta":{},"name-end-col":12,"name-end-row":6248,"name-row":6248,"added":"1.0","ns":"clojure.core","name":"coll?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6248","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[x]"],"doc":"Returns true if x implements IPersistentCollection","row":6248},{"fixed-arities":[1],"end-row":6842,"meta":{},"name-end-col":14,"name-end-row":6838,"name-row":6838,"added":"1.9","ns":"clojure.core","name":"inst-ms","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6838","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[inst]"],"doc":"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT","row":6838},{"fixed-arities":[1,2],"end-row":5175,"meta":{},"name-end-col":17,"name-end-row":5168,"name-row":5168,"added":"1.0","ns":"clojure.core","name":"repeatedly","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5168","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[f]","[n f]"],"doc":"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it","row":5168},{"fixed-arities":[2],"end-row":6631,"meta":{},"name-end-col":13,"name-end-row":6619,"name-row":6619,"added":"1.0","ns":"clojure.core","name":"zipmap","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6619","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[keys vals]"],"doc":"Returns a map with the keys mapped to the corresponding vals.","row":6619},{"fixed-arities":[1],"end-row":1443,"meta":{},"name-end-col":14,"name-end-row":1440,"name-row":1440,"added":"1.9","ns":"clojure.core","name":"double?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1440","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[x]"],"doc":"Return true if x is a Double","row":1440},{"end-row":822,"meta":{},"name-end-col":13,"name-end-row":777,"name-row":777,"added":"1.2","ns":"clojure.core","name":"extend","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L777","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":82,"arglist-strs":["[atype & proto+mmaps]"],"varargs-min-arity":1,"doc":"Implementations of protocol methods can be provided using the extend construct:\n\n  (extend AType\n    AProtocol\n     {:foo an-existing-fn\n      :bar (fn [a b] ...)\n      :baz (fn ([a]...) ([a b] ...)...)}\n    BProtocol \n      {...} \n    ...)\n \n  extend takes a type/class (or interface, see below), and one or more\n  protocol + method map pairs. It will extend the polymorphism of the\n  protocol's methods to call the supplied methods when an AType is\n  provided as the first argument. \n\n  Method maps are maps of the keyword-ized method names to ordinary\n  fns. This facilitates easy reuse of existing fns and fn maps, for\n  code reuse/mixins without derivation or composition. You can extend\n  an interface to a protocol. This is primarily to facilitate interop\n  with the host (e.g. Java) but opens the door to incidental multiple\n  inheritance of implementation since a class can inherit from more\n  than one interface, both of which extend the protocol. It is TBD how\n  to specify which impl to use. You can extend a protocol on nil.\n\n  If you are supplying the definitions explicitly (i.e. not reusing\n  exsting functions or mixin maps), you may find it more convenient to\n  use the extend-type or extend-protocol macros.\n\n  Note that multiple independent extend clauses can exist for the same\n  type, not all protocols need be defined in a single extend call.\n\n  See also:\n  extends?, satisfies?, extenders","row":777},{"fixed-arities":[3],"end-row":2391,"meta":{},"name-end-col":23,"name-end-row":2385,"name-row":2385,"added":"1.0","ns":"clojure.core","name":"compare-and-set!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2385","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":80,"arglist-strs":["[atom oldval newval]"],"doc":"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false","row":2385},{"fixed-arities":[1],"end-row":3646,"meta":{},"name-end-col":17,"name-end-row":3634,"name-row":3634,"added":"1.0","ns":"clojure.core","name":"biginteger","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3634","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[x]"],"doc":"Coerce to BigInteger","row":3634},{"fixed-arities":[1],"end-row":7916,"meta":{},"name-end-col":23,"name-end-row":7914,"private":true,"name-row":7914,"ns":"clojure.core","name":"data-reader-var","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7914","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":32,"arglist-strs":["[sym]"],"row":7914},{"end-row":7964,"meta":{},"name-end-col":26,"name-end-row":7964,"private":true,"name-row":7964,"ns":"clojure.core","name":"tapset","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7964","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":20,"end-col":38,"row":7964},{"fixed-arities":[1],"end-row":8077,"meta":{},"name-end-col":17,"name-end-row":8068,"name-row":8068,"added":"1.11","ns":"clojure.core","name":"parse-uuid","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8068","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[s]"],"doc":"Parse a string representing a UUID and return a java.util.UUID instance,\n  or nil if parse fails.\n\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--","row":8068},{"fixed-arities":[1],"end-row":972,"meta":{},"name-end-col":20,"name-end-row":972,"private":true,"name-row":972,"ns":"clojure.core","name":">0?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L972","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":55,"arglist-strs":["[n]"],"row":972},{"end-row":5126,"meta":{},"name-end-col":25,"name-end-row":5111,"name-row":5111,"added":"1.0","ns":"clojure.core","name":"with-precision","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5111","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":19,"arglist-strs":["[precision & exprs]"],"varargs-min-arity":1,"doc":"Sets the precision and rounding mode to be used for BigDecimal operations.\n\n  Usage: (with-precision 10 (/ 1M 3))\n  or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\n  The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\n  HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.","row":5111},{"fixed-arities":[2],"end-row":1349,"meta":{},"name-end-col":16,"name-end-row":1345,"name-row":1345,"added":"1.0","ns":"clojure.core","name":"bit-clear","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1345","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[x n]"],"doc":"Clear bit at index n","row":1345},{"fixed-arities":[2],"end-row":2699,"meta":{},"name-end-col":13,"name-end-row":2689,"name-row":2689,"added":"1.0","ns":"clojure.core","name":"every?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2689","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[pred coll]"],"doc":"Returns true if (pred x) is logical true for every x in coll, else\n  false.","row":2689},{"fixed-arities":[1],"end-row":3551,"meta":{},"name-end-col":22,"name-end-row":3547,"name-row":3547,"added":"1.3","ns":"clojure.core","name":"unchecked-float","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3547","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]"],"doc":"Coerce to float. Subject to rounding.","row":3547},{"fixed-arities":[0,1,2],"end-row":1020,"meta":{},"name-end-col":8,"name-end-row":1010,"name-row":1010,"added":"1.2","ns":"clojure.core","name":"*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1010","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the product of nums. (*) returns 1. Does not auto-promote\n  longs, will throw on overflow. See also: *'","row":1010},{"fixed-arities":[0],"end-row":2277,"meta":{},"name-end-col":22,"name-end-row":2271,"name-row":2271,"added":"1.0","ns":"clojure.core","name":"shutdown-agents","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2271","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[]"],"doc":"Initiates a shutdown of the thread pools that back the agent\n  system. Running actions will complete, but no new actions will be\n  accepted","row":2271},{"fixed-arities":[0],"end-row":1954,"meta":{},"name-end-col":26,"name-end-row":1948,"name-row":1948,"added":"1.1","ns":"clojure.core","name":"pop-thread-bindings","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1948","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[]"],"doc":"Pop one set of bindings pushed with push-binding before. It is an error to\n  pop bindings without pushing before.","row":1948},{"end-row":125,"meta":{},"name-end-col":16,"name-end-row":70,"name-row":70,"added":"1.2","ns":"clojure.core","name":"reify","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L70","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":63,"arglist-strs":["[& opts+specs]"],"varargs-min-arity":0,"doc":"reify creates an object implementing a protocol or interface.\n  reify is a macro with the following structure:\n\n (reify options* specs*)\n  \n  Currently there are no options.\n\n  Each spec consists of the protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-interface-or-Object\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s) and interface(s). You can also define overrides for\n  methods of Object. Note that the first parameter must be supplied to\n  correspond to the target object ('this' in Java parlance). Thus\n  methods for interfaces will take one more argument than do the\n  interface declarations.  Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  The return type can be indicated by a type hint on the method name,\n  and arg types can be indicated by a type hint on arg names. If you\n  leave out all hints, reify will try to match on same name/arity\n  method in the protocol(s)/interface(s) - this is preferred. If you\n  supply any hints at all, no inference is done, so all hints (or\n  default of Object) must be correct, for both arguments and return\n  type. If a method is overloaded in a protocol/interface, multiple\n  independent method definitions must be supplied.  If overloaded with\n  same arity in an interface you must specify complete hints to\n  disambiguate - a missing hint implies Object.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n  \n  (str (let [f \"foo\"] \n       (reify Object \n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"] \n       (reify clojure.lang.Seqable \n         (seq [this] (seq f)))))\n  == (\\f \\o \\o))\n  \n  reify always implements clojure.lang.IObj and transfers meta\n  data of the form to the created object.\n  \n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}","row":70},{"fixed-arities":[0],"end-row":7193,"meta":{},"name-end-col":14,"name-end-row":7164,"name-row":7164,"added":"1.1","ns":"clojure.core","name":"promise","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7164","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[]"],"doc":"Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?.","row":7164},{"fixed-arities":[1],"end-row":131,"meta":{},"name-end-col":12,"name-end-row":130,"name-row":130,"ns":"clojure.core","name":"munge","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L130","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":71,"arglist-strs":["[s]"],"row":130},{"fixed-arities":[1],"end-row":1154,"meta":{},"name-end-col":11,"name-end-row":1149,"name-row":1149,"added":"1.0","ns":"clojure.core","name":"dec'","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1149","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[x]"],"doc":"Returns a number one less than num. Supports arbitrary precision.\n  See also: dec","row":1149},{"fixed-arities":[1],"end-row":5566,"meta":{},"name-end-col":16,"name-end-row":5562,"name-row":5562,"added":"1.0","ns":"clojure.core","name":"not-empty","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5562","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":33,"arglist-strs":["[coll]"],"doc":"If coll is empty, returns nil, else coll","row":5562},{"fixed-arities":[1],"end-row":4991,"meta":{},"name-end-col":14,"name-end-row":4983,"name-row":4983,"added":"1.0","ns":"clojure.core","name":"xml-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4983","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[root]"],"doc":"A tree seq on the xml elements as per xml/parse","row":4983},{"fixed-arities":[2],"end-row":220,"meta":{"arglists":["quote",[["obj","m"]]]},"name-end-col":11,"name-end-row":219,"name-row":219,"added":"1.0","ns":"clojure.core","name":"with-meta","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L213","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":34,"arglist-strs":["[x m]"],"doc":"Returns an object of the same type and value as obj, with\n    map m as its metadata.","row":213},{"fixed-arities":[1],"end-row":4839,"meta":{},"name-end-col":15,"name-end-row":4832,"name-row":4832,"added":"1.10","ns":"clojure.core","name":"ex-cause","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4832","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[ex]"],"doc":"Returns the cause of ex if ex is a Throwable.\n  Otherwise returns nil.","row":4832},{"fixed-arities":[1],"end-row":521,"meta":{},"name-end-col":30,"name-end-row":517,"private":true,"name-row":517,"ns":"clojure.core","name":"ams-check","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L517","lang":[],"filename":"/src/clj/clojure/gvec.clj","macro":true,"col":1,"name-col":21,"end-col":76,"arglist-strs":["[t]"],"row":517},{"fixed-arities":[1,2],"end-row":5252,"meta":{},"name-end-col":16,"name-end-row":5231,"name-row":5231,"added":"1.0","ns":"clojure.core","name":"interpose","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5231","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[sep]","[sep coll]"],"doc":"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.","row":5231},{"fixed-arities":[3,2],"end-row":5012,"meta":{},"name-end-col":11,"name-end-row":5006,"name-row":5006,"added":"1.0","ns":"clojure.core","name":"subs","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5006","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[s start]","[s start end]"],"doc":"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.","row":5006},{"end-row":6317,"meta":{},"name-end-col":4,"name-end-row":6317,"name-row":6317,"added":"1.0","ns":"clojure.core","name":"*1","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6314","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":5,"doc":"bound in a repl thread to the most recent value printed","row":6314},{"end-row":434,"meta":{},"name-end-col":20,"name-end-row":427,"name-row":427,"added":"1.1","ns":"clojure.core","name":"sorted-set-by","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L427","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[comparator & keys]"],"varargs-min-arity":1,"doc":"Returns a new sorted set with supplied keys, using the supplied\n  comparator.  Any equal keys are handled as if by repeated uses of\n  conj.","row":427},{"end-row":1798,"meta":{"arglists":["quote",[["name","docstring?","attr-map?","dispatch-fn","&","options"]]]},"name-end-col":19,"name-end-row":1742,"name-row":1742,"added":"1.0","ns":"clojure.core","name":"defmulti","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1742","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":98,"arglist-strs":["[mm-name & options]"],"varargs-min-arity":1,"doc":"Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).","row":1742},{"fixed-arities":[1,2],"end-row":3118,"meta":{},"name-end-col":11,"name-end-row":3103,"name-row":3103,"added":"1.0","ns":"clojure.core","name":"sort","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3103","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":11,"arglist-strs":["[coll]","[comp coll]"],"doc":"Returns a sorted sequence of the items in coll. If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  Guaranteed to be stable: equal elements will\n  not be reordered.  If coll is a Java array, it will be modified.  To\n  avoid this, sort a copy of the array.","row":3103},{"end-row":4738,"meta":{},"name-end-col":18,"name-end-row":4735,"name-row":4735,"added":"1.0","ns":"clojure.core","name":"comment","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4735","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":12,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Ignores body, yields nil","row":4735},{"end-row":2796,"meta":{},"name-end-col":18,"name-end-row":2793,"name-row":2793,"added":"1.0","ns":"clojure.core","name":"declare","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2793","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":81,"arglist-strs":["[& names]"],"varargs-min-arity":0,"doc":"defs the supplied var names with no bindings, useful for making forward declarations.","row":2793},{"fixed-arities":[4],"end-row":57,"meta":{},"name-end-col":20,"name-end-row":37,"name-row":37,"ns":"clojure.core","name":"->ArrayChunk","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L37","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":16,"arglist-strs":["[am arr off end]"],"row":37},{"fixed-arities":[1],"end-row":701,"meta":{},"name-end-col":42,"name-end-row":700,"name-row":700,"ns":"clojure.core","name":"chunk","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L700","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":37,"end-col":14,"arglist-strs":["[b]"],"row":700},{"fixed-arities":[2],"end-row":4805,"meta":{},"name-end-col":33,"name-end-row":4798,"private":true,"name-row":4798,"ns":"clojure.core","name":"elide-top-frames","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4798","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":88,"arglist-strs":["[ex class-name]"],"row":4798},{"fixed-arities":[1],"end-row":6578,"meta":{},"name-end-col":19,"name-end-row":6574,"name-row":6574,"added":"1.1","ns":"clojure.core","name":"future-done?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6574","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[f]"],"doc":"Returns true if future f is done","row":6574},{"fixed-arities":[1,2],"end-row":5363,"meta":{},"name-end-col":16,"name-end-row":5357,"name-row":5357,"added":"1.0","ns":"clojure.core","name":"int-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5357","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":84,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of ints","row":5357},{"fixed-arities":[2],"end-row":353,"meta":{},"name-end-col":11,"name-end-row":348,"name-row":348,"added":"1.0","ns":"clojure.core","name":"cast","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L348","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[c x]"],"doc":"Throws a ClassCastException if x is not a c, else returns x.","row":348},{"fixed-arities":[1],"end-row":3215,"meta":{},"name-end-col":11,"name-end-row":3211,"name-row":3211,"added":"1.0","ns":"clojure.core","name":"eval","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3211","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[form]"],"doc":"Evaluates the form data structure (not text!) and returns the result.","row":3211},{"end-row":5845,"meta":{"arglists":["quote",[["name","docstring?","attr-map?","references*"]]]},"name-end-col":13,"name-end-row":5789,"name-row":5789,"added":"1.0","ns":"clojure.core","name":"ns","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5789","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":71,"arglist-strs":["[name & references]"],"varargs-min-arity":1,"doc":"Sets *ns* to the namespace named by name (unevaluated), creating it\n  if needed.  references can be zero or more of: (:refer-clojure ...)\n  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\n  with the syntax of refer-clojure/require/use/import/load/gen-class\n  respectively, except the arguments are unevaluated and need not be\n  quoted. (:gen-class ...), when supplied, defaults to :name\n  corresponding to the ns name, :main true, :impl-ns same as ns, and\n  :init-impl-ns true. All options of gen-class are\n  supported. The :gen-class directive is ignored when not\n  compiling. If :gen-class is not supplied, when compiled only an\n  nsname__init.class will be generated. If :refer-clojure is not used, a\n  default (refer 'clojure.core) is used.  Use of ns is preferred to\n  individual calls to in-ns/require/use/import:\n\n  (ns foo.bar\n    (:refer-clojure :exclude [ancestors printf])\n    (:require (clojure.contrib sql combinatorics))\n    (:use (my.lib this that))\n    (:import (java.util Date Timer Random)\n             (java.sql Connection Statement)))","row":5789},{"fixed-arities":[1],"end-row":3557,"meta":{},"name-end-col":23,"name-end-row":3553,"name-row":3553,"added":"1.3","ns":"clojure.core","name":"unchecked-double","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3553","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[x]"],"doc":"Coerce to double. Subject to rounding.","row":3553},{"fixed-arities":[2],"end-row":1692,"meta":{},"name-end-col":13,"name-end-row":1676,"name-row":1676,"added":"1.0","ns":"clojure.core","name":"..","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1676","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":47,"arglist-strs":["[x form]","[x form & more]"],"varargs-min-arity":2,"doc":"form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.","row":1676},{"end-row":638,"meta":{},"name-end-col":20,"name-end-row":507,"name-row":507,"added":"1.0","ns":"clojure.core","name":"gen-class","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L507","lang":[],"filename":"/src/clj/clojure/genclass.clj","macro":true,"col":1,"name-col":11,"end-col":65,"arglist-strs":["[& options]"],"varargs-min-arity":0,"doc":"When compiling, generates compiled bytecode for a class with the\n  given package-qualified :name (which, as all names in these\n  parameters, can be a string or symbol), and writes the .class file\n  to the *compile-path* directory.  When not compiling, does\n  nothing. The gen-class construct contains no implementation, as the\n  implementation will be dynamically sought by the generated class in\n  functions in an implementing Clojure namespace. Given a generated\n  class org.mydomain.MyClass with a method named mymethod, gen-class\n  will generate an implementation that looks for a function named by \n  (str prefix mymethod) (default prefix: \"-\") in a\n  Clojure namespace specified by :impl-ns\n  (defaults to the current namespace). All inherited methods,\n  generated methods, and init and main functions (see :methods, :init,\n  and :main below) will be found similarly prefixed. By default, the\n  static initializer for the generated class will attempt to load the\n  Clojure support code for the class as a resource from the classpath,\n  e.g. in the example case, ``org/mydomain/MyClass__init.class``. This\n  behavior can be controlled by :load-impl-ns\n\n  Note that methods with a maximum of 18 parameters are supported.\n\n  In all subsequent sections taking types, the primitive types can be\n  referred to by their Java names (int, float etc), and classes in the\n  java.lang package can be used without a package qualifier. All other\n  classes must be fully qualified.\n\n  Options should be a set of key/value pairs, all except for :name are optional:\n\n  :name aname\n\n  The package-qualified name of the class to be generated\n\n  :extends aclass\n\n  Specifies the superclass, the non-private methods of which will be\n  overridden by the class. If not provided, defaults to Object.\n\n  :implements [interface ...]\n\n  One or more interfaces, the methods of which will be implemented by the class.\n\n  :init name\n\n  If supplied, names a function that will be called with the arguments\n  to the constructor. Must return [ [superclass-constructor-args] state] \n  If not supplied, the constructor args are passed directly to\n  the superclass constructor and the state will be nil\n\n  :constructors {[param-types] [super-param-types], ...}\n\n  By default, constructors are created for the generated class which\n  match the signature(s) of the constructors for the superclass. This\n  parameter may be used to explicitly specify constructors, each entry\n  providing a mapping from a constructor signature to a superclass\n  constructor signature. When you supply this, you must supply an :init\n  specifier. \n\n  :post-init name\n\n  If supplied, names a function that will be called with the object as\n  the first argument, followed by the arguments to the constructor.\n  It will be called every time an object of this class is created,\n  immediately after all the inherited constructors have completed.\n  Its return value is ignored.\n\n  :methods [ [name [param-types] return-type], ...]\n\n  The generated class automatically defines all of the non-private\n  methods of its superclasses/interfaces. This parameter can be used\n  to specify the signatures of additional methods of the generated\n  class. Static methods can be specified with ^{:static true} in the\n  signature's metadata. Do not repeat superclass/interface signatures\n  here.\n\n  :main boolean\n\n  If supplied and true, a static public main function will be generated. It will\n  pass each string of the String[] argument as a separate argument to\n  a function called (str prefix main).\n\n  :factory name\n\n  If supplied, a (set of) public static factory function(s) will be\n  created with the given name, and the same signature(s) as the\n  constructor(s).\n  \n  :state name\n\n  If supplied, a public final instance field with the given name will be\n  created. You must supply an :init function in order to provide a\n  value for the state. Note that, though final, the state can be a ref\n  or agent, supporting the creation of Java objects with transactional\n  or asynchronous mutation semantics.\n\n  :exposes {protected-field-name {:get name :set name}, ...}\n\n  Since the implementations of the methods of the generated class\n  occur in Clojure functions, they have no access to the inherited\n  protected fields of the superclass. This parameter can be used to\n  generate public getter/setter methods exposing the protected field(s)\n  for use in the implementation.\n\n  :exposes-methods {super-method-name exposed-name, ...}\n\n  It is sometimes necessary to call the superclass' implementation of an\n  overridden method.  Those methods may be exposed and referred in \n  the new method implementation by a local name.\n\n  :prefix string\n\n  Default: \"-\" Methods called e.g. Foo will be looked up in vars called\n  prefixFoo in the implementing ns.\n\n  :impl-ns name\n\n  Default: the name of the current ns. Implementations of methods will be \n  looked up in this namespace.\n\n  :load-impl-ns boolean\n\n  Default: true. Causes the static initializer for the generated class\n  to reference the load code for the implementing namespace. Should be\n  true when implementing-ns is the default, false if you intend to\n  load the code via some other method.","row":507},{"end-row":3740,"meta":{},"name-end-col":14,"name-end-row":3734,"name-row":3734,"added":"1.0","ns":"clojure.core","name":"println","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3734","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[& more]"],"varargs-min-arity":0,"doc":"Same as print followed by (newline)","row":3734},{"fixed-arities":[2],"end-row":698,"meta":{},"name-end-col":28,"name-end-row":697,"name-row":697,"ns":"clojure.core","name":"chunk-append","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L697","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":14,"arglist-strs":["[b x]"],"row":697},{"fixed-arities":[3,2],"end-row":5685,"meta":{},"name-end-col":13,"name-end-row":5651,"name-row":5651,"added":"1.0","ns":"clojure.core","name":"derive","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5651","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[tag parent]","[h tag parent]"],"doc":"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.","row":5651},{"fixed-arities":[1],"end-row":7349,"meta":{},"name-end-col":14,"name-end-row":7342,"name-row":7342,"added":"1.2","ns":"clojure.core","name":"shuffle","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7342","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[coll]"],"doc":"Return a random permutation of coll","row":7342},{"fixed-arities":[1],"end-row":4496,"meta":{},"name-end-col":18,"name-end-row":4402,"name-row":4402,"ns":"clojure.core","name":"destructure","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4402","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[bindings]"],"row":4402},{"fixed-arities":[4,6,3,5],"end-row":6239,"meta":{},"name-end-col":13,"name-end-row":6223,"name-row":6223,"added":"1.7","ns":"clojure.core","name":"update","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6223","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[m k f]","[m k f x]","[m k f x y]","[m k f x y z]","[m k f x y z & more]"],"varargs-min-arity":6,"doc":"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.","row":6223},{"end-row":3273,"meta":{},"name-end-col":16,"name-end-row":3217,"name-row":3217,"added":"1.0","ns":"clojure.core","name":"doseq","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3217","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":41,"arglist-strs":["[seq-exprs & body]"],"varargs-min-arity":1,"doc":"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.","row":3217},{"fixed-arities":[1],"end-row":4104,"meta":{},"name-end-col":11,"name-end-row":4100,"name-row":4100,"added":"1.0","ns":"clojure.core","name":"set?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4100","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[x]"],"doc":"Returns true if x implements IPersistentSet","row":4100},{"fixed-arities":[1],"end-row":6392,"meta":{},"name-end-col":14,"name-end-row":6378,"name-row":6378,"added":"1.0","ns":"clojure.core","name":"memoize","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6378","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[f]"],"doc":"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.","row":6378},{"end-row":7638,"meta":{},"name-end-col":18,"name-end-row":7623,"name-row":7623,"added":"1.5","ns":"clojure.core","name":"cond->>","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7623","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":27,"arglist-strs":["[expr & clauses]"],"varargs-min-arity":1,"doc":"Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.","row":7623},{"fixed-arities":[1],"end-row":6301,"meta":{},"name-end-col":15,"name-end-row":6297,"name-row":6297,"added":"1.0","ns":"clojure.core","name":"counted?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6297","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[coll]"],"doc":"Returns true if coll implements count in constant time","row":6297},{"fixed-arities":[1],"end-row":6263,"meta":{},"name-end-col":15,"name-end-row":6260,"name-row":6260,"added":"1.9","ns":"clojure.core","name":"seqable?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6260","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[x]"],"doc":"Return true if the seq function is supported for x","row":6260},{"fixed-arities":[1],"end-row":3618,"meta":{},"name-end-col":16,"name-end-row":3613,"name-row":3613,"added":"1.0","ns":"clojure.core","name":"rational?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3613","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[n]"],"doc":"Returns true if n is a rational number","row":3613},{"fixed-arities":[1,2],"end-row":5324,"meta":{},"name-end-col":17,"name-end-row":5318,"name-row":5318,"added":"1.1","ns":"clojure.core","name":"byte-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5318","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":85,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of bytes","row":5318},{"fixed-arities":[1],"end-row":119,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":7,"name-end-row":119,"name-row":119,"added":"1.0","ns":"clojure.core","name":"fnext","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L114","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":49,"arglist-strs":["[x]"],"doc":"Same as (first (next x))","row":114},{"fixed-arities":[2],"end-row":81,"meta":{},"name-end-col":18,"name-end-row":72,"private":true,"name-row":72,"ns":"clojure.core","name":"print-meta","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L72","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":24,"arglist-strs":["[o w]"],"row":72},{"fixed-arities":[1],"end-row":1469,"meta":{},"name-end-col":15,"name-end-row":1465,"name-row":1465,"added":"1.0","ns":"clojure.core","name":"identity","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1465","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":9,"arglist-strs":["[x]"],"doc":"Returns its argument.","row":1465},{"end-row":868,"meta":{},"name-end-col":22,"name-end-row":845,"name-row":845,"added":"1.2","ns":"clojure.core","name":"extend-type","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L845","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":30,"arglist-strs":["[t & specs]"],"varargs-min-arity":1,"doc":"A macro that expands into an extend call. Useful when you are\n  supplying the definitions explicitly inline, extend-type\n  automatically creates the maps required by extend.  Propagates the\n  class as a type hint on the first argument of all fns.\n\n  (extend-type MyType \n    Countable\n      (cnt [c] ...)\n    Foo\n      (bar [x y] ...)\n      (baz ([x] ...) ([x y & zs] ...)))\n\n  expands into:\n\n  (extend MyType\n   Countable\n     {:cnt (fn [c] ...)}\n   Foo\n     {:baz (fn ([x] ...) ([x y & zs] ...))\n      :bar (fn [x y] ...)})","row":845},{"end-row":351,"meta":{},"name-end-col":18,"name-end-row":345,"name-row":345,"added":"1.0","ns":"clojure.core","name":"char-name-string","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L342","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":2,"end-col":23,"doc":"Returns name string for char or nil if none","row":342},{"fixed-arities":[2],"end-row":4909,"meta":{},"name-end-col":13,"name-end-row":4899,"name-row":4899,"added":"1.0","ns":"clojure.core","name":"re-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4899","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[re s]"],"doc":"Returns a lazy sequence of successive matches of pattern in string,\n  using java.util.regex.Matcher.find(), each such match processed with\n  re-groups.","row":4899},{"fixed-arities":[1],"end-row":31,"meta":{},"name-end-col":9,"protocol-ns":"clojure.core","name-end-row":31,"name-row":31,"ns":"clojure.core","name":"array","defined-by":"clojure.core/definterface","protocol-name":"ArrayManager","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L31","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":22,"arglist-strs":["[size]"],"row":31},{"fixed-arities":[0,1],"end-row":7739,"meta":{},"name-end-col":13,"name-end-row":7723,"name-row":7723,"added":"1.7","ns":"clojure.core","name":"dedupe","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7723","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[]","[coll]"],"doc":"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.","row":7723},{"fixed-arities":[1],"end-row":2313,"meta":{},"name-end-col":10,"name-end-row":2279,"name-row":2279,"added":"1.0","ns":"clojure.core","name":"ref","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2279","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":9,"arglist-strs":["[x]","[x & options]"],"varargs-min-arity":1,"doc":"Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.","row":2279},{"fixed-arities":[1,2],"end-row":915,"meta":{},"name-end-col":8,"name-end-row":902,"name-row":902,"added":"1.0","ns":"clojure.core","name":"<","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L902","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.","row":902},{"fixed-arities":[1],"end-row":4948,"meta":{},"name-end-col":15,"name-end-row":4944,"name-row":4944,"added":"1.0","ns":"clojure.core","name":"rand-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4944","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[n]"],"doc":"Returns a random integer between 0 (inclusive) and n (exclusive).","row":4944},{"end-row":5926,"meta":{},"name-end-col":29,"name-end-row":5926,"name-row":5926,"ns":"clojure.core","name":"load","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5926","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":25,"end-col":30,"row":5926},{"fixed-arities":[1],"end-row":2808,"meta":{},"name-end-col":13,"name-end-row":2800,"name-row":2800,"added":"1.0","ns":"clojure.core","name":"mapcat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2800","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[f]","[f & colls]"],"varargs-min-arity":1,"doc":"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided","row":2800},{"fixed-arities":[1,2],"end-row":5466,"meta":{},"name-end-col":12,"name-end-row":5422,"name-row":5422,"added":"1.0","ns":"clojure.core","name":"seque","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5422","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[s]","[n-or-q s]"],"doc":"Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.","row":5422},{"fixed-arities":[3,2],"end-row":900,"meta":{},"name-end-col":10,"name-end-row":891,"name-row":891,"added":"1.0","ns":"clojure.core","name":"nth","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L891","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":75,"arglist-strs":["[coll index]","[coll index not-found]"],"doc":"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, Java arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.","row":891},{"fixed-arities":[2],"end-row":1245,"meta":{},"name-end-col":25,"name-end-row":1240,"name-row":1240,"added":"1.0","ns":"clojure.core","name":"unchecked-multiply","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1240","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[x y]"],"doc":"Returns the product of x and y, both long.\n  Note - uses a primitive operator subject to overflow.","row":1240},{"fixed-arities":[2],"end-row":4532,"meta":{},"name-end-col":21,"name-end-row":4517,"private":true,"name-row":4517,"ns":"clojure.core","name":"maybe-destructured","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4516","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":25,"arglist-strs":["[params body]"],"row":4516},{"fixed-arities":[1],"end-row":7685,"meta":{},"name-end-col":35,"name-end-row":7680,"private":true,"name-row":7680,"ns":"clojure.core","name":"preserving-reduced","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7680","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":14,"arglist-strs":["[rf]"],"row":7680},{"fixed-arities":[2],"end-row":4733,"meta":{},"name-end-col":14,"name-end-row":4648,"name-row":4648,"added":"1.0","ns":"clojure.core","name":"for","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4648","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":39,"arglist-strs":["[seq-exprs body-expr]"],"doc":"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))","row":4648},{"fixed-arities":[3,2],"end-row":3830,"meta":{},"name-end-col":13,"name-end-row":3819,"name-row":3819,"added":"1.0","ns":"clojure.core","name":"subvec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3819","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[v start]","[v start end]"],"doc":"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.","row":3819},{"fixed-arities":[4],"end-row":28,"meta":{},"name-end-col":11,"protocol-ns":"clojure.core","name-end-row":28,"name-row":28,"ns":"clojure.core","name":"doAssoc","defined-by":"clojure.core/definterface","protocol-name":"IVecImpl","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L28","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":41,"arglist-strs":["[level node i val]"],"row":28},{"fixed-arities":[1],"end-row":1488,"meta":{},"name-end-col":10,"name-end-row":1481,"name-row":1481,"added":"1.0","ns":"clojure.core","name":"pop","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1481","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[coll]"],"doc":"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item. If\n  the collection is empty, throws an exception.  Note - not the same\n  as next/butlast.","row":1481},{"fixed-arities":[1],"end-row":710,"meta":{},"name-end-col":45,"name-end-row":709,"name-row":709,"ns":"clojure.core","name":"chunk-next","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L709","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":35,"end-col":20,"arglist-strs":["[s]"],"row":709},{"end-row":4749,"meta":{},"name-end-col":23,"name-end-row":4740,"name-row":4740,"added":"1.0","ns":"clojure.core","name":"with-out-str","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4740","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":19,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Evaluates exprs in a context in which *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","row":4740},{"end-row":5687,"meta":{},"name-end-col":17,"name-end-row":5687,"name-row":5687,"ns":"clojure.core","name":"flatten","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5687","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":18,"row":5687},{"fixed-arities":[0],"end-row":7162,"meta":{},"name-end-col":18,"name-end-row":7150,"name-row":7150,"added":"1.0","ns":"clojure.core","name":"clojure-version","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7149","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":24,"arglist-strs":["[]"],"doc":"Returns clojure version as a printable string.","row":7149},{"fixed-arities":[1],"end-row":1175,"meta":{},"name-end-col":20,"name-end-row":1170,"name-row":1170,"added":"1.0","ns":"clojure.core","name":"unchecked-inc","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1170","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[x]"],"doc":"Returns a number one greater than x, a long.\n  Note - uses a primitive operator subject to overflow.","row":1170},{"fixed-arities":[2],"end-row":147,"meta":{},"name-end-col":17,"name-end-row":133,"private":true,"name-row":133,"ns":"clojure.core","name":"imap-cons","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L133","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":17,"arglist-strs":["[this o]"],"row":133},{"fixed-arities":[1],"end-row":5004,"meta":{},"name-end-col":11,"name-end-row":5000,"name-row":5000,"added":"1.0","ns":"clojure.core","name":"var?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5000","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[v]"],"doc":"Returns true if v is of type clojure.lang.Var","row":5000},{"fixed-arities":[2],"end-row":711,"meta":{},"name-end-col":21,"name-end-row":645,"private":true,"name-row":645,"ns":"clojure.core","name":"emit-protocol","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L645","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":15,"arglist-strs":["[name opts+sigs]"],"row":645},{"fixed-arities":[1,2],"end-row":7748,"meta":{},"name-end-col":20,"name-end-row":7741,"name-row":7741,"added":"1.7","ns":"clojure.core","name":"random-sample","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7741","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[prob]","[prob coll]"],"doc":"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.","row":7741},{"end-row":7064,"meta":{},"name-end-col":17,"name-end-row":7057,"name-row":7057,"added":"1.1","ns":"clojure.core","name":"future","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7057","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":57,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.","row":7057},{"fixed-arities":[2],"end-row":1506,"meta":{},"name-end-col":16,"name-end-row":1498,"name-row":1498,"added":"1.0","ns":"clojure.core","name":"contains?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1498","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[coll key]"],"doc":"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and Java arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.","row":1498},{"fixed-arities":[1],"end-row":1650,"meta":{},"name-end-col":24,"name-end-row":1647,"name-row":1647,"added":"1.9","ns":"clojure.core","name":"qualified-symbol?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1647","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]"],"doc":"Return true if x is a symbol with a namespace","row":1647},{"fixed-arities":[1],"end-row":64,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":6,"name-end-row":64,"name-row":64,"added":"1.0","ns":"clojure.core","name":"next","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L57","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":59,"arglist-strs":["[x]"],"doc":"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil.","row":57},{"fixed-arities":[1,2],"end-row":1547,"meta":{},"name-end-col":11,"name-end-row":1533,"name-row":1533,"added":"1.0","ns":"clojure.core","name":"disj","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1533","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[set]","[set key]","[set key & ks]"],"varargs-min-arity":2,"doc":"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).","row":1533},{"end-row":5787,"meta":{},"name-end-col":31,"name-end-row":5780,"name-row":5780,"ns":"clojure.core","name":"with-loading-context","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5780","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":56,"arglist-strs":["[& body]"],"varargs-min-arity":0,"row":5780},{"fixed-arities":[2],"end-row":7784,"meta":{},"name-end-col":11,"name-end-row":7778,"name-row":7778,"added":"1.7","ns":"clojure.core","name":"run!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7778","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[proc coll]"],"doc":"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil","row":7778},{"end-row":915,"meta":{},"name-end-col":26,"name-end-row":877,"name-row":877,"added":"1.2","ns":"clojure.core","name":"extend-protocol","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L877","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":34,"arglist-strs":["[p & specs]"],"varargs-min-arity":1,"doc":"Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types. Expands into calls to\n  extend-type:\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))","row":877},{"fixed-arities":[6],"end-row":70,"meta":{},"name-end-col":24,"name-end-row":48,"private":true,"name-row":48,"ns":"clojure.core","name":"print-sequential","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L48","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":27,"arglist-strs":["[begin print-one sep end sequence w]"],"row":48},{"fixed-arities":[3],"end-row":2177,"meta":{},"name-end-col":16,"name-end-row":2161,"name-row":2161,"added":"1.0","ns":"clojure.core","name":"add-watch","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2161","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":70,"arglist-strs":["[reference key fn]"],"doc":"Adds a watch function to an agent/atom/var/ref reference. The watch\n  fn must be a fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch fn\n  will be called synchronously, on the agent's thread if an agent,\n  before any pending sends if agent or ref. Note that an atom's or\n  ref's state may have changed again prior to the fn call, so use\n  old/new-state rather than derefing the reference. Note also that watch\n  fns may be called from multiple threads simultaneously. Var watchers\n  are triggered only by root binding changes, not thread-local\n  set!s. Keys must be unique per reference, and can be used to remove\n  the watch with remove-watch, but are otherwise considered opaque by\n  the watch mechanism.","row":2161},{"fixed-arities":[1,2],"end-row":1085,"meta":{},"name-end-col":8,"name-end-row":1072,"name-row":1072,"added":"1.0","ns":"clojure.core","name":">","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1072","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.","row":1072},{"end-row":36,"meta":{},"name-end-col":23,"name-end-row":20,"name-row":20,"added":"1.2","ns":"clojure.core","name":"definterface","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L20","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":26,"arglist-strs":["[name & sigs]"],"varargs-min-arity":1,"doc":"Creates a new Java interface with the given name and method sigs.\n  The method return types and parameter types may be specified with type hints,\n  defaulting to Object if omitted.\n\n  (definterface MyInterface\n    (^int method1 [x])\n    (^Bar method2 [^Baz b ^Quux q]))","row":20},{"fixed-arities":[4,3,2],"end-row":3207,"meta":{},"name-end-col":16,"name-end-row":3185,"name-row":3185,"added":"1.0","ns":"clojure.core","name":"partition","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3185","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[n coll]","[n step coll]","[n step pad coll]"],"doc":"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.","row":3185},{"fixed-arities":[2],"end-row":18,"meta":{},"name-end-col":17,"name-end-row":18,"name-row":18,"ns":"clojure.core","name":"->VecNode","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L18","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":10,"end-col":29,"arglist-strs":["[edit arr]"],"row":18},{"fixed-arities":[1],"end-row":469,"meta":{},"name-end-col":29,"name-end-row":465,"name-row":465,"added":"1.9","ns":"clojure.core","name":"StackTraceElement->vec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L465","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":7,"end-col":96,"arglist-strs":["[o]"],"doc":"Constructs a data representation for a StackTraceElement: [class method file line]","row":465},{"fixed-arities":[2],"end-row":4002,"meta":{},"name-end-col":17,"name-end-row":3987,"name-row":3987,"added":"1.0","ns":"clojure.core","name":"make-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3987","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[type len]","[type dim & more-dims]"],"varargs-min-arity":2,"doc":"Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE.","row":3987},{"end-row":499,"meta":{},"name-end-col":15,"name-end-row":495,"name-row":495,"added":"1.0","ns":"clojure.core","name":"when","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L495","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":35,"arglist-strs":["[test & body]"],"varargs-min-arity":1,"doc":"Evaluates test. If logical true, evaluates body in an implicit do.","row":495},{"fixed-arities":[2],"end-row":5209,"meta":{},"name-end-col":26,"name-end-row":5200,"name-row":5200,"added":"1.6","ns":"clojure.core","name":"mix-collection-hash","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5200","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[hash-basis count]"],"doc":"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.","row":5200},{"fixed-arities":[1],"end-row":4139,"meta":{},"name-end-col":16,"name-end-row":4133,"name-row":4133,"added":"1.0","ns":"clojure.core","name":"create-ns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4133","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[sym]"],"doc":"Create a new namespace named by the symbol if one doesn't already\n  exist, returns it or the already-existing namespace of the same\n  name.","row":4133},{"fixed-arities":[1],"end-row":6572,"meta":{},"name-end-col":14,"name-end-row":6568,"name-row":6568,"added":"1.1","ns":"clojure.core","name":"future?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6568","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[x]"],"doc":"Returns true if x is a future","row":6568},{"fixed-arities":[1],"end-row":4206,"meta":{},"name-end-col":17,"name-end-row":4201,"name-row":4201,"added":"1.0","ns":"clojure.core","name":"ns-imports","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4201","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[ns]"],"doc":"Returns a map of the import mappings for the namespace.","row":4201},{"fixed-arities":[1],"end-row":3503,"meta":{},"name-end-col":12,"name-end-row":3499,"name-row":3499,"added":"1.0","ns":"clojure.core","name":"short","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3499","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x]"],"doc":"Coerce to short","row":3499},{"fixed-arities":[0,1,4,3,2],"end-row":3769,"meta":{},"name-end-col":11,"name-end-row":3742,"name-row":3742,"added":"1.0","ns":"clojure.core","name":"read","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3742","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[]","[stream]","[stream eof-error? eof-value]","[stream eof-error? eof-value recursive?]","[opts stream]"],"doc":"Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read","row":3742},{"fixed-arities":[2],"end-row":6997,"meta":{},"name-end-col":14,"name-end-row":6988,"name-row":6988,"added":"1.4","ns":"clojure.core","name":"filterv","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6988","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[pred coll]"],"doc":"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.","row":6988},{"end-row":505,"meta":{"arglists":["quote",[["name",["&","fields"],"&","opts+specs"]]]},"name-end-col":18,"name-end-row":423,"name-row":423,"added":"1.2","ns":"clojure.core","name":"deftype","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L423","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","macro":true,"col":1,"name-col":11,"end-col":21,"arglist-strs":["[name fields & opts+specs]"],"varargs-min-arity":2,"doc":"(deftype name [fields*]  options* specs*)\n\n  Options are expressed as sequential keywords and arguments (in any order).\n\n  Supported options:\n  :load-ns - if true, importing the type class will cause the\n             namespace in which the type was defined to be loaded.\n             Defaults to false.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-interface-or-Object\n  (methodName [args*] body)*\n\n  Dynamically generates compiled bytecode for class with the given\n  name, in a package with the same name as the current namespace, the\n  given fields, and, optionally, methods for protocols and/or\n  interfaces. \n\n  The class will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols/interfaces and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :volatile-mutable true or :unsynchronized-mutable\n  true, at which point (set! afield aval) will be supported in method\n  bodies. Note well that mutable fields are extremely difficult to use\n  correctly, and are present only to facilitate the building of higher\n  level constructs, such as Clojure's reference types, in Clojure\n  itself. They are for experts only - if the semantics and\n  implications of :volatile-mutable or :unsynchronized-mutable are not\n  immediately apparent to you, you should not be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s) and interface(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in Java parlance). Thus\n  methods for interfaces will take one more argument than do the\n  interface declarations. Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  When AOT compiling, generates compiled bytecode for a class with the\n  given name (a symbol), prepends the current ns as the package, and\n  writes the .class file to the *compile-path* directory.\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta, __extmap, __hash and __hasheq are currently\n  reserved and should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields","row":423},{"end-row":1726,"meta":{},"name-end-col":9,"name-end-row":1726,"name-row":1726,"ns":"clojure.core","name":"map","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1726","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":6,"end-col":10,"row":1726},{"end-row":2726,"meta":{"arglists":["quote",[["pred","coll"]]]},"name-end-col":10,"name-end-row":2726,"name-row":2726,"added":"1.0","ns":"clojure.core","name":"not-any?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2720","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":27,"doc":"Returns false if (pred x) is logical true for any x in coll,\n  else true.","row":2720},{"fixed-arities":[1],"end-row":5197,"meta":{},"name-end-col":11,"name-end-row":5190,"name-row":5190,"added":"1.0","ns":"clojure.core","name":"hash","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5190","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Returns the hash code of its argument. Note this is the hash code\n  consistent with =, and thus is different than .hashCode for Integer,\n  Short, Byte and Clojure collections.","row":5190},{"fixed-arities":[1],"end-row":3539,"meta":{},"name-end-col":20,"name-end-row":3535,"name-row":3535,"added":"1.3","ns":"clojure.core","name":"unchecked-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3535","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[x]"],"doc":"Coerce to int. Subject to rounding or truncation.","row":3535},{"fixed-arities":[1],"end-row":4146,"meta":{},"name-end-col":16,"name-end-row":4141,"name-row":4141,"added":"1.0","ns":"clojure.core","name":"remove-ns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4141","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[sym]"],"doc":"Removes the namespace named by the symbol. Use with caution.\n  Cannot be used to remove the clojure namespace.","row":4141},{"fixed-arities":[1],"end-row":112,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":8,"name-end-row":112,"name-row":112,"added":"1.0","ns":"clojure.core","name":"nfirst","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L107","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":51,"arglist-strs":["[x]"],"doc":"Same as (next (first x))","row":107},{"fixed-arities":[2],"end-row":1231,"meta":{},"name-end-col":25,"name-end-row":1226,"name-row":1226,"added":"1.0","ns":"clojure.core","name":"unchecked-subtract","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1226","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[x y]"],"doc":"Returns the difference of x and y, both long.\n  Note - uses a primitive operator subject to overflow.","row":1226},{"end-row":505,"meta":{},"name-end-col":19,"name-end-row":501,"name-row":501,"added":"1.0","ns":"clojure.core","name":"when-not","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L501","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":41,"arglist-strs":["[test & body]"],"varargs-min-arity":1,"doc":"Evaluates test. If logical false, evaluates body in an implicit do.","row":501},{"end-row":739,"meta":{},"name-end-col":25,"name-end-row":727,"name-row":727,"added":"1.0","ns":"clojure.core","name":"gen-and-load-class","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L727","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":7,"end-col":85,"arglist-strs":["[& options]"],"varargs-min-arity":0,"doc":"Generates and immediately loads the bytecode for the specified\n  class. Note that a class generated this way can be loaded only once\n  - the JVM supports only one class with a given name per\n  classloader. Subsequent to generation you can import it into any\n  desired namespaces just like any other class. See gen-class for a\n  description of the options.","row":727},{"fixed-arities":[4],"end-row":6717,"meta":{},"name-end-col":29,"name-end-row":6683,"private":true,"name-row":6683,"ns":"clojure.core","name":"merge-hash-collisions","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6683","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":43,"arglist-strs":["[expr-sym default tests thens]"],"doc":"Takes a case expression, default expression, and a sequence of test constants\n  and a corresponding sequence of then expressions. Returns a tuple of\n  [tests thens skip-check-set] where no tests have the same hash. Each set of\n  input test constants with the same hash is replaced with a single test\n  constant (the case int), and their respective thens are combined into:\n  (condp = expr\n    test-1 then-1\n    ...\n    test-n then-n\n    default).\n  The skip-check is a set of case ints for which post-switch equivalence\n  checking must not be done (the cases holding the above condp thens).","row":6683},{"fixed-arities":[1],"end-row":5483,"meta":{},"name-end-col":30,"name-end-row":5478,"private":true,"name-row":5478,"ns":"clojure.core","name":"is-runtime-annotation?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5478","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":74,"arglist-strs":["[c]"],"row":5478},{"fixed-arities":[1,2],"end-row":829,"meta":{},"name-end-col":11,"name-end-row":821,"name-row":821,"added":"1.0","ns":"clojure.core","name":"not=","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L821","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Same as (not (= obj1 obj2))","row":821},{"fixed-arities":[1,2],"end-row":2687,"meta":{},"name-end-col":15,"name-end-row":2664,"name-row":2664,"added":"1.0","ns":"clojure.core","name":"sequence","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2664","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":13,"arglist-strs":["[coll]","[xform coll]","[xform coll & colls]"],"varargs-min-arity":2,"doc":"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments","row":2664},{"fixed-arities":[1],"end-row":648,"meta":{},"name-end-col":13,"name-end-row":641,"private":true,"name-row":641,"ns":"clojure.core","name":"spread","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L641","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[arglist]"],"row":641},{"end-row":7027,"meta":{},"name-end-col":11,"name-end-row":7021,"name-row":7021,"added":"1.2","ns":"clojure.core","name":"spit","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7021","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[f content & options]"],"varargs-min-arity":2,"doc":"Opposite of slurp.  Opens f with writer, writes content, then\n  closes f. Options passed to clojure.java.io/writer.","row":7021},{"fixed-arities":[3],"end-row":548,"meta":{},"name-end-col":27,"name-end-row":547,"name-row":547,"ns":"clojure.core","name":"find-protocol-method","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L547","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[protocol methodk x]"],"row":547},{"fixed-arities":[1],"end-row":1406,"meta":{},"name-end-col":12,"name-end-row":1400,"name-row":1400,"added":"1.0","ns":"clojure.core","name":"even?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1400","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[n]"],"doc":"Returns true if n is even, throws an exception if n is not an integer","row":1400},{"fixed-arities":[1,2],"end-row":801,"meta":{},"name-end-col":8,"name-end-row":785,"name-row":785,"added":"1.0","ns":"clojure.core","name":"=","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L785","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison.","row":785},{"fixed-arities":[1],"end-row":1618,"meta":{},"name-end-col":16,"name-end-row":1612,"name-row":1612,"added":"1.0","ns":"clojure.core","name":"namespace","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1612","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":26,"arglist-strs":["[x]"],"doc":"Returns the namespace String of a symbol or keyword, or nil if not present.","row":1612},{"end-row":407,"meta":{},"name-end-col":17,"name-end-row":400,"name-row":400,"added":"1.0","ns":"clojure.core","name":"sorted-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L400","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[& keyvals]"],"varargs-min-arity":0,"doc":"keyval => key val\n  Returns a new sorted map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.","row":400},{"end-row":387,"meta":{},"name-end-col":16,"name-end-row":334,"name-row":334,"added":"1.0","ns":"clojure.core","name":"proxy","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L334","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[class-and-interfaces args & fs]"],"varargs-min-arity":2,"doc":"class-and-interfaces - a vector of class names\n\n  args - a (possibly empty) vector of arguments to the superclass\n  constructor.\n\n  f => (name [params*] body) or\n  (name ([params*] body) ([params+] body) ...)\n\n  Expands to code which creates a instance of a proxy class that\n  implements the named class/interface(s) by calling the supplied\n  fns. A single class, if provided, must be first. If not provided it\n  defaults to Object.\n\n  The interfaces names must be valid interface types. If a method fn\n  is not provided for a class method, the superclass method will be\n  called. If a method fn is not provided for an interface method, an\n  UnsupportedOperationException will be thrown should it be\n  called. Method fns are closures and can capture the environment in\n  which proxy is called. Each method fn takes an additional implicit\n  first arg, which is bound to 'this. Note that while method fns can\n  be provided to override protected methods, they have no other access\n  to protected members, nor to super, as these capabilities cannot be\n  proxied.","row":334},{"fixed-arities":[1],"end-row":3509,"meta":{},"name-end-col":11,"name-end-row":3505,"name-row":3505,"added":"1.0","ns":"clojure.core","name":"byte","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3505","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[x]"],"doc":"Coerce to byte","row":3505},{"fixed-arities":[1],"end-row":1580,"meta":{},"name-end-col":11,"name-end-row":1576,"name-row":1576,"added":"1.0","ns":"clojure.core","name":"vals","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1576","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[map]"],"doc":"Returns a sequence of the map's values, in the same order as (seq map).","row":1576},{"fixed-arities":[1],"end-row":7850,"meta":{},"name-end-col":26,"name-end-row":7846,"name-row":7846,"added":"1.7","ns":"clojure.core","name":"reader-conditional?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7846","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a reader conditional","row":7846},{"end-row":1674,"meta":{},"name-end-col":18,"name-end-row":1662,"name-row":1662,"added":"1.0","ns":"clojure.core","name":"locking","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1662","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":44,"arglist-strs":["[x & body]"],"varargs-min-arity":1,"doc":"Executes exprs in an implicit do, while holding the monitor of x.\n  Will release the monitor of x in all circumstances.","row":1662},{"fixed-arities":[1],"end-row":1594,"meta":{},"name-end-col":10,"name-end-row":1589,"name-row":1589,"added":"1.0","ns":"clojure.core","name":"val","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1589","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[e]"],"doc":"Returns the value in the map entry.","row":1589},{"fixed-arities":[2],"end-row":1314,"meta":{},"name-end-col":14,"name-end-row":1307,"name-row":1307,"added":"1.0","ns":"clojure.core","name":"bit-and","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1307","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Bitwise and","row":1307},{"end-row":3442,"meta":{},"name-end-col":17,"name-end-row":3426,"name-row":3426,"added":"1.0","ns":"clojure.core","name":"import","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3426","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":38,"arglist-strs":["[& import-symbols-or-lists]"],"varargs-min-arity":0,"doc":"import-list => (package-symbol class-name-symbols*)\n\n  For each name in class-name-symbols, adds a mapping from name to the\n  class named by package.name to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.","row":3426},{"fixed-arities":[2],"end-row":128,"meta":{},"name-end-col":19,"name-end-row":127,"name-row":127,"ns":"clojure.core","name":"hash-combine","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L127","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[x y]"],"row":127},{"end-row":25,"meta":{},"name-end-col":16,"name-end-row":25,"name-row":25,"added":"1.0","ns":"clojure.core","name":"*print-length*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L16","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":2,"end-col":21,"doc":"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.","row":16},{"fixed-arities":[1],"end-row":6246,"meta":{},"name-end-col":13,"name-end-row":6241,"name-row":6241,"added":"1.0","ns":"clojure.core","name":"empty?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6241","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[coll]"],"doc":"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))","row":6241},{"fixed-arities":[1],"end-row":5396,"meta":{},"name-end-col":18,"name-end-row":5393,"name-row":5393,"added":"1.0","ns":"clojure.core","name":"floats","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5393","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":45,"arglist-strs":["[xs]"],"doc":"Casts to float[]","row":5393},{"end-row":6376,"meta":{},"name-end-col":16,"name-end-row":6368,"name-row":6368,"added":"1.0","ns":"clojure.core","name":"while","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6368","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":18,"arglist-strs":["[test & body]"],"varargs-min-arity":1,"doc":"Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil","row":6368},{"fixed-arities":[0],"end-row":1962,"meta":{},"name-end-col":26,"name-end-row":1956,"name-row":1956,"added":"1.1","ns":"clojure.core","name":"get-thread-bindings","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1956","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[]"],"doc":"Get a map with the Var/value pairs which is currently in effect for the\n  current thread.","row":1956},{"fixed-arities":[2],"end-row":81,"meta":{},"name-end-col":43,"name-end-row":74,"private":true,"name-row":74,"ns":"clojure.core","name":"find-field","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L74","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":33,"end-col":52,"arglist-strs":["[c f]"],"row":74},{"fixed-arities":[1],"end-row":5485,"meta":{},"name-end-col":18,"name-end-row":5485,"private":true,"name-row":5485,"ns":"clojure.core","name":"descriptor","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5485","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":65,"arglist-strs":["[c]"],"row":5485},{"fixed-arities":[2],"end-row":4081,"meta":{},"name-end-col":15,"name-end-row":4072,"name-row":4072,"added":"1.0","ns":"clojure.core","name":"accessor","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4072","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":62,"arglist-strs":["[s key]"],"doc":"Returns a fn that, given an instance of a structmap with the basis,\n  returns the value at the key.  The key must be in the basis. The\n  returned function should be (slightly) more efficient than using\n  get, but such use of accessors should be limited to known\n  performance-critical areas.","row":4072},{"fixed-arities":[4,3,2],"end-row":2372,"meta":{},"name-end-col":12,"name-end-row":2362,"name-row":2362,"added":"1.0","ns":"clojure.core","name":"swap!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2362","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":69,"arglist-strs":["[atom f]","[atom f x]","[atom f x y]","[atom f x y & args]"],"varargs-min-arity":4,"doc":"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.","row":2362},{"fixed-arities":[1],"end-row":4025,"meta":{},"name-end-col":20,"name-end-row":4019,"name-row":4019,"added":"1.0","ns":"clojure.core","name":"macroexpand-1","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4019","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":51,"arglist-strs":["[form]"],"doc":"If form represents a macro form, returns its expansion,\n  else returns form.","row":4019},{"fixed-arities":[6],"end-row":265,"meta":{},"name-end-col":22,"name-end-row":149,"private":true,"name-row":149,"added":"1.2","ns":"clojure.core","name":"emit-defrecord","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L149","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":20,"arglist-strs":["[tagname cname fields interfaces methods opts]"],"doc":"Do not use this directly - use defrecord","row":149},{"end-row":723,"meta":{},"name-end-col":24,"name-end-row":688,"name-row":688,"added":"1.0","ns":"clojure.core","name":"gen-interface","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L688","lang":[],"filename":"/src/clj/clojure/genclass.clj","macro":true,"col":1,"name-col":11,"end-col":66,"arglist-strs":["[& options]"],"varargs-min-arity":0,"doc":"When compiling, generates compiled bytecode for an interface with\n  the given package-qualified :name (which, as all names in these\n  parameters, can be a string or symbol), and writes the .class file\n  to the *compile-path* directory.  When not compiling, does nothing.\n \n  In all subsequent sections taking types, the primitive types can be\n  referred to by their Java names (int, float etc), and classes in the\n  java.lang package can be used without a package qualifier. All other\n  classes must be fully qualified.\n \n  Options should be a set of key/value pairs, all except for :name are\n  optional:\n\n  :name aname\n\n  The package-qualified name of the class to be generated\n\n  :extends [interface ...]\n\n  One or more interfaces, which will be extended by this interface.\n\n  :methods [ [name [param-types] return-type], ...]\n\n  This parameter is used to specify the signatures of the methods of\n  the generated interface.  Do not repeat superinterface signatures\n  here.","row":688},{"fixed-arities":[2],"end-row":1252,"meta":{},"name-end-col":27,"name-end-row":1247,"name-row":1247,"added":"1.0","ns":"clojure.core","name":"unchecked-divide-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1247","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[x y]"],"doc":"Returns the division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.","row":1247},{"fixed-arities":[0,1],"end-row":5079,"meta":{},"name-end-col":15,"name-end-row":5054,"name-row":5054,"added":"1.0","ns":"clojure.core","name":"distinct","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5054","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[]","[coll]"],"doc":"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.","row":5054},{"fixed-arities":[2],"end-row":574,"meta":{},"name-end-col":17,"name-end-row":570,"name-row":570,"added":"1.2","ns":"clojure.core","name":"satisfies?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L570","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[protocol x]"],"doc":"Returns true if x satisfies the protocol","row":570},{"end-row":3662,"meta":{},"name-end-col":50,"name-end-row":3662,"private":true,"name-row":3662,"ns":"clojure.core","name":"print-initialized","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3662","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":33,"end-col":57,"row":3662},{"end-row":7899,"meta":{},"name-end-col":50,"name-end-row":7872,"name-row":7872,"added":"1.4","ns":"clojure.core","name":"*data-readers*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7872","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":36,"end-col":6,"doc":"Map from reader tag symbols to data reader Vars.\n\n  When Clojure starts, it searches for files named 'data_readers.clj'\n  and 'data_readers.cljc' at the root of the classpath. Each such file\n  must contain a literal map of symbols, like this:\n\n      {foo/bar my.project.foo/bar\n       foo/baz my.project/baz}\n\n  The first symbol in each pair is a tag that will be recognized by\n  the Clojure reader. The second symbol in the pair is the\n  fully-qualified name of a Var which will be invoked by the reader to\n  parse the form following the tag. For example, given the\n  data_readers.clj file above, the Clojure reader would parse this\n  form:\n\n      #foo/bar [1 2 3]\n\n  by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\n  data reader function is invoked on the form AFTER it has been read\n  as a normal Clojure data structure by the reader.\n\n  Reader tags without namespace qualifiers are reserved for\n  Clojure. Default reader tags are defined in\n  clojure.core/default-data-readers but may be overridden in\n  data_readers.clj, data_readers.cljc, or by rebinding this Var.","row":7872},{"fixed-arities":[1,2],"end-row":1125,"meta":{},"name-end-col":10,"name-end-row":1117,"name-row":1117,"added":"1.0","ns":"clojure.core","name":"max","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1117","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the greatest of the nums.","row":1117},{"fixed-arities":[2],"end-row":3028,"meta":{},"name-end-col":16,"name-end-row":3023,"name-row":3023,"added":"1.0","ns":"clojure.core","name":"replicate","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3023","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"deprecated":"1.3","name-col":7,"end-col":29,"arglist-strs":["[n x]"],"doc":"DEPRECATED: Use 'repeat' instead.\n   Returns a lazy seq of n xs.","row":3023},{"end-row":380,"meta":{},"name-end-col":27,"name-end-row":372,"name-row":372,"ns":"clojure.core","name":"primitives-classnames","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L372","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":6,"end-col":29,"row":372},{"end-row":4636,"meta":{},"name-end-col":21,"name-end-row":4624,"name-row":4624,"added":"1.0","ns":"clojure.core","name":"when-first","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4624","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":22,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once","row":4624},{"end-row":2009,"meta":{},"name-end-col":24,"name-end-row":2003,"name-row":2003,"added":"1.1","ns":"clojure.core","name":"with-bindings","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2003","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":49,"arglist-strs":["[binding-map & body]"],"varargs-min-arity":1,"doc":"Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then executes body. Pops the installed\n  bindings after body was evaluated. Returns the value of body.","row":2003},{"fixed-arities":[3,2],"end-row":5032,"meta":{},"name-end-col":14,"name-end-row":5014,"name-row":5014,"added":"1.0","ns":"clojure.core","name":"max-key","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5014","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[k x]","[k x y]","[k x y & more]"],"varargs-min-arity":3,"doc":"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.","row":5014},{"end-row":2563,"meta":{},"name-end-col":17,"name-end-row":2556,"name-row":2556,"added":"1.7","ns":"clojure.core","name":"vswap!","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2556","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":43,"arglist-strs":["[vol f & args]"],"varargs-min-arity":2,"doc":"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.","row":2556},{"fixed-arities":[3],"end-row":3380,"meta":{},"name-end-col":13,"name-end-row":3369,"name-row":3369,"added":"1.1","ns":"clojure.core","name":"assoc!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3369","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[coll key val]","[coll key val & kvs]"],"varargs-min-arity":3,"doc":"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.","row":3369},{"fixed-arities":[1],"end-row":457,"meta":{},"name-end-col":20,"name-end-row":436,"private":true,"name-row":436,"ns":"clojure.core","name":"deref-as-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L436","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":17,"arglist-strs":["[o]"],"row":436},{"fixed-arities":[0,1,2],"end-row":4326,"meta":{},"name-end-col":17,"name-end-row":4310,"name-row":4310,"added":"1.0","ns":"clojure.core","name":"interleave","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4310","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":72,"arglist-strs":["[]","[c1]","[c1 c2]","[c1 c2 & colls]"],"varargs-min-arity":2,"doc":"Returns a lazy seq of the first item in each coll, then the second etc.","row":4310},{"fixed-arities":[1],"end-row":4830,"meta":{},"name-end-col":17,"name-end-row":4824,"name-row":4824,"added":"1.10","ns":"clojure.core","name":"ex-message","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4824","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[ex]"],"doc":"Returns the message attached to ex if ex is a Throwable.\n  Otherwise returns nil.","row":4824},{"fixed-arities":[0,1],"end-row":854,"meta":{},"name-end-col":14,"name-end-row":844,"name-row":844,"added":"1.0","ns":"clojure.core","name":"and","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L844","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":37,"arglist-strs":["[]","[x]","[x & next]"],"varargs-min-arity":1,"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.","row":844},{"fixed-arities":[1],"end-row":1610,"meta":{},"name-end-col":11,"name-end-row":1604,"name-row":1604,"added":"1.0","ns":"clojure.core","name":"name","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1604","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[x]"],"doc":"Returns the name String of a string, symbol or keyword.","row":1604},{"fixed-arities":[1,2],"end-row":7412,"meta":{},"name-end-col":11,"name-end-row":7381,"name-row":7381,"added":"1.2","ns":"clojure.core","name":"keep","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7381","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.","row":7381},{"fixed-arities":[1],"end-row":718,"meta":{},"name-end-col":28,"name-end-row":717,"name-row":717,"ns":"clojure.core","name":"chunked-seq?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L717","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":42,"arglist-strs":["[s]"],"row":717},{"fixed-arities":[2],"end-row":7584,"meta":{},"name-end-col":21,"name-end-row":7566,"name-row":7566,"added":"1.3","ns":"clojure.core","name":"with-redefs-fn","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7566","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":33,"arglist-strs":["[binding-map func]"],"doc":"Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.","row":7566},{"fixed-arities":[1],"end-row":3101,"meta":{},"name-end-col":17,"name-end-row":3095,"name-row":3095,"added":"1.0","ns":"clojure.core","name":"comparator","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3095","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[pred]"],"doc":"Returns an implementation of java.util.Comparator based upon pred.","row":3095},{"fixed-arities":[1],"end-row":1426,"meta":{},"name-end-col":15,"name-end-row":1422,"name-row":1422,"added":"1.9","ns":"clojure.core","name":"pos-int?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1422","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[x]"],"doc":"Return true if x is a positive fixed precision integer","row":1422},{"end-row":2526,"meta":{},"name-end-col":15,"name-end-row":2515,"name-row":2515,"added":"1.0","ns":"clojure.core","name":"sync","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2515","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":42,"arglist-strs":["[flags-ignored-for-now & body]"],"varargs-min-arity":1,"doc":"transaction-flags => TBD, pass nil for now\n\n  Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of sync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.","row":2515},{"fixed-arities":[2],"end-row":1217,"meta":{},"name-end-col":20,"name-end-row":1212,"name-row":1212,"added":"1.0","ns":"clojure.core","name":"unchecked-add","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1212","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x y]"],"doc":"Returns the sum of x and y, both long.\n  Note - uses a primitive operator subject to overflow.","row":1212},{"fixed-arities":[1],"end-row":531,"meta":{},"name-end-col":10,"name-end-row":526,"name-row":526,"added":"1.0","ns":"clojure.core","name":"not","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L526","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[x]"],"doc":"Returns true if x is logical false, false otherwise.","row":526},{"fixed-arities":[1],"end-row":105,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":8,"name-end-row":105,"name-row":105,"added":"1.0","ns":"clojure.core","name":"ffirst","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L100","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":52,"arglist-strs":["[x]"],"doc":"Same as (first (first x))","row":100},{"fixed-arities":[1,2],"end-row":5348,"meta":{},"name-end-col":19,"name-end-row":5342,"name-row":5342,"added":"1.0","ns":"clojure.core","name":"double-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5342","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":87,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of doubles","row":5342},{"fixed-arities":[1],"end-row":4131,"meta":{},"name-end-col":14,"name-end-row":4127,"name-row":4127,"added":"1.0","ns":"clojure.core","name":"find-ns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4127","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[sym]"],"doc":"Returns the namespace named by the symbol or nil if it doesn't exist.","row":4127},{"fixed-arities":[2],"end-row":1818,"meta":{},"name-end-col":20,"name-end-row":1813,"name-row":1813,"added":"1.0","ns":"clojure.core","name":"remove-method","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1813","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[multifn dispatch-val]"],"doc":"Removes the method of multimethod associated with dispatch-value.","row":1813},{"end-row":5535,"meta":{},"name-end-col":21,"name-end-row":5530,"name-row":5530,"added":"1.0","ns":"clojure.core","name":"alter-var-root","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5530","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[v f & args]"],"varargs-min-arity":2,"doc":"Atomically alters the root binding of var v by applying f to its\n  current value plus any args","row":5530},{"fixed-arities":[1],"end-row":5376,"meta":{},"name-end-col":20,"name-end-row":5373,"name-row":5373,"added":"1.1","ns":"clojure.core","name":"booleans","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5373","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":47,"arglist-strs":["[xs]"],"doc":"Casts to boolean[]","row":5373},{"fixed-arities":[1],"end-row":5576,"meta":{},"name-end-col":12,"name-end-row":5568,"name-row":5568,"added":"1.0","ns":"clojure.core","name":"bases","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5568","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[c]"],"doc":"Returns the immediate superclass and direct interfaces of c, if any","row":5568},{"fixed-arities":[1,2],"end-row":7269,"meta":{},"name-end-col":19,"name-end-row":7228,"name-row":7228,"added":"1.2","ns":"clojure.core","name":"partition-by","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7228","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":75,"arglist-strs":["[f]","[f coll]"],"doc":"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.","row":7228},{"end-row":7678,"meta":{},"name-end-col":18,"name-end-row":7666,"name-row":7666,"added":"1.5","ns":"clojure.core","name":"some->>","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7666","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":27,"arglist-strs":["[expr & forms]"],"varargs-min-arity":1,"doc":"When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc","row":7666},{"fixed-arities":[2],"end-row":34,"meta":{},"name-end-col":8,"protocol-ns":"clojure.core","name-end-row":34,"name-row":34,"ns":"clojure.core","name":"aget","defined-by":"clojure.core/definterface","protocol-name":"ArrayManager","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L34","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":4,"end-col":22,"arglist-strs":["[arr i]"],"row":34},{"fixed-arities":[0,1,4,6,3,2,5],"end-row":367,"meta":{},"name-end-col":13,"name-end-row":355,"name-row":355,"added":"1.0","ns":"clojure.core","name":"vector","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L355","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":115,"arglist-strs":["[]","[a]","[a b]","[a b c]","[a b c d]","[a b c d e]","[a b c d e f]","[a b c d e f & args]"],"varargs-min-arity":6,"doc":"Creates a new vector containing the args.","row":355},{"fixed-arities":[0,1,2],"end-row":1008,"meta":{},"name-end-col":9,"name-end-row":998,"name-row":998,"added":"1.0","ns":"clojure.core","name":"*'","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L998","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns the product of nums. (*') returns 1. Supports arbitrary precision.\n  See also: *","row":998},{"fixed-arities":[1],"end-row":8097,"meta":{},"name-end-col":11,"name-end-row":8090,"name-row":8090,"added":"1.11","ns":"clojure.core","name":"NaN?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8090","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[num]"],"doc":"Returns true if num is NaN, else false","row":8090},{"fixed-arities":[1],"end-row":4163,"meta":{},"name-end-col":13,"name-end-row":4154,"name-row":4154,"added":"1.0","ns":"clojure.core","name":"the-ns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4154","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":78,"arglist-strs":["[x]"],"doc":"If passed a namespace, returns it. Else, when passed a symbol,\n  returns the namespace named by it, throwing an exception if not\n  found.","row":4154},{"fixed-arities":[3],"end-row":6442,"meta":{},"name-end-col":27,"name-end-row":6441,"private":true,"name-row":6441,"ns":"clojure.core","name":"add-doc-and-meta","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6441","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":66,"arglist-strs":["[name docstring meta]"],"row":6441},{"fixed-arities":[1],"end-row":954,"meta":{},"name-end-col":14,"name-end-row":949,"name-row":949,"added":"1.0","ns":"clojure.core","name":"reverse","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L949","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[coll]"],"doc":"Returns a seq of the items in coll in reverse order. Not lazy.","row":949},{"fixed-arities":[3],"end-row":3934,"meta":{},"name-end-col":11,"name-end-row":3924,"name-row":3924,"added":"1.0","ns":"clojure.core","name":"aset","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3924","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"varargs-min-arity":3,"doc":"Sets the value at the index/indices. Works on Java arrays of\n  reference types. Returns val.","row":3924},{"fixed-arities":[1],"end-row":5476,"meta":{},"name-end-col":22,"name-end-row":5474,"private":true,"name-row":5474,"ns":"clojure.core","name":"is-annotation?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5474","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":63,"arglist-strs":["[c]"],"row":5474},{"fixed-arities":[1,2],"end-row":2503,"meta":{},"name-end-col":22,"name-end-row":2496,"name-row":2496,"added":"1.1","ns":"clojure.core","name":"ref-max-history","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2496","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[ref]","[ref n]"],"doc":"Gets the max-history of a ref, or sets it and returns the ref","row":2496},{"end-row":4253,"meta":{},"name-end-col":12,"name-end-row":4218,"name-row":4218,"added":"1.0","ns":"clojure.core","name":"refer","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4218","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[ns-sym & filters]"],"varargs-min-arity":1,"doc":"refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.","row":4218},{"fixed-arities":[1],"end-row":1147,"meta":{},"name-end-col":10,"name-end-row":1137,"name-row":1137,"added":"1.11","ns":"clojure.core","name":"abs","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1137","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[a]"],"doc":"Returns the absolute value of a.\n  If a is Long/MIN_VALUE => Long/MIN_VALUE\n  If a is a double and zero => +0.0\n  If a is a double and ##Inf or ##-Inf => ##Inf\n  If a is a double and ##NaN => ##NaN","row":1137},{"fixed-arities":[1],"end-row":2569,"meta":{},"name-end-col":16,"name-end-row":2565,"name-row":2565,"added":"1.7","ns":"clojure.core","name":"volatile?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2565","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Returns true if x is a volatile.","row":2565},{"fixed-arities":[1],"end-row":7212,"meta":{},"name-end-col":14,"name-end-row":7204,"name-row":7204,"added":"1.2","ns":"clojure.core","name":"flatten","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7204","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[x]"],"doc":"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat lazy sequence.\n  (flatten nil) returns an empty sequence.","row":7204},{"end-row":5560,"meta":{},"name-end-col":22,"name-end-row":5560,"private":true,"name-row":5560,"ns":"clojure.core","name":"global-hierarchy","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5559","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":6,"end-col":40,"row":5559},{"fixed-arities":[1],"end-row":3497,"meta":{},"name-end-col":13,"name-end-row":3493,"name-row":3493,"added":"1.0","ns":"clojure.core","name":"double","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3493","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[x]"],"doc":"Coerce to double","row":3493},{"end-row":4514,"meta":{},"name-end-col":14,"name-end-row":4498,"name-row":4498,"added":"1.0","ns":"clojure.core","name":"let","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4498","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":42,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://clojure.org/reference/special_forms#binding-forms for\n  more information about destructuring.","row":4498},{"fixed-arities":[1],"end-row":1845,"meta":{},"name-end-col":14,"name-end-row":1841,"name-row":1841,"added":"1.0","ns":"clojure.core","name":"prefers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1841","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[multifn]"],"doc":"Given a multimethod, returns a map of preferred value -> set of other values","row":1841},{"fixed-arities":[2],"end-row":2554,"meta":{},"name-end-col":14,"name-end-row":2549,"name-row":2549,"added":"1.7","ns":"clojure.core","name":"vreset!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2549","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[vol newval]"],"doc":"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.","row":2549},{"fixed-arities":[2],"end-row":1553,"meta":{},"name-end-col":11,"name-end-row":1549,"name-row":1549,"added":"1.0","ns":"clojure.core","name":"find","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1549","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[map key]"],"doc":"Returns the map entry for key, or nil if key not present.","row":1549},{"end-row":6221,"meta":{},"name-end-col":16,"name-end-row":6207,"name-row":6207,"added":"1.0","ns":"clojure.core","name":"update-in","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6207","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[m ks f & args]"],"varargs-min-arity":3,"doc":"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.","row":6207},{"end-row":5851,"meta":{},"name-end-col":24,"name-end-row":5847,"name-row":5847,"added":"1.0","ns":"clojure.core","name":"refer-clojure","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5847","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":51,"arglist-strs":["[& filters]"],"varargs-min-arity":0,"doc":"Same as (refer 'clojure.core <filters>)","row":5847},{"fixed-arities":[1,2],"end-row":1031,"meta":{},"name-end-col":8,"name-end-row":1022,"name-row":1022,"added":"1.0","ns":"clojure.core","name":"/","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1022","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.","row":1022},{"end-row":755,"meta":{},"name-end-col":16,"name-end-row":748,"name-row":748,"added":"1.0","ns":"clojure.core","name":"delay","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L748","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":72,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls. See also - realized?","row":748},{"fixed-arities":[1],"end-row":4332,"meta":{},"name-end-col":14,"name-end-row":4328,"name-row":4328,"added":"1.0","ns":"clojure.core","name":"var-get","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4328","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[x]"],"doc":"Gets the value in the var object","row":4328},{"fixed-arities":[1],"end-row":5381,"meta":{},"name-end-col":17,"name-end-row":5378,"name-row":5378,"added":"1.1","ns":"clojure.core","name":"bytes","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5378","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":44,"arglist-strs":["[xs]"],"doc":"Casts to bytes[]","row":5378},{"fixed-arities":[2],"end-row":3424,"meta":{},"name-end-col":22,"name-end-row":3416,"private":true,"name-row":3416,"added":"1.0","ns":"clojure.core","name":"into1","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3416","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":29,"arglist-strs":["[to from]"],"doc":"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.","row":3416},{"fixed-arities":[2],"end-row":2718,"meta":{},"name-end-col":11,"name-end-row":2709,"name-row":2709,"added":"1.0","ns":"clojure.core","name":"some","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2709","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[pred coll]"],"doc":"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)","row":2709},{"fixed-arities":[3],"end-row":5939,"meta":{},"name-end-col":16,"name-end-row":5928,"private":true,"name-row":5928,"ns":"clojure.core","name":"load-one","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5928","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":41,"arglist-strs":["[lib need-ns require]"],"doc":"Loads a lib given its name. If need-ns, ensures that the associated\n  namespace exists after loading. If require, records the load so any\n  duplicate loads can be skipped.","row":5928},{"fixed-arities":[3,2],"end-row":1911,"meta":{},"name-end-col":18,"name-end-row":1893,"name-row":1893,"added":"1.6","ns":"clojure.core","name":"if-some","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1893","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":24,"arglist-strs":["[bindings then]","[bindings then else & oldform]"],"varargs-min-arity":3,"doc":"bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else","row":1893},{"end-row":5872,"meta":{},"name-end-col":18,"name-end-row":5872,"private":true,"name-row":5872,"ns":"clojure.core","name":"*pending-paths*","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5869","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":22,"doc":"A stack of paths currently being loaded by this thread","row":5869},{"end-row":7980,"meta":{},"name-end-col":28,"name-end-row":7967,"private":true,"name-row":7967,"ns":"clojure.core","name":"tap-loop","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7967","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":20,"end-col":17,"row":7967},{"fixed-arities":[1],"end-row":5918,"meta":{},"name-end-col":21,"name-end-row":5911,"private":true,"name-row":5911,"ns":"clojure.core","name":"root-resource","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5911","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[lib]"],"doc":"Returns the root directory path for a lib","row":5911},{"fixed-arities":[1,2],"end-row":4934,"meta":{},"name-end-col":14,"name-end-row":4923,"name-row":4923,"added":"1.0","ns":"clojure.core","name":"re-find","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4923","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[m]","[re s]"],"doc":"Returns the next regex match, if any, of string to pattern, using\n  java.util.regex.Matcher.find().  Uses re-groups to return the\n  groups.","row":4923},{"end-row":1928,"meta":{},"name-end-col":20,"name-end-row":1913,"name-row":1913,"added":"1.6","ns":"clojure.core","name":"when-some","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1913","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":23,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test","row":1913},{"fixed-arities":[1,2],"end-row":3413,"meta":{},"name-end-col":12,"name-end-row":3401,"name-row":3401,"added":"1.1","ns":"clojure.core","name":"disj!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3401","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[set]","[set key]","[set key & ks]"],"varargs-min-arity":2,"doc":"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).","row":3401},{"end-row":7140,"meta":{},"name-end-col":35,"name-end-row":7137,"name-row":7137,"ns":"clojure.core","name":"*clojure-version*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7137","lang":[],"filename":"/src/clj/clojure/core.clj","col":3,"name-col":18,"end-col":24,"row":7137},{"fixed-arities":[1],"end-row":6270,"meta":{},"name-end-col":11,"name-end-row":6265,"name-row":6265,"added":"1.0","ns":"clojure.core","name":"ifn?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6265","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[x]"],"doc":"Returns true if x implements IFn. Note that many data structures\n  (e.g. sets and maps) implement IFn","row":6265},{"fixed-arities":[1],"end-row":5418,"meta":{},"name-end-col":13,"name-end-row":5413,"name-row":5413,"added":"1.9","ns":"clojure.core","name":"bytes?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5413","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[x]"],"doc":"Return true if x is a byte array","row":5413},{"fixed-arities":[3,2],"end-row":5052,"meta":{},"name-end-col":14,"name-end-row":5034,"name-row":5034,"added":"1.0","ns":"clojure.core","name":"min-key","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5034","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[k x]","[k x y]","[k x y & more]"],"varargs-min-arity":3,"doc":"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.","row":5034},{"fixed-arities":[1],"end-row":1574,"meta":{},"name-end-col":11,"name-end-row":1570,"name-row":1570,"added":"1.0","ns":"clojure.core","name":"keys","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1570","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[map]"],"doc":"Returns a sequence of the map's keys, in the same order as (seq map).","row":1570},{"fixed-arities":[1],"end-row":4862,"meta":{},"name-end-col":11,"name-end-row":4854,"name-row":4854,"added":"1.0","ns":"clojure.core","name":"test","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4854","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[v]"],"doc":"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception","row":4854},{"fixed-arities":[2],"end-row":8037,"meta":{},"name-end-col":18,"name-end-row":8024,"name-row":8024,"added":"1.11","ns":"clojure.core","name":"update-keys","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8024","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[m f]"],"doc":"m f => {(f k) v ...}\n\n  Given a map m and a function f of 1-argument, returns a new map whose\n  keys are the result of applying f to the keys of m, mapped to the\n  corresponding values of m.\n  f must return a unique key for each key of m, else the behavior is undefined.","row":8024},{"end-row":46,"meta":{},"name-end-col":24,"name-end-row":46,"name-row":46,"added":"1.9","ns":"clojure.core","name":"*print-namespace-maps*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L41","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":2,"end-col":31,"doc":"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax. It defaults to false, but the REPL binds\n  to true.","row":41},{"fixed-arities":[1],"end-row":4822,"meta":{},"name-end-col":14,"name-end-row":4816,"name-row":4816,"added":"1.4","ns":"clojure.core","name":"ex-data","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4816","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[ex]"],"doc":"Returns exception data (a map) if ex is an IExceptionInfo.\n   Otherwise returns nil.","row":4816},{"fixed-arities":[1],"end-row":2110,"meta":{},"name-end-col":31,"name-end-row":2106,"name-row":2106,"added":"1.5","ns":"clojure.core","name":"set-agent-send-executor!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2106","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[executor]"],"doc":"Sets the ExecutorService to be used by send","row":2106},{"fixed-arities":[1],"end-row":5744,"meta":{},"name-end-col":20,"name-end-row":5727,"name-row":5727,"added":"1.0","ns":"clojure.core","name":"resultset-seq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5727","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[rs]"],"doc":"Creates and returns a lazy sequence of structmaps corresponding to\n  the rows in the java.sql.ResultSet rs","row":5727},{"fixed-arities":[2],"end-row":1361,"meta":{},"name-end-col":15,"name-end-row":1357,"name-row":1357,"added":"1.0","ns":"clojure.core","name":"bit-flip","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1357","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[x n]"],"doc":"Flip bit at index n","row":1357},{"fixed-arities":[1],"end-row":3893,"meta":{},"name-end-col":15,"name-end-row":3885,"name-row":3885,"added":"1.0","ns":"clojure.core","name":"time","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3885","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":12,"arglist-strs":["[expr]"],"doc":"Evaluates expr and prints the time it took.  Returns the value of\n expr.","row":3885},{"end-row":2104,"meta":{},"name-end-col":12,"name-end-row":2071,"name-row":2071,"added":"1.0","ns":"clojure.core","name":"agent","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2071","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[state & options]"],"varargs-min-arity":1,"doc":"Creates and returns an agent with an initial value of state and\n  zero or more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :error-handler handler-fn\n\n  :error-mode mode-keyword\n\n  If metadata-map is supplied, it will become the metadata on the\n  agent. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.  handler-fn is called if an\n  action throws an exception or if validate-fn rejects a new state --\n  see set-error-handler! for details.  The mode-keyword may be either\n  :continue (the default if an error-handler is given) or :fail (the\n  default if no error-handler is given) -- see set-error-mode! for\n  details.","row":2071},{"fixed-arities":[1],"end-row":4037,"meta":{},"name-end-col":18,"name-end-row":4027,"name-row":4027,"added":"1.0","ns":"clojure.core","name":"macroexpand","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4027","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[form]"],"doc":"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.","row":4027},{"fixed-arities":[3],"end-row":3945,"meta":{},"name-end-col":11,"name-end-row":3938,"private":true,"name-row":3938,"ns":"clojure.core","name":"def-aset","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3936","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":3,"end-col":56,"arglist-strs":["[name method coerce]"],"row":3936},{"fixed-arities":[1],"end-row":695,"meta":{},"name-end-col":54,"name-end-row":694,"name-row":694,"ns":"clojure.core","name":"chunk-buffer","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L694","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":42,"end-col":40,"arglist-strs":["[capacity]"],"row":694},{"end-row":589,"meta":{},"name-end-col":15,"name-end-row":576,"name-row":576,"added":"1.0","ns":"clojure.core","name":"cond","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L576","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":63,"arglist-strs":["[& clauses]"],"varargs-min-arity":0,"doc":"Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.","row":576},{"end-row":37,"meta":{},"name-end-col":15,"name-end-row":37,"name-row":37,"added":"1.0","ns":"clojure.core","name":"*print-level*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L27","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":2,"end-col":20,"doc":"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.","row":27},{"fixed-arities":[1],"end-row":3632,"meta":{},"name-end-col":13,"name-end-row":3620,"name-row":3620,"added":"1.3","ns":"clojure.core","name":"bigint","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3620","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Coerce to BigInt","row":3620},{"end-row":6115,"meta":{},"name-end-col":26,"name-end-row":6108,"private":true,"name-row":6108,"added":"1.10","ns":"clojure.core","name":"serialized-require","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6108","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":27,"arglist-strs":["[& args]"],"varargs-min-arity":0,"doc":"Like 'require', but serializes loading.\n  Interim function preferred over 'require' for known asynchronous loads.\n  Future changes may make these equivalent.","row":6108},{"fixed-arities":[2],"end-row":1355,"meta":{},"name-end-col":14,"name-end-row":1351,"name-row":1351,"added":"1.0","ns":"clojure.core","name":"bit-set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1351","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x n]"],"doc":"Set bit at index n","row":1351},{"fixed-arities":[2],"end-row":2069,"meta":{},"name-end-col":18,"name-end-row":2063,"private":true,"name-row":2063,"ns":"clojure.core","name":"setup-reference","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2062","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":8,"arglist-strs":["[r options]"],"row":2062},{"fixed-arities":[0,1],"end-row":561,"meta":{},"name-end-col":10,"name-end-row":546,"name-row":546,"added":"1.0","ns":"clojure.core","name":"str","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L546","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[]","[x]","[x & ys]"],"varargs-min-arity":1,"doc":"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.","row":546},{"fixed-arities":[1],"end-row":379,"meta":{},"name-end-col":10,"name-end-row":369,"name-row":369,"added":"1.0","ns":"clojure.core","name":"vec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L369","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[coll]"],"doc":"Creates a new vector containing the contents of coll. Java arrays\n  will be aliased and should not be modified.","row":369},{"fixed-arities":[1],"end-row":4216,"meta":{},"name-end-col":17,"name-end-row":4208,"name-row":4208,"added":"1.0","ns":"clojure.core","name":"ns-interns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4208","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[ns]"],"doc":"Returns a map of the intern mappings for the namespace.","row":4208},{"fixed-arities":[4],"end-row":236,"meta":{},"name-end-col":24,"name-end-row":229,"private":true,"name-row":229,"ns":"clojure.core","name":"print-prefix-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L229","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":12,"arglist-strs":["[prefix kvs print-one w]"],"row":229},{"fixed-arities":[2],"end-row":29,"meta":{"arglists":["quote",[["x","seq"]]]},"name-end-col":6,"name-end-row":29,"name-row":29,"added":"1.0","ns":"clojure.core","name":"cons","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L22","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":68,"arglist-strs":["[x seq]"],"doc":"Returns a new seq where x is the first element and seq is\n    the rest.","row":22},{"fixed-arities":[2],"end-row":7462,"meta":{},"name-end-col":20,"name-end-row":7452,"name-row":7452,"added":"1.9","ns":"clojure.core","name":"bounded-count","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7452","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[n coll]"],"doc":"If coll is counted? returns its count, else will count at most the first n\n  elements of coll using its seq","row":7452},{"fixed-arities":[1,2],"end-row":2956,"meta":{},"name-end-col":16,"name-end-row":2951,"name-row":2951,"added":"1.0","ns":"clojure.core","name":"drop-last","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2951","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[coll]","[n coll]"],"doc":"Return a lazy sequence of all but the last n (default 1) items in coll","row":2951},{"fixed-arities":[1,2],"end-row":2840,"meta":{},"name-end-col":13,"name-end-row":2810,"name-row":2810,"added":"1.0","ns":"clojure.core","name":"filter","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2810","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","row":2810},{"fixed-arities":[1],"end-row":5401,"meta":{},"name-end-col":16,"name-end-row":5398,"name-row":5398,"added":"1.0","ns":"clojure.core","name":"ints","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5398","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":43,"arglist-strs":["[xs]"],"doc":"Casts to int[]","row":5398},{"end-row":4061,"meta":{},"name-end-col":17,"name-end-row":4053,"name-row":4053,"added":"1.0","ns":"clojure.core","name":"struct-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4053","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[s & inits]"],"varargs-min-arity":1,"doc":"Returns a new structmap instance with the keys of the\n  structure-basis. keyvals may contain all, some or none of the basis\n  keys - where values are not supplied they will default to nil.\n  keyvals can also contain keys not in the basis.","row":4053},{"fixed-arities":[2],"end-row":782,"meta":{},"name-end-col":17,"name-end-row":777,"name-row":777,"added":"1.0","ns":"clojure.core","name":"identical?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L777","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x y]"],"doc":"Tests if 2 arguments are the same object","row":777},{"fixed-arities":[1],"end-row":139,"meta":{"arglists":["quote",[["coll"]]]},"name-end-col":5,"name-end-row":139,"name-row":139,"added":"1.0","ns":"clojure.core","name":"seq","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L128","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":81,"arglist-strs":["[coll]"],"doc":"Returns a seq on the collection. If the collection is\n    empty, returns nil.  (seq nil) returns nil. seq also works on\n    Strings, native Java arrays (of reference types) and any objects\n    that implement Iterable. Note that seqs cache values, thus seq\n    should not be used on any Iterable whose iterator repeatedly\n    returns the same mutable object.","row":128},{"fixed-arities":[1],"end-row":5218,"meta":{},"name-end-col":24,"name-end-row":5211,"name-row":5211,"added":"1.6","ns":"clojure.core","name":"hash-ordered-coll","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5211","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[coll]"],"doc":"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.","row":5211},{"fixed-arities":[3,2],"end-row":1517,"meta":{},"name-end-col":10,"name-end-row":1508,"name-row":1508,"added":"1.0","ns":"clojure.core","name":"get","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1508","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[map key]","[map key not-found]"],"doc":"Returns the value mapped to key, not-found or nil if key not present\n  in associative collection, set, string, array, or ILookup instance.","row":1508},{"end-row":28,"meta":{},"name-end-col":23,"name-end-row":22,"name-row":22,"ns":"clojure.core","name":"IVecImpl","defined-by":"clojure.core/definterface","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L22","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":1,"name-col":15,"end-col":42,"row":22},{"fixed-arities":[2],"end-row":581,"meta":{},"name-end-col":42,"name-end-row":559,"name-row":559,"added":"1.10","ns":"clojure.core","name":"PrintWriter-on","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L559","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":28,"end-col":32,"arglist-strs":["[flush-fn close-fn]"],"doc":"implements java.io.PrintWriter given flush-fn, which will be called\n  when .flush() is called, with a string built up since the last call to .flush().\n  if not nil, close-fn will be called with no arguments when .close is called","row":559},{"fixed-arities":[1,3,2],"end-row":7502,"meta":{},"name-end-col":17,"name-end-row":7464,"name-row":7464,"added":"1.3","ns":"clojure.core","name":"every-pred","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7464","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":75,"arglist-strs":["[p]","[p1 p2]","[p1 p2 p3]","[p1 p2 p3 & ps]"],"varargs-min-arity":3,"doc":"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.","row":7464},{"fixed-arities":[1],"end-row":5186,"meta":{},"name-end-col":20,"name-end-row":5177,"name-row":5177,"added":"1.0","ns":"clojure.core","name":"add-classpath","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5177","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"deprecated":"1.1","name-col":7,"end-col":32,"arglist-strs":["[url]"],"doc":"DEPRECATED \n\n  Adds the url (String or URL object) to the classpath per\n  URLClassLoader.addURL","row":5177},{"end-row":3883,"meta":{},"name-end-col":16,"name-end-row":3872,"name-row":3872,"added":"1.0","ns":"clojure.core","name":"memfn","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3872","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":32,"arglist-strs":["[name & args]"],"varargs-min-arity":1,"doc":"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a Java method as\n  a first-class fn. name may be type-hinted with the method receiver's\n  type in order to avoid reflective calls.","row":3872},{"fixed-arities":[1],"end-row":505,"meta":{},"name-end-col":22,"name-end-row":124,"private":true,"name-row":124,"ns":"clojure.core","name":"generate-class","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L124","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":35,"arglist-strs":["[options-map]"],"row":124},{"end-row":5543,"meta":{},"name-end-col":13,"name-end-row":5537,"name-row":5537,"added":"1.2","ns":"clojure.core","name":"bound?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5537","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[& vars]"],"varargs-min-arity":0,"doc":"Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\n   Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.","row":5537},{"fixed-arities":[0,1,3,2],"end-row":6968,"meta":{},"name-end-col":11,"name-end-row":6950,"name-row":6950,"added":"1.0","ns":"clojure.core","name":"into","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6950","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[]","[to]","[to from]","[to xform from]"],"doc":"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.","row":6950},{"fixed-arities":[3,2],"end-row":5707,"meta":{},"name-end-col":15,"name-end-row":5689,"name-row":5689,"added":"1.0","ns":"clojure.core","name":"underive","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5689","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":7,"arglist-strs":["[tag parent]","[h tag parent]"],"doc":"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.","row":5689},{"fixed-arities":[1],"end-row":971,"meta":{},"name-end-col":20,"name-end-row":971,"private":true,"name-row":971,"ns":"clojure.core","name":">1?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L971","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":55,"arglist-strs":["[n]"],"row":971},{"end-row":557,"meta":{},"name-end-col":40,"name-end-row":557,"private":true,"name-row":557,"ns":"clojure.core","name":"print-initialized","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L557","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":23,"end-col":46,"row":557},{"fixed-arities":[3],"end-row":201,"meta":{"arglists":["quote",[["map","key","val"],["map","key","val","&","kvs"]]]},"name-end-col":7,"name-end-row":191,"name-row":191,"added":"1.0","ns":"clojure.core","name":"assoc","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L183","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":17,"arglist-strs":["[map key val]","[map key val & kvs]"],"varargs-min-arity":3,"doc":"assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).","row":183},{"fixed-arities":[2],"end-row":1839,"meta":{},"name-end-col":17,"name-end-row":1834,"name-row":1834,"added":"1.0","ns":"clojure.core","name":"get-method","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1834","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":82,"arglist-strs":["[multifn dispatch-val]"],"doc":"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default","row":1834},{"fixed-arities":[2],"end-row":545,"meta":{},"name-end-col":25,"name-end-row":536,"name-row":536,"ns":"clojure.core","name":"find-protocol-impl","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L536","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[protocol x]"],"row":536},{"fixed-arities":[2],"end-row":1238,"meta":{},"name-end-col":29,"name-end-row":1233,"name-row":1233,"added":"1.0","ns":"clojure.core","name":"unchecked-multiply-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1233","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[x y]"],"doc":"Returns the product of x and y, both int.\n  Note - uses a primitive operator subject to overflow.","row":1233},{"end-row":2540,"meta":{},"name-end-col":14,"name-end-row":2529,"name-row":2529,"added":"1.0","ns":"clojure.core","name":"io!","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2529","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":22,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"If an io! block occurs in a transaction, throws an\n  IllegalStateException, else runs body in an implicit do. If the\n  first expression in body is a literal string, will use that as the\n  exception message.","row":2529},{"fixed-arities":[1],"end-row":153,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":6,"name-end-row":153,"name-row":153,"added":"1.0","ns":"clojure.core","name":"seq?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L148","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":62,"arglist-strs":["[x]"],"doc":"Return true if x implements ISeq","row":148},{"fixed-arities":[3,2],"end-row":6886,"meta":{},"name-end-col":13,"name-end-row":6868,"name-row":6868,"added":"1.0","ns":"clojure.core","name":"reduce","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6868","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[f coll]","[f val coll]"],"doc":"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.","row":6868},{"end-row":6161,"meta":{},"name-end-col":11,"name-end-row":6144,"name-row":6144,"added":"1.0","ns":"clojure.core","name":"load","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6144","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[& paths]"],"varargs-min-arity":0,"doc":"Loads Clojure code from resources in classpath. A path is interpreted as\n  classpath-relative if it begins with a slash or relative to the root\n  directory for the current namespace otherwise.","row":6144},{"fixed-arities":[0],"end-row":5557,"meta":{},"name-end-col":21,"name-end-row":5553,"name-row":5553,"added":"1.0","ns":"clojure.core","name":"make-hierarchy","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5553","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[]"],"doc":"Creates a hierarchy object for use with derive, isa? etc.","row":5553},{"end-row":6826,"meta":{},"name-end-col":31,"name-end-row":6822,"private":true,"name-row":6822,"ns":"clojure.core","name":"when-class","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6822","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":21,"end-col":41,"arglist-strs":["[class-name & body]"],"varargs-min-arity":1,"row":6822},{"fixed-arities":[1,2],"end-row":1070,"meta":{},"name-end-col":9,"name-end-row":1057,"name-row":1057,"added":"1.0","ns":"clojure.core","name":"<=","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1057","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.","row":1057},{"fixed-arities":[1],"end-row":8066,"meta":{},"name-end-col":19,"name-end-row":8055,"name-row":8055,"added":"1.11","ns":"clojure.core","name":"parse-double","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8055","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[s]"],"doc":"Parse string with floating point components and return a Double value,\n  or nil if parse fails.\n\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-","row":8055},{"fixed-arities":[1,4,3,2],"end-row":660,"meta":{},"name-end-col":12,"name-end-row":650,"name-row":650,"added":"1.0","ns":"clojure.core","name":"list*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L650","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[args]","[a args]","[a b args]","[a b c args]","[a b c d & more]"],"varargs-min-arity":4,"doc":"Creates a new seq containing the items prepended to the rest, the\n  last of which will be treated as a sequence.","row":650},{"fixed-arities":[1],"end-row":6665,"meta":{},"name-end-col":19,"name-end-row":6661,"private":true,"name-row":6661,"ns":"clojure.core","name":"fits-table?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6661","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":79,"arglist-strs":["[ints]"],"doc":"Returns true if the collection of ints can fit within the\n  max-table-switch-size, false otherwise.","row":6661},{"fixed-arities":[1],"end-row":3581,"meta":{},"name-end-col":13,"name-end-row":3577,"name-row":3577,"added":"1.0","ns":"clojure.core","name":"ratio?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3577","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[n]"],"doc":"Returns true if n is a Ratio","row":3577},{"end-row":5487,"meta":{},"name-end-col":28,"name-end-row":5487,"name-row":5487,"ns":"clojure.core","name":"process-annotation","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5487","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":29,"row":5487},{"fixed-arities":[1],"end-row":7007,"meta":{},"name-end-col":28,"name-end-row":7001,"private":true,"name-row":7001,"ns":"clojure.core","name":"normalize-slurp-opts","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7001","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":11,"arglist-strs":["[opts]"],"row":7001},{"fixed-arities":[1],"end-row":32,"meta":{},"name-end-col":16,"protocol-ns":"clojure.core","name-end-row":32,"name-row":32,"ns":"clojure.core","name":"alength","defined-by":"clojure.core/definterface","protocol-name":"ArrayManager","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/gvec.clj#L32","lang":[],"filename":"/src/clj/clojure/gvec.clj","col":3,"name-col":9,"end-col":23,"arglist-strs":["[arr]"],"row":32},{"fixed-arities":[0],"end-row":4390,"meta":{},"name-end-col":16,"name-end-row":4380,"name-row":4380,"added":"1.0","ns":"clojure.core","name":"array-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4380","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":69,"arglist-strs":["[]","[& keyvals]"],"varargs-min-arity":0,"doc":"Constructs an array-map. If any keys are equal, they are handled as\n  if by repeated uses of assoc.","row":4380},{"fixed-arities":[0],"end-row":389,"meta":{},"name-end-col":15,"name-end-row":381,"name-row":381,"added":"1.0","ns":"clojure.core","name":"hash-map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L381","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":57,"arglist-strs":["[]","[& keyvals]"],"varargs-min-arity":0,"doc":"keyval => key val\n  Returns a new hash map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.","row":381},{"fixed-arities":[0],"end-row":3713,"meta":{},"name-end-col":12,"name-end-row":3706,"name-row":3706,"added":"1.0","ns":"clojure.core","name":"flush","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3706","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":9,"arglist-strs":["[]"],"doc":"Flushes the output stream that is the current value of\n  *out*","row":3706},{"fixed-arities":[1],"end-row":538,"meta":{},"name-end-col":12,"name-end-row":533,"name-row":533,"added":"1.6","ns":"clojure.core","name":"some?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L533","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[x]"],"doc":"Returns true if x is not nil, false otherwise.","row":533},{"fixed-arities":[3],"end-row":6635,"meta":{},"name-end-col":18,"name-end-row":6634,"private":true,"name-row":6634,"ns":"clojure.core","name":"shift-mask","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6634","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":49,"arglist-strs":["[shift mask x]"],"row":6634},{"fixed-arities":[1,2],"end-row":7721,"meta":{},"name-end-col":16,"name-end-row":7699,"name-row":7699,"added":"1.9","ns":"clojure.core","name":"halt-when","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7699","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":38,"arglist-strs":["[pred]","[pred retf]"],"doc":"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.","row":7699},{"fixed-arities":[2],"end-row":2415,"meta":{},"name-end-col":21,"name-end-row":2406,"name-row":2406,"added":"1.0","ns":"clojure.core","name":"set-validator!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2406","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":79,"arglist-strs":["[iref validator-fn]"],"doc":"Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed.","row":2406},{"fixed-arities":[2],"end-row":562,"meta":{},"name-end-col":15,"name-end-row":557,"name-row":557,"added":"1.2","ns":"clojure.core","name":"extends?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L557","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[protocol atype]"],"doc":"Returns true if atype extends protocol","row":557},{"fixed-arities":[1,2],"end-row":6931,"meta":{},"name-end-col":17,"name-end-row":6921,"name-row":6921,"added":"1.7","ns":"clojure.core","name":"completing","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6921","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":26,"arglist-strs":["[f]","[f cf]"],"doc":"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.","row":6921},{"fixed-arities":[3,5],"end-row":5166,"meta":{},"name-end-col":14,"name-end-row":5151,"name-row":5151,"added":"1.0","ns":"clojure.core","name":"rsubseq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5151","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":75,"arglist-strs":["[sc test key]","[sc start-test start-key end-test end-key]"],"doc":"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true","row":5151},{"fixed-arities":[1,2],"end-row":625,"meta":{},"name-end-col":14,"name-end-row":616,"name-row":616,"added":"1.0","ns":"clojure.core","name":"keyword","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L616","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[name]","[ns name]"],"doc":"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.","row":616},{"fixed-arities":[1],"end-row":7564,"meta":{},"name-end-col":43,"name-end-row":7544,"private":true,"name-row":7544,"ns":"clojure.core","name":"assert-valid-fdecl","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7544","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":25,"end-col":75,"arglist-strs":["[fdecl]"],"doc":"A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.","row":7544},{"fixed-arities":[0,1,2],"end-row":534,"meta":{},"name-end-col":12,"name-end-row":530,"private":true,"name-row":530,"ns":"clojure.core","name":"pref","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L530","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":40,"arglist-strs":["[]","[a]","[a b]"],"row":530},{"fixed-arities":[1,3],"end-row":2321,"meta":{},"name-end-col":29,"name-end-row":2315,"private":true,"name-row":2315,"ns":"clojure.core","name":"deref-future","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2315","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":28,"arglist-strs":["[fut]","[fut timeout-ms timeout-val]"],"row":2315},{"end-row":3851,"meta":{},"name-end-col":20,"name-end-row":3832,"name-row":3832,"added":"1.0","ns":"clojure.core","name":"with-open","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3832","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":67,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.","row":3832},{"fixed-arities":[1,2],"end-row":1100,"meta":{},"name-end-col":9,"name-end-row":1087,"name-row":1087,"added":"1.0","ns":"clojure.core","name":">=","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1087","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.","row":1087},{"fixed-arities":[1],"end-row":68,"meta":{},"name-end-col":24,"name-end-row":53,"private":true,"name-row":53,"ns":"clojure.core","name":"parse-opts+specs","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L53","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":32,"arglist-strs":["[opts+specs]"],"row":53},{"fixed-arities":[1],"end-row":7077,"meta":{},"name-end-col":24,"name-end-row":7073,"name-row":7073,"added":"1.1","ns":"clojure.core","name":"future-cancelled?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7073","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[f]"],"doc":"Returns true if future f is cancelled","row":7073},{"end-row":6332,"meta":{},"name-end-col":4,"name-end-row":6332,"name-row":6332,"added":"1.0","ns":"clojure.core","name":"*e","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6329","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":5,"doc":"bound in a repl thread to the most recent exception caught by the repl","row":6329},{"fixed-arities":[1],"end-row":1273,"meta":{},"name-end-col":11,"name-end-row":1268,"name-row":1268,"added":"1.0","ns":"clojure.core","name":"neg?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1268","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[num]"],"doc":"Returns true if num is less than zero, else false","row":1268},{"fixed-arities":[1],"end-row":1832,"meta":{},"name-end-col":14,"name-end-row":1828,"name-row":1828,"added":"1.0","ns":"clojure.core","name":"methods","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1828","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[multifn]"],"doc":"Given a multimethod, returns a map of dispatch values -> dispatch fns","row":1828},{"fixed-arities":[2],"end-row":1281,"meta":{},"name-end-col":11,"name-end-row":1275,"name-row":1275,"added":"1.0","ns":"clojure.core","name":"quot","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1275","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[num div]"],"doc":"quot[ient] of dividing numerator by denominator.","row":1275},{"fixed-arities":[1],"end-row":444,"meta":{},"name-end-col":11,"name-end-row":438,"name-row":438,"added":"1.0","ns":"clojure.core","name":"nil?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L438","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[x]"],"doc":"Returns true if x is nil, false otherwise.","row":438},{"fixed-arities":[1,2],"end-row":7379,"meta":{},"name-end-col":18,"name-end-row":7351,"name-row":7351,"added":"1.2","ns":"clojure.core","name":"map-indexed","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7351","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.","row":7351},{"fixed-arities":[1],"end-row":1630,"meta":{},"name-end-col":13,"name-end-row":1627,"name-row":1627,"added":"1.9","ns":"clojure.core","name":"ident?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1627","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword","row":1627},{"fixed-arities":[4],"end-row":6745,"meta":{},"name-end-col":19,"name-end-row":6719,"private":true,"name-row":6719,"ns":"clojure.core","name":"prep-hashes","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6719","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":57,"arglist-strs":["[expr-sym default tests thens]"],"doc":"Takes a sequence of test constants and a corresponding sequence of then\n  expressions. Returns a tuple of [shift mask case-map switch-type skip-check]\n  where case-map is a map of int case values to [test then] tuples, switch-type\n  is either :sparse or :compact, and skip-check is a set of case ints for which\n  post-switch equivalence checking must not be done (occurs with hash\n  collisions).","row":6719},{"fixed-arities":[1,2],"end-row":3817,"meta":{},"name-end-col":18,"name-end-row":3806,"name-row":3806,"added":"1.0","ns":"clojure.core","name":"read-string","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3806","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[s]","[opts s]"],"doc":"Reads one object from the string s. Optionally include reader\n  options, as specified in read.\n\n  Note that read-string can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read-string","row":3806},{"end-row":5551,"meta":{},"name-end-col":20,"name-end-row":5545,"name-row":5545,"added":"1.2","ns":"clojure.core","name":"thread-bound?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5545","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[& vars]"],"varargs-min-arity":0,"doc":"Returns true if all of the vars provided as arguments have thread-local bindings.\n   Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.","row":5545},{"fixed-arities":[0],"end-row":398,"meta":{},"name-end-col":15,"name-end-row":391,"name-row":391,"added":"1.0","ns":"clojure.core","name":"hash-set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L391","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[]","[& keys]"],"varargs-min-arity":0,"doc":"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.","row":391},{"fixed-arities":[1],"end-row":174,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":6,"name-end-row":174,"name-row":174,"added":"1.0","ns":"clojure.core","name":"map?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L169","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":72,"arglist-strs":["[x]"],"doc":"Return true if x implements IPersistentMap","row":169},{"end-row":692,"meta":{},"name-end-col":19,"name-end-row":685,"name-row":685,"added":"1.0","ns":"clojure.core","name":"lazy-seq","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L685","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":72,"arglist-strs":["[& body]"],"varargs-min-arity":0,"doc":"Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?","row":685},{"end-row":2001,"meta":{},"name-end-col":21,"name-end-row":1990,"name-row":1990,"added":"1.1","ns":"clojure.core","name":"with-bindings*","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1990","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[binding-map f & args]"],"varargs-min-arity":2,"doc":"Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then calls f with the supplied arguments.\n  Pops the installed bindings after f returned. Returns whatever f returns.","row":1990},{"fixed-arities":[0,1],"end-row":866,"meta":{},"name-end-col":13,"name-end-row":856,"name-row":856,"added":"1.0","ns":"clojure.core","name":"or","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L856","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":37,"arglist-strs":["[]","[x]","[x & next]"],"varargs-min-arity":1,"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.","row":856},{"fixed-arities":[1],"end-row":261,"meta":{},"name-end-col":15,"name-end-row":247,"private":true,"name-row":247,"ns":"clojure.core","name":"lift-ns","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L247","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":21,"arglist-strs":["[m]"],"doc":"Returns [lifted-ns lifted-kvs] or nil if m can't be lifted.","row":247},{"fixed-arities":[1],"end-row":544,"meta":{},"name-end-col":11,"name-end-row":540,"name-row":540,"added":"1.9","ns":"clojure.core","name":"any?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L540","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[x]"],"doc":"Returns true given any argument.","row":540},{"fixed-arities":[1],"end-row":2037,"meta":{},"name-end-col":15,"name-end-row":2032,"name-row":2032,"added":"1.0","ns":"clojure.core","name":"find-var","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2032","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[sym]"],"doc":"Returns the global var named by the namespace-qualified symbol, or\n  nil if no var with that name.","row":2032},{"end-row":6592,"meta":{},"name-end-col":16,"name-end-row":6581,"name-row":6581,"added":"1.0","ns":"clojure.core","name":"letfn","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6581","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":20,"arglist-strs":["[fnspecs & body]"],"varargs-min-arity":1,"doc":"fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.","row":6581},{"fixed-arities":[1],"end-row":4897,"meta":{},"name-end-col":16,"name-end-row":4883,"name-row":4883,"added":"1.0","ns":"clojure.core","name":"re-groups","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4883","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[m]"],"doc":"Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.","row":4883},{"fixed-arities":[1,2],"end-row":5340,"meta":{},"name-end-col":18,"name-end-row":5334,"name-row":5334,"added":"1.1","ns":"clojure.core","name":"short-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5334","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of shorts","row":5334},{"fixed-arities":[5],"end-row":627,"meta":{},"name-end-col":27,"name-end-row":588,"private":true,"name-row":588,"ns":"clojure.core","name":"emit-method-builder","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L588","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":16,"arglist-strs":["[on-interface method on-method arglists extend-via-meta]"],"row":588},{"end-row":2798,"meta":{},"name-end-col":13,"name-end-row":2798,"name-row":2798,"ns":"clojure.core","name":"cat","defined-by":"clojure.core/declare","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2798","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":14,"row":2798},{"fixed-arities":[1],"end-row":5386,"meta":{},"name-end-col":17,"name-end-row":5383,"name-row":5383,"added":"1.1","ns":"clojure.core","name":"chars","defined-by":"clojure.core/definline","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5383","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":12,"end-col":44,"arglist-strs":["[xs]"],"doc":"Casts to chars[]","row":5383},{"end-row":1804,"meta":{},"name-end-col":20,"name-end-row":1800,"name-row":1800,"added":"1.0","ns":"clojure.core","name":"defmethod","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1800","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":97,"arglist-strs":["[multifn dispatch-val & fn-tail]"],"varargs-min-arity":2,"doc":"Creates and installs a new method of multimethod associated with dispatch-value. ","row":1800},{"end-row":5769,"meta":{},"name-end-col":13,"name-end-row":5763,"name-row":5763,"added":"1.0","ns":"clojure.core","name":"format","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5763","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[fmt & args]"],"varargs-min-arity":1,"doc":"Formats a string using java.lang.String.format, see java.util.Formatter for format\n  string syntax","row":5763},{"fixed-arities":[2],"end-row":326,"meta":{},"name-end-col":19,"name-end-row":313,"name-row":313,"added":"1.0","ns":"clojure.core","name":"update-proxy","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L313","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":11,"arglist-strs":["[proxy mappings]"],"doc":"Takes a proxy instance and a map of strings (which must\n  correspond to methods of the proxy superclass/superinterfaces) to\n  fns (which must take arguments matching the corresponding method,\n  plus an additional (explicit) first arg corresponding to this, and\n  updates (via assoc) the proxy's fn map. nil can be passed instead of\n  a fn, in which case the corresponding method will revert to the\n  default behavior. Note that this function can be used to update the\n  behavior of an existing instance without changing its identity.\n  Returns the proxy.","row":313},{"fixed-arities":[0,1,4,3,2],"end-row":3795,"meta":{},"name-end-col":18,"name-end-row":3771,"name-row":3771,"added":"1.10","ns":"clojure.core","name":"read+string","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3771","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[]","[stream]","[stream eof-error? eof-value]","[stream eof-error? eof-value recursive?]","[opts stream]"],"doc":"Like read, and taking the same args. stream must be a LineNumberingPushbackReader.\n  Returns a vector containing the object read and the (whitespace-trimmed) string read.","row":3771},{"fixed-arities":[1],"end-row":3399,"meta":{},"name-end-col":11,"name-end-row":3393,"name-row":3393,"added":"1.1","ns":"clojure.core","name":"pop!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3393","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[coll]"],"doc":"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll","row":3393},{"fixed-arities":[1],"end-row":5472,"meta":{},"name-end-col":13,"name-end-row":5468,"name-row":5468,"added":"1.0","ns":"clojure.core","name":"class?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5468","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[x]"],"doc":"Returns true if x is an instance of Class","row":5468},{"fixed-arities":[0],"end-row":7912,"meta":{},"name-end-col":24,"name-end-row":7908,"private":true,"name-row":7908,"ns":"clojure.core","name":"data-reader-urls","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7908","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":66,"arglist-strs":["[]"],"row":7908},{"fixed-arities":[2],"end-row":3034,"meta":{},"name-end-col":14,"name-end-row":3030,"name-row":3030,"added":"1.0","ns":"clojure.core","name":"iterate","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3030","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[f x]"],"doc":"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects","row":3030},{"fixed-arities":[2],"end-row":3173,"meta":{},"name-end-col":14,"name-end-row":3165,"name-row":3165,"added":"1.0","ns":"clojure.core","name":"nthnext","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3165","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[coll n]"],"doc":"Returns the nth next of coll, (seq coll) when n is 0.","row":3165},{"fixed-arities":[1,2],"end-row":4378,"meta":{},"name-end-col":14,"name-end-row":4373,"name-row":4373,"added":"1.0","ns":"clojure.core","name":"resolve","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4373","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[sym]","[env sym]"],"doc":"same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)","row":4373},{"fixed-arities":[2],"end-row":3391,"meta":{},"name-end-col":14,"name-end-row":3382,"name-row":3382,"added":"1.1","ns":"clojure.core","name":"dissoc!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3382","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[map key]","[map key & ks]"],"varargs-min-arity":2,"doc":"Returns a transient map that doesn't contain a mapping for key(s).","row":3382},{"fixed-arities":[1],"end-row":7837,"meta":{},"name-end-col":22,"name-end-row":7833,"name-row":7833,"added":"1.7","ns":"clojure.core","name":"tagged-literal?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7833","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":48,"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a tagged literal","row":7833},{"end-row":4776,"meta":{},"name-end-col":14,"name-end-row":4769,"name-row":4769,"added":"1.0","ns":"clojure.core","name":"prn-str","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4769","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[& xs]"],"varargs-min-arity":0,"doc":"prn to a string, returning it","row":4769},{"end-row":4358,"meta":{},"name-end-col":26,"name-end-row":4341,"name-row":4341,"added":"1.0","ns":"clojure.core","name":"with-local-vars","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4341","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":60,"arglist-strs":["[name-vals-vec & body]"],"varargs-min-arity":1,"doc":"varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set","row":4341},{"fixed-arities":[1],"end-row":66,"meta":{},"name-end-col":25,"name-end-row":64,"private":true,"name-row":64,"ns":"clojure.core","name":"escape-class-name","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/genclass.clj#L64","lang":[],"filename":"/src/clj/clojure/genclass.clj","col":1,"name-col":8,"end-col":28,"arglist-strs":["[c]"],"row":64},{"fixed-arities":[2],"end-row":1210,"meta":{},"name-end-col":24,"name-end-row":1205,"name-row":1205,"added":"1.0","ns":"clojure.core","name":"unchecked-add-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1205","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":58,"arglist-strs":["[x y]"],"doc":"Returns the sum of x and y, both int.\n  Note - uses a primitive operator subject to overflow.","row":1205},{"fixed-arities":[1,2],"end-row":969,"meta":{},"name-end-col":28,"name-end-row":957,"private":true,"name-row":957,"ns":"clojure.core","name":"nary-inline","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L957","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":17,"end-col":62,"arglist-strs":["[op]","[op unchecked-op]"],"row":957},{"fixed-arities":[1],"end-row":2261,"meta":{},"name-end-col":19,"name-end-row":2253,"name-row":2253,"added":"1.0","ns":"clojure.core","name":"agent-errors","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2253","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"deprecated":"1.2","name-col":7,"end-col":15,"arglist-strs":["[a]"],"doc":"DEPRECATED: Use 'agent-error' instead.\n  Returns a sequence of the exceptions thrown during asynchronous\n  actions of the agent.","row":2253},{"fixed-arities":[1],"end-row":3515,"meta":{},"name-end-col":11,"name-end-row":3511,"name-row":3511,"added":"1.1","ns":"clojure.core","name":"char","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3511","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[x]"],"doc":"Coerce to char","row":3511},{"end-row":3066,"meta":{},"name-end-col":12,"name-end-row":3058,"name-row":3058,"added":"1.0","ns":"clojure.core","name":"merge","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3058","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[& maps]"],"varargs-min-arity":0,"doc":"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.","row":3058},{"fixed-arities":[1],"end-row":3904,"meta":{},"name-end-col":14,"name-end-row":3899,"name-row":3899,"added":"1.0","ns":"clojure.core","name":"alength","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3899","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":47,"arglist-strs":["[array]"],"doc":"Returns the length of the Java array. Works on arrays of all\n  types.","row":3899},{"end-row":3312,"meta":{},"name-end-col":16,"name-end-row":3297,"name-row":3297,"added":"1.0","ns":"clojure.core","name":"await-for","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3297","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":87,"arglist-strs":["[timeout-ms & agents]"],"varargs-min-arity":1,"doc":"Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.","row":3297},{"fixed-arities":[1],"end-row":2857,"meta":{},"name-end-col":14,"name-end-row":2853,"name-row":2853,"added":"1.5","ns":"clojure.core","name":"reduced","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2853","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[x]"],"doc":"Wraps x in a way such that a reduce will terminate with the value x","row":2853},{"fixed-arities":[1],"end-row":3295,"meta":{},"name-end-col":22,"name-end-row":3292,"name-row":3292,"ns":"clojure.core","name":"await1","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3292","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":7,"arglist-strs":["[a]"],"row":3292},{"fixed-arities":[2],"end-row":7102,"meta":{},"name-end-col":11,"name-end-row":7079,"name-row":7079,"added":"1.0","ns":"clojure.core","name":"pmap","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7079","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":53,"arglist-strs":["[f coll]","[f coll & colls]"],"varargs-min-arity":2,"doc":"Like map, except f is applied in parallel. Semi-lazy in that the\n  parallel computation stays ahead of the consumption, but doesn't\n  realize the entire result unless required. Only useful for\n  computationally intensive functions where the time of f dominates\n  the coordination overhead.","row":7079},{"fixed-arities":[1],"end-row":3533,"meta":{},"name-end-col":21,"name-end-row":3529,"name-row":3529,"added":"1.3","ns":"clojure.core","name":"unchecked-char","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3529","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[x]"],"doc":"Coerce to char. Subject to rounding or truncation.","row":3529},{"fixed-arities":[1],"end-row":4115,"meta":{},"name-end-col":10,"name-end-row":4106,"name-row":4106,"added":"1.0","ns":"clojure.core","name":"set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4106","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":60,"arglist-strs":["[coll]"],"doc":"Returns a set of the distinct elements of coll.","row":4106},{"fixed-arities":[2],"end-row":842,"meta":{},"name-end-col":14,"name-end-row":833,"name-row":833,"added":"1.0","ns":"clojure.core","name":"compare","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L833","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x y]"],"doc":"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable","row":833},{"fixed-arities":[1],"end-row":223,"meta":{},"name-end-col":21,"name-end-row":223,"private":true,"name-row":223,"ns":"clojure.core","name":"assert-valid-fdecl","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L222","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":35,"arglist-strs":["[fdecl]"],"row":222},{"fixed-arities":[1],"end-row":2513,"meta":{},"name-end-col":13,"name-end-row":2505,"name-row":2505,"added":"1.0","ns":"clojure.core","name":"ensure","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2505","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[ref]"],"doc":"Must be called in a transaction. Protects the ref from modification\n  by other transactions.  Returns the in-transaction-value of\n  ref. Allows for more concurrency than (ref-set ref @ref)","row":2505},{"fixed-arities":[2],"end-row":555,"meta":{},"name-end-col":19,"name-end-row":554,"private":true,"name-row":554,"ns":"clojure.core","name":"implements?","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L554","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":73,"arglist-strs":["[protocol atype]"],"row":554},{"fixed-arities":[3],"end-row":394,"meta":{},"name-end-col":28,"name-end-row":389,"name-row":389,"ns":"clojure.core","name":"proxy-call-with-super","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L389","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[call this meth]"],"row":389},{"fixed-arities":[1],"end-row":160,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":7,"name-end-row":160,"name-row":160,"added":"1.0","ns":"clojure.core","name":"char?","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L155","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":56,"arglist-strs":["[x]"],"doc":"Return true if x is a Character","row":155},{"end-row":5893,"meta":{},"name-end-col":16,"name-end-row":5879,"private":true,"name-row":5879,"ns":"clojure.core","name":"throw-if","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5879","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":29,"arglist-strs":["[pred fmt & args]"],"varargs-min-arity":2,"doc":"Throws a CompilerException with a message if pred is true","row":5879},{"fixed-arities":[1],"end-row":1645,"meta":{},"name-end-col":21,"name-end-row":1642,"name-row":1642,"added":"1.9","ns":"clojure.core","name":"simple-symbol?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1642","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[x]"],"doc":"Return true if x is a symbol without a namespace","row":1642},{"end-row":5867,"meta":{},"name-end-col":16,"name-end-row":5867,"private":true,"name-row":5867,"ns":"clojure.core","name":"*loaded-libs*","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5864","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":36,"doc":"A ref to a sorted set of symbols representing loaded libs","row":5864},{"fixed-arities":[1],"end-row":568,"meta":{},"name-end-col":14,"name-end-row":564,"name-row":564,"added":"1.0","ns":"clojure.core","name":"symbol?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L564","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[x]"],"doc":"Return true if x is a Symbol","row":564},{"fixed-arities":[1],"end-row":35,"meta":{},"name-end-col":20,"name-end-row":27,"private":true,"name-row":27,"ns":"clojure.core","name":"group-by-sig","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L27","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":8,"end-col":21,"arglist-strs":["[coll]"],"doc":"Takes a collection of [msig meth] and returns a seq of maps from\n   return-types to meths.","row":27},{"fixed-arities":[2],"end-row":4339,"meta":{},"name-end-col":14,"name-end-row":4334,"name-row":4334,"added":"1.0","ns":"clojure.core","name":"var-set","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4334","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[x val]"],"doc":"Sets the value in the var object to val. The var must be\n thread-locally bound.","row":4334},{"end-row":7019,"meta":{},"name-end-col":12,"name-end-row":7009,"name-row":7009,"added":"1.0","ns":"clojure.core","name":"slurp","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7009","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[f & opts]"],"varargs-min-arity":1,"doc":"Opens a reader on f and reads all its contents, returning a string.\n  See clojure.java.io/reader for a complete list of supported arguments.","row":7009},{"fixed-arities":[2],"end-row":3183,"meta":{},"name-end-col":14,"name-end-row":3175,"name-row":3175,"added":"1.3","ns":"clojure.core","name":"nthrest","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3175","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":14,"arglist-strs":["[coll n]"],"doc":"Returns the nth rest of coll, coll when n is 0.","row":3175},{"fixed-arities":[0,1,2],"end-row":745,"meta":{},"name-end-col":13,"name-end-row":720,"name-row":720,"added":"1.0","ns":"clojure.core","name":"concat","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L720","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[]","[x]","[x y]","[x y & zs]"],"varargs-min-arity":2,"doc":"Returns a lazy seq representing the concatenation of the elements in the supplied colls.","row":720},{"fixed-arities":[2],"end-row":1224,"meta":{},"name-end-col":29,"name-end-row":1219,"name-row":1219,"added":"1.0","ns":"clojure.core","name":"unchecked-subtract-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1219","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":63,"arglist-strs":["[x y]"],"doc":"Returns the difference of x and y, both int.\n  Note - uses a primitive operator subject to overflow.","row":1219},{"end-row":7650,"meta":{},"name-end-col":15,"name-end-row":7640,"name-row":7640,"added":"1.5","ns":"clojure.core","name":"as->","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7640","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":24,"arglist-strs":["[expr name & forms]"],"varargs-min-arity":2,"doc":"Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.","row":7640},{"fixed-arities":[1],"end-row":1479,"meta":{},"name-end-col":11,"name-end-row":1474,"name-row":1474,"added":"1.0","ns":"clojure.core","name":"peek","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1474","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":42,"arglist-strs":["[coll]"],"doc":"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.","row":1474},{"fixed-arities":[1],"end-row":1168,"meta":{},"name-end-col":24,"name-end-row":1163,"name-row":1163,"added":"1.0","ns":"clojure.core","name":"unchecked-inc-int","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1163","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":54,"arglist-strs":["[x]"],"doc":"Returns a number one greater than x, an int.\n  Note - uses a primitive operator subject to overflow.","row":1163},{"fixed-arities":[2],"end-row":1367,"meta":{},"name-end-col":15,"name-end-row":1363,"name-row":1363,"added":"1.0","ns":"clojure.core","name":"bit-test","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1363","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[x n]"],"doc":"Test bit at index n","row":1363},{"end-row":1856,"meta":{},"name-end-col":39,"name-end-row":1849,"private":true,"name-row":1849,"ns":"clojure.core","name":"assert-args","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1849","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":28,"end-col":40,"arglist-strs":["[& pairs]"],"varargs-min-arity":0,"row":1849},{"fixed-arities":[1,2],"end-row":1043,"meta":{},"name-end-col":9,"name-end-row":1033,"name-row":1033,"added":"1.0","ns":"clojure.core","name":"-'","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L1033","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[x]","[x y]","[x y & more]"],"varargs-min-arity":2,"doc":"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Supports arbitrary precision.\n  See also: -","row":1033},{"fixed-arities":[1],"end-row":524,"meta":{},"name-end-col":15,"name-end-row":521,"name-row":521,"added":"1.9","ns":"clojure.core","name":"boolean?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L521","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[x]"],"doc":"Return true if x is a Boolean","row":521},{"fixed-arities":[1,2],"end-row":3163,"meta":{},"name-end-col":12,"name-end-row":3149,"name-row":3149,"added":"1.0","ns":"clojure.core","name":"doall","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3149","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":10,"arglist-strs":["[coll]","[n coll]"],"doc":"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.","row":3149},{"end-row":3732,"meta":{},"name-end-col":12,"name-end-row":3725,"name-row":3725,"added":"1.0","ns":"clojure.core","name":"print","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3725","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[& more]"],"varargs-min-arity":0,"doc":"Prints the object(s) to the output stream that is the current value\n  of *out*.  print and println produce output for human consumption.","row":3725},{"fixed-arities":[2],"end-row":3922,"meta":{},"name-end-col":11,"name-end-row":3913,"name-row":3913,"added":"1.0","ns":"clojure.core","name":"aget","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3913","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":40,"arglist-strs":["[array idx]","[array idx & idxs]"],"varargs-min-arity":2,"doc":"Returns the value at the index/indices. Works on Java arrays of all\n  types.","row":3913},{"end-row":4622,"meta":{},"name-end-col":15,"name-end-row":4599,"name-row":4599,"added":"1.0","ns":"clojure.core","name":"loop","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4599","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":31,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.","row":4599},{"fixed-arities":[1],"end-row":3611,"meta":{},"name-end-col":13,"name-end-row":3605,"name-row":3605,"added":"1.0","ns":"clojure.core","name":"float?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3605","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[n]"],"doc":"Returns true if n is a floating point number","row":3605},{"fixed-arities":[1],"end-row":440,"meta":{},"name-end-col":11,"name-end-row":403,"name-row":403,"added":"1.0","ns":"clojure.core","name":"bean","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_proxy.clj#L403","lang":[],"filename":"/src/clj/clojure/core_proxy.clj","col":1,"name-col":7,"end-col":39,"arglist-strs":["[x]"],"doc":"Takes a Java object and returns a read-only implementation of the\n  map abstraction based upon its JavaBean properties.","row":403},{"fixed-arities":[1,2],"end-row":2903,"meta":{},"name-end-col":11,"name-end-row":2878,"name-row":2878,"added":"1.0","ns":"clojure.core","name":"take","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2878","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.","row":2878},{"end-row":7760,"meta":{},"name-end-col":18,"name-end-row":7750,"name-row":7750,"ns":"clojure.core","name":"Eduction","defined-by":"clojure.core/deftype","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7750","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":10,"end-col":28,"row":7750},{"fixed-arities":[1],"end-row":6258,"meta":{},"name-end-col":12,"name-end-row":6254,"name-row":6254,"added":"1.0","ns":"clojure.core","name":"list?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6254","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[x]"],"doc":"Returns true if x implements IPersistentList","row":6254},{"fixed-arities":[6],"end-row":421,"meta":{},"name-end-col":21,"name-end-row":413,"private":true,"name-row":413,"ns":"clojure.core","name":"emit-deftype*","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L413","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":20,"arglist-strs":["[tagname cname fields interfaces methods opts]"],"doc":"Do not use this directly - use deftype","row":413},{"end-row":6637,"meta":{},"name-end-col":29,"name-end-row":6637,"private":true,"name-row":6637,"ns":"clojure.core","name":"max-mask-bits","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6637","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":16,"end-col":33,"row":6637},{"fixed-arities":[1],"end-row":2227,"meta":{},"name-end-col":20,"name-end-row":2221,"name-row":2221,"added":"1.2","ns":"clojure.core","name":"error-handler","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2221","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[a]"],"doc":"Returns the error-handler of agent a, or nil if there is none.\n  See set-error-handler!","row":2221},{"fixed-arities":[2],"end-row":2219,"meta":{},"name-end-col":25,"name-end-row":2211,"name-row":2211,"added":"1.2","ns":"clojure.core","name":"set-error-handler!","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2211","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[a handler-fn]"],"doc":"Sets the error-handler of agent a to handler-fn.  If an action\n  being run by the agent throws an exception or doesn't pass the\n  validator fn, handler-fn will be called with two arguments: the\n  agent and the exception.","row":2211},{"fixed-arities":[0],"end-row":4152,"meta":{},"name-end-col":13,"name-end-row":4148,"name-row":4148,"added":"1.0","ns":"clojure.core","name":"all-ns","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4148","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[]"],"doc":"Returns a sequence of all namespaces.","row":4148},{"fixed-arities":[2],"end-row":7945,"meta":{},"name-end-col":29,"name-end-row":7918,"private":true,"name-row":7918,"ns":"clojure.core","name":"load-data-reader-file","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7918","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":8,"end-col":27,"arglist-strs":["[mappings url]"],"row":7918},{"fixed-arities":[1],"end-row":4280,"meta":{},"name-end-col":17,"name-end-row":4275,"name-row":4275,"added":"1.0","ns":"clojure.core","name":"ns-aliases","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4275","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[ns]"],"doc":"Returns a map of the aliases for the namespace.","row":4275},{"end-row":2742,"meta":{},"name-end-col":18,"name-end-row":2729,"name-row":2729,"added":"1.0","ns":"clojure.core","name":"dotimes","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2729","lang":[],"filename":"/src/clj/clojure/core.clj","macro":true,"col":1,"name-col":11,"end-col":43,"arglist-strs":["[bindings & body]"],"varargs-min-arity":1,"doc":"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.","row":2729},{"fixed-arities":[1,4,3,2],"end-row":2791,"meta":{},"name-end-col":10,"name-end-row":2744,"name-row":2744,"added":"1.0","ns":"clojure.core","name":"map","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2744","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":56,"arglist-strs":["[f]","[f coll]","[f c1 c2]","[f c1 c2 c3]","[f c1 c2 c3 & colls]"],"varargs-min-arity":4,"doc":"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.","row":2744},{"fixed-arities":[1],"end-row":7280,"meta":{},"name-end-col":18,"name-end-row":7271,"name-row":7271,"added":"1.2","ns":"clojure.core","name":"frequencies","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7271","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[coll]"],"doc":"Returns a map from distinct items in coll to the number of times\n  they appear.","row":7271},{"end-row":20,"meta":{"arglists":["quote",[["&","items"]]]},"name-end-col":7,"name-end-row":20,"name-row":20,"added":"1.0","ns":"clojure.core","name":"list","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L16","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":3,"end-col":48,"doc":"Creates a new list containing the items.","row":16},{"end-row":7870,"meta":{},"name-end-col":42,"name-end-row":7864,"name-row":7864,"added":"1.4","ns":"clojure.core","name":"default-data-readers","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7864","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":22,"end-col":53,"doc":"Default map of data reader functions provided by Clojure. May be\n  overridden by binding *data-readers*.","row":7864},{"fixed-arities":[3],"end-row":115,"meta":{},"name-end-col":27,"name-end-row":104,"private":true,"name-row":104,"ns":"clojure.core","name":"print-tagged-object","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L104","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":18,"arglist-strs":["[o rep w]"],"row":104},{"fixed-arities":[1],"end-row":4872,"meta":{},"name-end-col":17,"name-end-row":4864,"name-row":4864,"added":"1.0","ns":"clojure.core","name":"re-pattern","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4864","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":50,"arglist-strs":["[s]"],"doc":"Returns an instance of java.util.regex.Pattern, for use, e.g. in\n  re-matcher.","row":4864},{"fixed-arities":[2],"end-row":2184,"meta":{},"name-end-col":19,"name-end-row":2179,"name-row":2179,"added":"1.0","ns":"clojure.core","name":"remove-watch","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2179","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[reference key]"],"doc":"Removes a watch (set by add-watch) from a reference","row":2179},{"fixed-arities":[1,2],"end-row":5371,"meta":{},"name-end-col":17,"name-end-row":5365,"name-row":5365,"added":"1.0","ns":"clojure.core","name":"long-array","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5365","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":85,"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of longs","row":5365},{"fixed-arities":[1],"end-row":2269,"meta":{},"name-end-col":25,"name-end-row":2263,"name-row":2263,"added":"1.0","ns":"clojure.core","name":"clear-agent-errors","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L2263","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"deprecated":"1.2","name-col":7,"end-col":56,"arglist-strs":["[a]"],"doc":"DEPRECATED: Use 'restart-agent' instead.\n  Clears any exceptions thrown during asynchronous actions of the\n  agent, allowing subsequent actions to occur.","row":2263},{"fixed-arities":[1],"end-row":3565,"meta":{},"name-end-col":14,"name-end-row":3560,"name-row":3560,"added":"1.0","ns":"clojure.core","name":"number?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3560","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[x]"],"doc":"Returns true if x is a Number","row":3560},{"fixed-arities":[3,5],"end-row":5149,"meta":{},"name-end-col":13,"name-end-row":5134,"name-row":5134,"added":"1.0","ns":"clojure.core","name":"subseq","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L5134","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":79,"arglist-strs":["[sc test key]","[sc start-test start-key end-test end-key]"],"doc":"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true","row":5134},{"fixed-arities":[1],"end-row":4017,"meta":{},"name-end-col":18,"name-end-row":4004,"name-row":4004,"added":"1.0","ns":"clojure.core","name":"to-array-2d","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4004","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":12,"arglist-strs":["[coll]"],"doc":"Returns a (potentially-ragged) 2-dimensional array of Objects\n  containing the contents of coll, which can be any Collection of any\n  Collection.","row":4004},{"fixed-arities":[1],"end-row":245,"meta":{},"name-end-col":16,"name-end-row":241,"private":true,"name-row":241,"ns":"clojure.core","name":"strip-ns","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L241","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":33,"arglist-strs":["[named]"],"row":241},{"end-row":6106,"meta":{},"name-end-col":14,"name-end-row":6038,"name-row":6038,"added":"1.0","ns":"clojure.core","name":"require","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L6038","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":35,"arglist-strs":["[& args]"],"varargs-min-arity":0,"doc":"Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib, a prefix list that identifies\n  multiple libs whose names share a common prefix, or a flag that modifies\n  how all the identified libs are loaded. Use :require in the ns macro\n  in preference to calling this directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of Clojure code. Lib names are symbols and each lib is associated\n  with a Clojure namespace and a Java package that share its name. A lib's\n  name also locates its root directory within classpath using Java's\n  package name to classpath-relative path mapping. All resources in a lib\n  should be contained in the directory structure under its root directory.\n  All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or\n  <classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The\n  root resource should contain code to create the lib's\n  namespace (usually by using the ns macro) and load any additional\n  lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :as-alias takes a symbol as its argument and aliases like :as, however\n    the lib will not be loaded. If the lib has not been loaded, a new\n    empty namespace will be created (as with create-ns).\n  :refer takes a list of symbols to refer from the namespace or the :all\n    keyword to bring in all public vars.\n\n  Prefix Lists\n\n  It's common for Clojure code to depend on several libs whose names have\n  the same prefix. When specifying libs, prefix lists can be used to reduce\n  repetition. A prefix list contains the shared prefix followed by libspecs\n  with the shared prefix removed from the lib names. After removing the\n  prefix, the names that remain must not contain any periods.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded (has no effect on libspecs using :as-alias)\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n    (has no effect on libspecs using :as-alias)\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the libraries clojure.zip and clojure.set\n  abbreviated as 's'.\n\n  (require '(clojure zip [set :as s]))","row":6038},{"fixed-arities":[1],"end-row":8105,"meta":{},"name-end-col":16,"name-end-row":8099,"name-row":8099,"added":"1.11","ns":"clojure.core","name":"infinite?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L8099","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[num]"],"doc":"Returns true if num is negative or positive infinity, else false","row":8099},{"fixed-arities":[1],"end-row":126,"meta":{"arglists":["quote",[["x"]]]},"name-end-col":7,"name-end-row":126,"name-row":126,"added":"1.0","ns":"clojure.core","name":"nnext","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L121","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":2,"end-col":48,"arglist-strs":["[x]"],"doc":"Same as (next (next x))","row":121},{"fixed-arities":[3],"end-row":292,"meta":{},"name-end-col":32,"name-end-row":267,"private":true,"name-row":267,"ns":"clojure.core","name":"build-positional-factory","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_deftype.clj#L267","lang":[],"filename":"/src/clj/clojure/core_deftype.clj","col":1,"name-col":8,"end-col":45,"arglist-strs":["[nom classname fields]"],"doc":"Used to build a positional factory for a given type/record.  Because of the\n  limitation of 20 arguments to Clojure functions, this factory needs to be\n  constructed to deal with more arguments.  It does this by building a straight\n  forward type/record ctor call in the <=20 case, and a call to the same\n  ctor pulling the extra args out of the & overage parameter.  Finally, the\n  arity is constrained to the number of expected fields and an ArityException\n  will be thrown at runtime if the actual arg count does not match.","row":267},{"fixed-arities":[1],"end-row":4399,"meta":{},"name-end-col":35,"name-end-row":4392,"name-row":4392,"added":"1.11","ns":"clojure.core","name":"seq-to-map-for-destructuring","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L4392","lang":[],"filename":"/src/clj/clojure/core.clj","col":1,"name-col":7,"end-col":67,"arglist-strs":["[s]"],"doc":"Builds a map from a seq as described in\n  https://clojure.org/reference/special_forms#keyword-arguments","row":4392},{"fixed-arities":[3],"end-row":239,"meta":{},"name-end-col":17,"name-end-row":238,"private":true,"name-row":238,"ns":"clojure.core","name":"print-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core_print.clj#L238","lang":[],"filename":"/src/clj/clojure/core_print.clj","col":1,"name-col":8,"end-col":40,"arglist-strs":["[m print-one w]"],"row":238}]