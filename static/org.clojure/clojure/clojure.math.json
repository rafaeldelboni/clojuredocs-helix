[{"end-row":31,"meta":{"added":"1.11","const":true,"tag":["quote","double"],"doc":"Constant for e, the base for natural logarithms.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#E"},"name-end-col":4,"name-end-row":30,"name-row":30,"added":"1.11","ns":"clojure.math","name":"E","defined-by":"clojure.core/def","filename":"clojure/math.clj","col":1,"name-col":3,"end-col":10,"doc":"Constant for e, the base for natural logarithms.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#E","row":24},{"end-row":40,"meta":{"added":"1.11","const":true,"tag":["quote","double"],"doc":"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI"},"name-end-col":5,"name-end-row":39,"name-row":39,"added":"1.11","ns":"clojure.math","name":"PI","defined-by":"clojure.core/def","filename":"clojure/math.clj","col":1,"name-col":3,"end-col":11,"doc":"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI","row":33},{"fixed-arities":[1],"end-row":51,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sin-double-","inline":["fn",["a"],["quote",["Math/sin",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":10,"name-end-row":42,"name-row":42,"added":"1.11","ns":"clojure.math","name":"sin","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[a]"],"doc":"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sin-double-","row":42},{"fixed-arities":[1],"end-row":61,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cos-double-","inline":["fn",["a"],["quote",["Math/cos",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":10,"name-end-row":53,"name-row":53,"added":"1.11","ns":"clojure.math","name":"cos","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[a]"],"doc":"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cos-double-","row":53},{"fixed-arities":[1],"end-row":72,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tan-double-","inline":["fn",["a"],["quote",["Math/tan",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":10,"name-end-row":63,"name-row":63,"added":"1.11","ns":"clojure.math","name":"tan","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[a]"],"doc":"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tan-double-","row":63},{"fixed-arities":[1],"end-row":83,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#asin-double-","inline":["fn",["a"],["quote",["Math/asin",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":74,"name-row":74,"added":"1.11","ns":"clojure.math","name":"asin","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#asin-double-","row":74},{"fixed-arities":[1],"end-row":93,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#acos-double-","inline":["fn",["a"],["quote",["Math/acos",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":85,"name-row":85,"added":"1.11","ns":"clojure.math","name":"acos","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#acos-double-","row":85},{"fixed-arities":[1],"end-row":104,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan-double-","inline":["fn",["a"],["quote",["Math/atan",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":95,"name-row":95,"added":"1.11","ns":"clojure.math","name":"atan","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan-double-","row":95},{"fixed-arities":[1],"end-row":113,"meta":{"added":"1.11","inline-arities":[1],"doc":"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-","inline":["fn",["deg"],["quote",["Math/toRadians",["double",["clojure.core/unquote","deg"]]]]]},"name-end-col":17,"name-end-row":106,"name-row":106,"added":"1.11","ns":"clojure.math","name":"to-radians","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[deg]"],"doc":"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-","row":106},{"fixed-arities":[1],"end-row":122,"meta":{"added":"1.11","inline-arities":[1],"doc":"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-","inline":["fn",["r"],["quote",["Math/toDegrees",["double",["clojure.core/unquote","r"]]]]]},"name-end-col":17,"name-end-row":115,"name-row":115,"added":"1.11","ns":"clojure.math","name":"to-degrees","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[r]"],"doc":"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-","row":115},{"fixed-arities":[1],"end-row":134,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#exp-double-","inline":["fn",["a"],["quote",["Math/exp",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":10,"name-end-row":124,"name-row":124,"added":"1.11","ns":"clojure.math","name":"exp","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[a]"],"doc":"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#exp-double-","row":124},{"fixed-arities":[1],"end-row":146,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log-double-","inline":["fn",["a"],["quote",["Math/log",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":10,"name-end-row":136,"name-row":136,"added":"1.11","ns":"clojure.math","name":"log","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[a]"],"doc":"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log-double-","row":136},{"fixed-arities":[1],"end-row":158,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log10-double-","inline":["fn",["a"],["quote",["Math/log10",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":12,"name-end-row":148,"name-row":148,"added":"1.11","ns":"clojure.math","name":"log10","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[a]"],"doc":"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log10-double-","row":148},{"fixed-arities":[1],"end-row":170,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-","inline":["fn",["a"],["quote",["Math/sqrt",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":160,"name-row":160,"added":"1.11","ns":"clojure.math","name":"sqrt","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-","row":160},{"fixed-arities":[1],"end-row":182,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cbrt-double-","inline":["fn",["a"],["quote",["Math/cbrt",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":172,"name-row":172,"added":"1.11","ns":"clojure.math","name":"cbrt","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cbrt-double-","row":172},{"fixed-arities":[2],"end-row":197,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n  where n is the integer closest to the exact value of dividend / divisor.\n  If two integers are equally close, then n is the even one.\n  If the remainder is zero, sign will match dividend.\n  If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n  If dividend is finite and divisor is infinite => dividend\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-","inline":["fn",["dividend","divisor"],["quote",["Math/IEEEremainder",["double",["clojure.core/unquote","dividend"]],["double",["clojure.core/unquote","divisor"]]]]]},"name-end-col":21,"name-end-row":184,"name-row":184,"added":"1.11","ns":"clojure.math","name":"IEEE-remainder","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[dividend divisor]"],"doc":"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n  where n is the integer closest to the exact value of dividend / divisor.\n  If two integers are equally close, then n is the even one.\n  If the remainder is zero, sign will match dividend.\n  If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n  If dividend is finite and divisor is infinite => dividend\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-","row":184},{"fixed-arities":[1],"end-row":208,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ceil-double-","inline":["fn",["a"],["quote",["Math/ceil",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":199,"name-row":199,"added":"1.11","ns":"clojure.math","name":"ceil","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ceil-double-","row":199},{"fixed-arities":[1],"end-row":220,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floor-double-","inline":["fn",["a"],["quote",["Math/floor",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":12,"name-end-row":210,"name-row":210,"added":"1.11","ns":"clojure.math","name":"floor","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[a]"],"doc":"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floor-double-","row":210},{"fixed-arities":[1],"end-row":231,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-","inline":["fn",["a"],["quote",["Math/rint",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":11,"name-end-row":222,"name-row":222,"added":"1.11","ns":"clojure.math","name":"rint","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-","row":222},{"fixed-arities":[2],"end-row":242,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan2-double-double-","inline":["fn",["y","x"],["quote",["Math/atan2",["double",["clojure.core/unquote","y"]],["double",["clojure.core/unquote","x"]]]]]},"name-end-col":12,"name-end-row":233,"name-row":233,"added":"1.11","ns":"clojure.math","name":"atan2","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[y x]"],"doc":"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#atan2-double-double-","row":233},{"fixed-arities":[2],"end-row":252,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double-","inline":["fn",["a","b"],["quote",["Math/pow",["double",["clojure.core/unquote","a"]],["double",["clojure.core/unquote","b"]]]]]},"name-end-col":10,"name-end-row":244,"name-row":244,"added":"1.11","ns":"clojure.math","name":"pow","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[a b]"],"doc":"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double-","row":244},{"fixed-arities":[1],"end-row":265,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf or < Long/MIN_VALUE => Long/MIN_VALUE\n  If a is ##Inf or > Long/MAX_VALUE => Long/MAX_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#round-double-","inline":["fn",["a"],["quote",["Math/round",["double",["clojure.core/unquote","a"]]]]]},"name-end-col":12,"name-end-row":254,"name-row":254,"added":"1.11","ns":"clojure.math","name":"round","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[a]"],"doc":"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf or < Long/MIN_VALUE => Long/MIN_VALUE\n  If a is ##Inf or > Long/MAX_VALUE => Long/MAX_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#round-double-","row":254},{"fixed-arities":[0],"end-row":275,"meta":{"added":"1.11","inline-arities":[0],"doc":"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--","inline":["fn",[],["quote",["Math/random"]]]},"name-end-col":13,"name-end-row":267,"name-row":267,"added":"1.11","ns":"clojure.math","name":"random","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[]"],"doc":"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--","row":267},{"fixed-arities":[2],"end-row":284,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the sum of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-long-long-","inline":["fn",["x","y"],["quote",["Math/addExact",["long",["clojure.core/unquote","x"]],["long",["clojure.core/unquote","y"]]]]]},"name-end-col":16,"name-end-row":277,"name-row":277,"added":"1.11","ns":"clojure.math","name":"add-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[x y]"],"doc":"Returns the sum of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-long-long-","row":277},{"fixed-arities":[2],"end-row":293,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the difference of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#subtractExact-long-long-","inline":["fn",["x","y"],["quote",["Math/subtractExact",["long",["clojure.core/unquote","x"]],["long",["clojure.core/unquote","y"]]]]]},"name-end-col":21,"name-end-row":286,"name-row":286,"added":"1.11","ns":"clojure.math","name":"subtract-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[x y]"],"doc":"Returns the difference of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#subtractExact-long-long-","row":286},{"fixed-arities":[2],"end-row":302,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the product of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#multiplyExact-long-long-","inline":["fn",["x","y"],["quote",["Math/multiplyExact",["long",["clojure.core/unquote","x"]],["long",["clojure.core/unquote","y"]]]]]},"name-end-col":21,"name-end-row":295,"name-row":295,"added":"1.11","ns":"clojure.math","name":"multiply-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[x y]"],"doc":"Returns the product of x and y, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#multiplyExact-long-long-","row":295},{"fixed-arities":[1],"end-row":311,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns a incremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#incrementExact-long-","inline":["fn",["a"],["quote",["Math/incrementExact",["long",["clojure.core/unquote","a"]]]]]},"name-end-col":22,"name-end-row":304,"name-row":304,"added":"1.11","ns":"clojure.math","name":"increment-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[a]"],"doc":"Returns a incremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#incrementExact-long-","row":304},{"fixed-arities":[1],"end-row":320,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns a decremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#decrementExact-long-","inline":["fn",["a"],["quote",["Math/decrementExact",["long",["clojure.core/unquote","a"]]]]]},"name-end-col":22,"name-end-row":313,"name-row":313,"added":"1.11","ns":"clojure.math","name":"decrement-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":27,"arglist-strs":["[a]"],"doc":"Returns a decremented by 1, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#decrementExact-long-","row":313},{"fixed-arities":[1],"end-row":329,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the negation of a, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#negateExact-long-","inline":["fn",["a"],["quote",["Math/negateExact",["long",["clojure.core/unquote","a"]]]]]},"name-end-col":19,"name-end-row":322,"name-row":322,"added":"1.11","ns":"clojure.math","name":"negate-exact","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[a]"],"doc":"Returns the negation of a, throws ArithmeticException on overflow.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#negateExact-long-","row":322},{"fixed-arities":[2],"end-row":339,"meta":{"added":"1.11","inline-arities":[2],"doc":"Integer division that rounds to negative infinity (as opposed to zero).\n  The special case (floorDiv Long/MIN_VALUE -1) overflows and returns Long/MIN_VALUE.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-","inline":["fn",["x","y"],["quote",["Math/floorDiv",["long",["clojure.core/unquote","x"]],["long",["clojure.core/unquote","y"]]]]]},"name-end-col":16,"name-end-row":331,"name-row":331,"added":"1.11","ns":"clojure.math","name":"floor-div","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[x y]"],"doc":"Integer division that rounds to negative infinity (as opposed to zero).\n  The special case (floorDiv Long/MIN_VALUE -1) overflows and returns Long/MIN_VALUE.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-","row":331},{"fixed-arities":[2],"end-row":349,"meta":{"added":"1.11","inline-arities":[2],"doc":"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-","inline":["fn",["x","y"],["quote",["Math/floorMod",["long",["clojure.core/unquote","x"]],["long",["clojure.core/unquote","y"]]]]]},"name-end-col":16,"name-end-row":341,"name-row":341,"added":"1.11","ns":"clojure.math","name":"floor-mod","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[x y]"],"doc":"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-","row":341},{"fixed-arities":[1],"end-row":362,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  If d is +/- Double/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-","inline":["fn",["d"],["quote",["Math/ulp",["double",["clojure.core/unquote","d"]]]]]},"name-end-col":10,"name-end-row":351,"name-row":351,"added":"1.11","ns":"clojure.math","name":"ulp","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[d]"],"doc":"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  If d is +/- Double/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-","row":351},{"fixed-arities":[1],"end-row":372,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-","inline":["fn",["d"],["quote",["Math/signum",["double",["clojure.core/unquote","d"]]]]]},"name-end-col":13,"name-end-row":364,"name-row":364,"added":"1.11","ns":"clojure.math","name":"signum","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[d]"],"doc":"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-","row":364},{"fixed-arities":[1],"end-row":383,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sinh-double-","inline":["fn",["x"],["quote",["Math/sinh",["double",["clojure.core/unquote","x"]]]]]},"name-end-col":11,"name-end-row":374,"name-row":374,"added":"1.11","ns":"clojure.math","name":"sinh","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sinh-double-","row":374},{"fixed-arities":[1],"end-row":395,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cosh-double-","inline":["fn",["x"],["quote",["Math/cosh",["double",["clojure.core/unquote","x"]]]]]},"name-end-col":11,"name-end-row":385,"name-row":385,"added":"1.11","ns":"clojure.math","name":"cosh","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#cosh-double-","row":385},{"fixed-arities":[1],"end-row":408,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tanh-double-","inline":["fn",["x"],["quote",["Math/tanh",["double",["clojure.core/unquote","x"]]]]]},"name-end-col":11,"name-end-row":397,"name-row":397,"added":"1.11","ns":"clojure.math","name":"tanh","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#tanh-double-","row":397},{"fixed-arities":[2],"end-row":419,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#hypot-double-double-","inline":["fn",["x","y"],["quote",["Math/hypot",["double",["clojure.core/unquote","x"]],["double",["clojure.core/unquote","y"]]]]]},"name-end-col":12,"name-end-row":410,"name-row":410,"added":"1.11","ns":"clojure.math","name":"hypot","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[x y]"],"doc":"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#hypot-double-double-","row":410},{"fixed-arities":[1],"end-row":432,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-","inline":["fn",["x"],["quote",["Math/expm1",["double",["clojure.core/unquote","x"]]]]]},"name-end-col":12,"name-end-row":421,"name-row":421,"added":"1.11","ns":"clojure.math","name":"expm1","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[x]"],"doc":"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-","row":421},{"fixed-arities":[1],"end-row":446,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or < -1 => ##NaN\n  If x is ##Inf => ##Inf\n  If x is -1 => ##-Inf\n  If x is 0 => 0 with sign matching x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log1p-double-","inline":["fn",["x"],["quote",["Math/log1p",["double",["clojure.core/unquote","x"]]]]]},"name-end-col":12,"name-end-row":434,"name-row":434,"added":"1.11","ns":"clojure.math","name":"log1p","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[x]"],"doc":"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or < -1 => ##NaN\n  If x is ##Inf => ##Inf\n  If x is -1 => ##-Inf\n  If x is 0 => 0 with sign matching x\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#log1p-double-","row":434},{"fixed-arities":[2],"end-row":456,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-","inline":["fn",["magnitude","sign"],["quote",["Math/copySign",["double",["clojure.core/unquote","magnitude"]],["double",["clojure.core/unquote","sign"]]]]]},"name-end-col":16,"name-end-row":448,"name-row":448,"added":"1.11","ns":"clojure.math","name":"copy-sign","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[magnitude sign]"],"doc":"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-","row":448},{"fixed-arities":[1],"end-row":467,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => Double/MAX_EXPONENT + 1\n  If d is zero or subnormal => Double/MIN_EXPONENT - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-","inline":["fn",["d"],["quote",["Math/getExponent",["double",["clojure.core/unquote","d"]]]]]},"name-end-col":19,"name-end-row":458,"name-row":458,"added":"1.11","ns":"clojure.math","name":"get-exponent","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[d]"],"doc":"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => Double/MAX_EXPONENT + 1\n  If d is zero or subnormal => Double/MIN_EXPONENT - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-","row":458},{"fixed-arities":[2],"end-row":485,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Double/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Double/MAX_VALUE with same sign as start\n  If start is equal to +=Double/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-","inline":["fn",["start","direction"],["quote",["Math/nextAfter",["double",["clojure.core/unquote","start"]],["double",["clojure.core/unquote","direction"]]]]]},"name-end-col":17,"name-end-row":469,"name-row":469,"added":"1.11","ns":"clojure.math","name":"next-after","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[start direction]"],"doc":"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Double/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Double/MAX_VALUE with same sign as start\n  If start is equal to +=Double/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-","row":469},{"fixed-arities":[1],"end-row":497,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-","inline":["fn",["d"],["quote",["Math/nextUp",["double",["clojure.core/unquote","d"]]]]]},"name-end-col":14,"name-end-row":487,"name-row":487,"added":"1.11","ns":"clojure.math","name":"next-up","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-","row":487},{"fixed-arities":[1],"end-row":509,"meta":{"added":"1.11","inline-arities":[1],"doc":"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##-Inf => ##-Inf\n  If d is zero => -Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","inline":["fn",["d"],["quote",["Math/nextDown",["double",["clojure.core/unquote","d"]]]]]},"name-end-col":16,"name-end-row":499,"name-row":499,"added":"1.11","ns":"clojure.math","name":"next-down","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##-Inf => ##-Inf\n  If d is zero => -Double/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","row":499},{"fixed-arities":[2],"end-row":522,"meta":{"added":"1.11","inline-arities":[2],"doc":"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between Double/MIN_EXPONENT and Double/MAX_EXPONENT, the answer is exact.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","inline":["fn",["d","scaleFactor"],["quote",["Math/scalb",["double",["clojure.core/unquote","d"]],["int",["clojure.core/unquote","scaleFactor"]]]]]},"name-end-col":12,"name-end-row":511,"name-row":511,"added":"1.11","ns":"clojure.math","name":"scalb","defined-by":"clojure.core/defn","filename":"clojure/math.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[d scaleFactor]"],"doc":"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between Double/MIN_EXPONENT and Double/MAX_EXPONENT, the answer is exact.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","row":511}]