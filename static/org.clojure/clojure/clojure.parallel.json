[{"fixed-arities":[1,2],"end-row":147,"meta":{},"name-end-col":11,"index":0,"name-end-row":143,"name-row":143,"ns":"clojure.parallel","name":"pmax","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L143","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns the maximum element, presuming Comparable elements, unless\n  a Comparator comp is supplied","row":143},{"fixed-arities":[1],"end-row":67,"meta":{},"name-end-col":24,"index":0,"name-end-row":65,"private":true,"name-row":65,"ns":"clojure.parallel","name":"binary-predicate","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L65","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":35,"arglist-strs":["[f]"],"row":65},{"fixed-arities":[1],"end-row":51,"meta":{},"name-end-col":17,"index":0,"name-end-row":49,"private":true,"name-row":49,"ns":"clojure.parallel","name":"binary-op","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L49","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[f]"],"row":49},{"fixed-arities":[1],"end-row":47,"meta":{},"name-end-col":10,"index":0,"name-end-row":45,"private":true,"name-row":45,"ns":"clojure.parallel","name":"op","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L45","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":21,"arglist-strs":["[f]"],"row":45},{"fixed-arities":[1,2],"end-row":153,"meta":{},"name-end-col":11,"index":0,"name-end-row":149,"name-row":149,"ns":"clojure.parallel","name":"pmin","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L149","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":41,"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns the minimum element, presuming Comparable elements, unless\n  a Comparator comp is supplied","row":149},{"fixed-arities":[1],"end-row":59,"meta":{},"name-end-col":15,"index":0,"name-end-row":57,"private":true,"name-row":57,"ns":"clojure.parallel","name":"reducer","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L57","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[f]"],"row":57},{"end-row":246,"meta":{},"name-end-col":7,"index":0,"name-end-row":246,"name-row":246,"ns":"clojure.parallel","name":"v","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L246","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":6,"end-col":24,"row":246},{"fixed-arities":[3],"end-row":196,"meta":{},"name-end-col":17,"index":0,"name-end-row":195,"private":true,"name-row":195,"ns":"clojure.parallel","name":"pcumulate","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L195","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":51,"arglist-strs":["[coll f init]"],"row":195},{"fixed-arities":[1],"end-row":192,"meta":{},"name-end-col":16,"index":0,"name-end-row":189,"name-row":189,"ns":"clojure.parallel","name":"pdistinct","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L189","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[coll]"],"doc":"Returns a parallel array of the distinct elements of coll","row":189},{"fixed-arities":[1],"end-row":71,"meta":{},"name-end-col":32,"index":0,"name-end-row":69,"private":true,"name-row":69,"ns":"clojure.parallel","name":"int-and-object-predicate","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L69","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":35,"arglist-strs":["[f]"],"row":69},{"fixed-arities":[1],"end-row":183,"meta":{},"name-end-col":12,"index":0,"name-end-row":178,"private":true,"name-row":178,"ns":"clojure.parallel","name":"pall","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L178","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":17,"arglist-strs":["[coll]"],"doc":"Realizes a copy of the coll as a parallel array, with any bounds/filters/maps applied","row":178},{"fixed-arities":[1],"end-row":207,"meta":{},"name-end-col":19,"index":0,"name-end-row":204,"name-row":204,"ns":"clojure.parallel","name":"pfilter-nils","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L204","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":43,"arglist-strs":["[coll]"],"doc":"Returns a vector containing the non-nil (realized) elements of coll","row":204},{"fixed-arities":[1],"end-row":135,"meta":{},"name-end-col":10,"index":0,"name-end-row":73,"name-row":73,"ns":"clojure.parallel","name":"par","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L73","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[coll]","[coll & ops]"],"varargs-min-arity":1,"doc":"Creates a parallel array from coll. ops, if supplied, perform\n  on-the-fly filtering or transformations during parallel realization\n  or calculation. ops form a chain, and bounds must precede filters,\n  must precede maps. ops must be a set of keyword value pairs of the\n  following forms:\n\n     :bound [start end] \n\n  Only elements from start (inclusive) to end (exclusive) will be\n  processed when the array is realized.\n\n     :filter pred \n\n  Filter preds remove elements from processing when the array is realized. pred\n  must be a function of one argument whose return will be processed\n  via boolean.\n\n     :filter-index pred2 \n\n  pred2 must be a function of two arguments, which will be an element\n  of the collection and the corresponding index, whose return will be\n  processed via boolean.\n\n     :filter-with [pred2 coll2] \n\n  pred2 must be a function of two arguments, which will be\n  corresponding elements of the 2 collections.\n\n     :map f \n\n  Map fns will be used to transform elements when the array is\n  realized. f must be a function of one argument.\n\n     :map-index f2 \n\n  f2 must be a function of two arguments, which will be an element of\n  the collection and the corresponding index.\n\n     :map-with [f2 coll2]\n\n  f2 must be a function of two arguments, which will be corresponding\n  elements of the 2 collections.","row":73},{"fixed-arities":[1],"end-row":176,"meta":{},"name-end-col":17,"index":0,"name-end-row":175,"private":true,"name-row":175,"ns":"clojure.parallel","name":"pa-to-vec","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L175","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[pa]"],"row":175},{"fixed-arities":[1],"end-row":187,"meta":{},"name-end-col":11,"index":0,"name-end-row":185,"name-row":185,"ns":"clojure.parallel","name":"pvec","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L185","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":30,"arglist-strs":["[pa]"],"doc":"Returns the realized contents of the parallel array pa as a Clojure vector","row":185},{"fixed-arities":[1],"end-row":141,"meta":{},"name-end-col":11,"index":0,"name-end-row":138,"name-row":138,"ns":"clojure.parallel","name":"pany","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L138","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[coll]"],"doc":"Returns some (random) element of the coll if it satisfies the bound/filter/map","row":138},{"fixed-arities":[1],"end-row":55,"meta":{},"name-end-col":32,"index":0,"name-end-row":53,"private":true,"name-row":53,"ns":"clojure.parallel","name":"int-and-object-to-object","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L53","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[f]"],"row":53},{"fixed-arities":[1,2],"end-row":162,"meta":{},"name-end-col":15,"index":0,"name-end-row":158,"name-row":158,"ns":"clojure.parallel","name":"psummary","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L158","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns a map of summary statistics (min. max, size, min-index, max-index, \n  presuming Comparable elements, unless a Comparator comp is supplied","row":158},{"fixed-arities":[1],"end-row":156,"meta":{},"name-end-col":19,"index":0,"name-end-row":155,"private":true,"name-row":155,"ns":"clojure.parallel","name":"summary-map","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L155","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":103,"arglist-strs":["[s]"],"row":155},{"fixed-arities":[3],"end-row":171,"meta":{},"name-end-col":14,"index":0,"name-end-row":164,"name-row":164,"ns":"clojure.parallel","name":"preduce","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L164","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[f base coll]"],"doc":"Returns the reduction of the realized elements of coll\n  using function f. Note f will not necessarily be called\n  consecutively, and so must be commutative. Also note that \n  (f base an-element) might be performed many times, i.e. base is not\n  an initial value as with sequential reduce.","row":164},{"end-row":221,"meta":{},"name-end-col":7,"index":0,"name-end-row":221,"name-row":221,"ns":"clojure.parallel","name":"a","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L221","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":6,"end-col":36,"row":221},{"fixed-arities":[1,2],"end-row":202,"meta":{},"name-end-col":12,"index":0,"name-end-row":198,"name-row":198,"ns":"clojure.parallel","name":"psort","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L198","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":55,"arglist-strs":["[coll]","[coll comp]"],"doc":"Returns a new vector consisting of the realized items in coll, sorted, \n  presuming Comparable elements, unless a Comparator comp is supplied","row":198},{"fixed-arities":[1],"end-row":63,"meta":{},"name-end-col":17,"index":0,"name-end-row":61,"private":true,"name-row":61,"ns":"clojure.parallel","name":"predicate","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L61","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":8,"end-col":31,"arglist-strs":["[f]"],"row":61},{"fixed-arities":[1],"end-row":213,"meta":{},"name-end-col":20,"index":0,"name-end-row":209,"name-row":209,"ns":"clojure.parallel","name":"pfilter-dupes","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L209","lang":[],"filename":"/src/clj/clojure/parallel.clj","col":1,"name-col":7,"end-col":59,"arglist-strs":["[coll]"],"doc":"Returns a vector containing the (realized) elements of coll, \n  without any consecutive duplicates","row":209}]