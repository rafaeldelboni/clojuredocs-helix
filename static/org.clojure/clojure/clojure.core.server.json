[{"end-row":293,"meta":{},"name-end-col":15,"index":0,"name-end-row":272,"name-row":272,"added":"1.10","ns":"clojure.core.server","name":"io-prepl","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L272","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":34,"arglist-strs":["[& {:keys [valf] :or {valf pr-str}}]"],"varargs-min-arity":0,"doc":"prepl bound to *in* and *out*, suitable for use with e.g. server/repl (socket-repl).\n  :ret and :tap vals will be processed by valf, a fn of one argument\n  or a symbol naming same (default pr-str)\n\n  Alpha, subject to change.","row":272},{"fixed-arities":[2],"end-row":48,"meta":{},"name-end-col":16,"index":0,"name-end-row":44,"private":true,"name-row":44,"ns":"clojure.core.server","name":"required","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L44","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":83,"arglist-strs":["[opts prop]"],"doc":"Throw if opts does not contain prop.","row":44},{"end-row":26,"meta":{},"name-end-col":24,"index":0,"name-end-row":26,"private":true,"name-row":26,"ns":"clojure.core.server","name":"lock","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L26","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":20,"end-col":42,"row":26},{"fixed-arities":[1],"end-row":123,"meta":{},"name-end-col":19,"index":0,"name-end-row":84,"name-row":84,"ns":"clojure.core.server","name":"start-server","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L84","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":13,"arglist-strs":["[opts]"],"doc":"Start a socket server given the specified opts:\n    :address Host or address, string, defaults to loopback address\n    :port Port, integer, required\n    :name Name, required\n    :accept Namespaced symbol of the accept function to invoke, required\n    :args Vector of args to pass to accept function\n    :bind-err Bind *err* to socket out stream?, defaults to true\n    :server-daemon Is server thread a daemon?, defaults to true\n    :client-daemon Are client threads daemons?, defaults to true\n   Returns server socket.","row":84},{"fixed-arities":[1],"end-row":155,"meta":{},"name-end-col":19,"index":0,"name-end-row":146,"private":true,"name-row":146,"ns":"clojure.core.server","name":"parse-props","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L146","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":15,"arglist-strs":["[props]"],"doc":"Parse clojure.server.* from properties to produce a map of server configs.","row":146},{"fixed-arities":[0],"end-row":185,"meta":{},"name-end-col":11,"index":0,"name-end-row":180,"name-row":180,"ns":"clojure.core.server","name":"repl","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L180","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[]"],"doc":"REPL with predefined hooks for attachable socket server.","row":180},{"fixed-arities":[2],"end-row":189,"meta":{},"name-end-col":16,"index":0,"name-end-row":187,"private":true,"name-row":187,"ns":"clojure.core.server","name":"ex->data","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L187","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":44,"arglist-strs":["[ex phase]"],"row":187},{"end-row":23,"meta":{},"name-end-col":25,"index":0,"name-end-row":23,"name-row":23,"ns":"clojure.core.server","name":"*session*","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L23","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":16,"end-col":30,"row":23},{"fixed-arities":[8],"end-row":82,"meta":{},"name-end-col":25,"index":0,"name-end-row":57,"private":true,"name-row":57,"ns":"clojure.core.server","name":"accept-connection","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L57","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":23,"arglist-strs":["[conn name client-id in out err accept args]"],"doc":"Start accept function, to be invoked on a client thread, given:\n    conn - client socket\n    name - server name\n    client-id - client identifier\n    in - in stream\n    out - out stream\n    err - err stream\n    accept - accept fn symbol to invoke\n    args - to pass to accept-fn","row":57},{"end-row":338,"meta":{},"name-end-col":19,"index":0,"name-end-row":295,"name-row":295,"added":"1.10","ns":"clojure.core.server","name":"remote-prepl","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L295","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[host port in-reader out-fn & {:keys [valf readf] :or {valf read-string readf #(read %1 false %2)}}]"],"varargs-min-arity":4,"doc":"Implements a prepl on in-reader and out-fn by forwarding to a\n  remote [io-]prepl over a socket.  Messages will be read by readf, a\n  fn of a LineNumberingPushbackReader and EOF value or a symbol naming\n  same (default #(read %1 false %2)),\n  :ret and :tap vals will be processed by valf, a fn of one argument\n  or a symbol naming same (default read-string). If that function\n  throws, :val will be unprocessed.\n\n  Alpha, subject to change.","row":295},{"fixed-arities":[1],"end-row":55,"meta":{},"name-end-col":21,"index":0,"name-end-row":50,"private":true,"name-row":50,"ns":"clojure.core.server","name":"validate-opts","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L50","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":71,"arglist-strs":["[{:keys [name port accept] :as opts}]"],"doc":"Validate server config options","row":50},{"fixed-arities":[0],"end-row":167,"meta":{},"name-end-col":16,"index":0,"name-end-row":163,"name-row":163,"ns":"clojure.core.server","name":"repl-init","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L163","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":46,"arglist-strs":["[]"],"doc":"Initialize repl in user namespace and make standard repl requires.","row":163},{"end-row":27,"meta":{},"name-end-col":27,"index":0,"name-end-row":27,"private":true,"name-row":27,"ns":"clojure.core.server","name":"servers","defined-by":"clojure.core/defonce","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L27","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":20,"end-col":31,"row":27},{"end-row":42,"meta":{},"name-end-col":27,"index":0,"name-end-row":38,"private":true,"name-row":38,"ns":"clojure.core.server","name":"thread","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L38","lang":[],"filename":"/src/clj/clojure/core/server.clj","macro":true,"col":1,"name-col":21,"end-col":15,"arglist-strs":["[name daemon & body]"],"varargs-min-arity":2,"row":38},{"end-row":261,"meta":{},"name-end-col":12,"index":0,"name-end-row":191,"name-row":191,"added":"1.10","ns":"clojure.core.server","name":"prepl","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L191","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[in-reader out-fn & {:keys [stdin]}]"],"varargs-min-arity":2,"doc":"a REPL with structured output (for programs)\n  reads forms to eval from in-reader (a LineNumberingPushbackReader)\n  Closing the input or passing the form :repl/quit will cause it to return\n\n  Calls out-fn with data, one of:\n  {:tag :ret\n   :val val ;;eval result, or Throwable->map data if exception thrown\n   :ns ns-name-string\n   :ms long ;;eval time in milliseconds\n   :form string ;;iff successfully read\n   :exception true ;;iff exception thrown\n  }\n  {:tag :out\n   :val string} ;chars from during-eval *out*\n  {:tag :err\n   :val string} ;chars from during-eval *err*\n  {:tag :tap\n   :val val} ;values from tap>\n\n  You might get more than one :out or :err per eval, but exactly one :ret\n  tap output can happen at any time (i.e. between evals)\n  If during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied\n\n  Alpha, subject to change.","row":191},{"fixed-arities":[1],"end-row":270,"meta":{},"name-end-col":18,"index":0,"name-end-row":263,"private":true,"name-row":263,"ns":"clojure.core.server","name":"resolve-fn","defined-by":"clojure.core/defn-","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L263","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":8,"end-col":11,"arglist-strs":["[valf]"],"row":263},{"fixed-arities":[0],"end-row":144,"meta":{},"name-end-col":19,"index":0,"name-end-row":139,"name-row":139,"ns":"clojure.core.server","name":"stop-servers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L139","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[]"],"doc":"Stop all servers ignores all errors, and returns nil.","row":139},{"fixed-arities":[2],"end-row":178,"meta":{},"name-end-col":16,"index":0,"name-end-row":169,"name-row":169,"ns":"clojure.core.server","name":"repl-read","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L169","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":20,"arglist-strs":["[request-prompt request-exit]"],"doc":"Enhanced :read hook for repl supporting :repl/quit.","row":169},{"fixed-arities":[0,1],"end-row":137,"meta":{},"name-end-col":18,"index":0,"name-end-row":125,"name-row":125,"ns":"clojure.core.server","name":"stop-server","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L125","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[]","[name]"],"doc":"Stop server with name or use the server-name from *session* if none supplied.\n  Returns true if server stopped successfully, nil if not found, or throws if\n  there is an error closing the socket.","row":125},{"fixed-arities":[1],"end-row":161,"meta":{},"name-end-col":20,"index":0,"name-end-row":157,"name-row":157,"ns":"clojure.core.server","name":"start-servers","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L157","lang":[],"filename":"/src/clj/clojure/core/server.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[system-props]"],"doc":"Start all servers specified in the system properties.","row":157},{"end-row":36,"meta":{},"name-end-col":30,"index":0,"name-end-row":29,"private":true,"name-row":29,"ns":"clojure.core.server","name":"with-lock","defined-by":"clojure.core/defmacro","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L29","lang":[],"filename":"/src/clj/clojure/core/server.clj","macro":true,"col":1,"name-col":21,"end-col":31,"arglist-strs":["[lock-expr & body]"],"varargs-min-arity":1,"row":29}]