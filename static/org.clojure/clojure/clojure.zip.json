[{"fixed-arities":[4],"end-row":33,"meta":{},"name-end-col":13,"name-end-row":18,"name-row":18,"added":"1.0","ns":"clojure.zip","name":"zipper","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L18","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":16,"arglist-strs":["[branch? children make-node root]"],"doc":"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.","row":18},{"fixed-arities":[1],"end-row":42,"meta":{},"name-end-col":14,"name-end-row":35,"name-row":35,"added":"1.0","ns":"clojure.zip","name":"seq-zip","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L35","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for nested sequences, given a root sequence","row":35},{"fixed-arities":[1],"end-row":51,"meta":{},"name-end-col":17,"name-end-row":44,"name-row":44,"added":"1.0","ns":"clojure.zip","name":"vector-zip","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L44","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for nested vectors, given a root vector","row":44},{"fixed-arities":[1],"end-row":62,"meta":{},"name-end-col":14,"name-end-row":53,"name-row":53,"added":"1.0","ns":"clojure.zip","name":"xml-zip","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L53","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for xml elements (as from xml/parse),\n  given a root element","row":53},{"fixed-arities":[1],"end-row":67,"meta":{},"name-end-col":11,"name-end-row":64,"name-row":64,"added":"1.0","ns":"clojure.zip","name":"node","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L64","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[loc]"],"doc":"Returns the node at loc","row":64},{"fixed-arities":[1],"end-row":73,"meta":{},"name-end-col":14,"name-end-row":69,"name-row":69,"added":"1.0","ns":"clojure.zip","name":"branch?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L69","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":44,"arglist-strs":["[loc]"],"doc":"Returns true if the node at loc is a branch","row":69},{"fixed-arities":[1],"end-row":81,"meta":{},"name-end-col":15,"name-end-row":75,"name-row":75,"added":"1.0","ns":"clojure.zip","name":"children","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L75","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":62,"arglist-strs":["[loc]"],"doc":"Returns a seq of the children of node at loc, which must be a branch","row":75},{"fixed-arities":[3],"end-row":88,"meta":{},"name-end-col":16,"name-end-row":83,"name-row":83,"added":"1.0","ns":"clojure.zip","name":"make-node","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L83","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":49,"arglist-strs":["[loc node children]"],"doc":"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.","row":83},{"fixed-arities":[1],"end-row":94,"meta":{},"name-end-col":11,"name-end-row":90,"name-row":90,"added":"1.0","ns":"clojure.zip","name":"path","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L90","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":23,"arglist-strs":["[loc]"],"doc":"Returns a seq of nodes leading to this loc","row":90},{"fixed-arities":[1],"end-row":100,"meta":{},"name-end-col":12,"name-end-row":96,"name-row":96,"added":"1.0","ns":"clojure.zip","name":"lefts","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L96","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":24,"arglist-strs":["[loc]"],"doc":"Returns a seq of the left siblings of this loc","row":96},{"fixed-arities":[1],"end-row":106,"meta":{},"name-end-col":13,"name-end-row":102,"name-row":102,"added":"1.0","ns":"clojure.zip","name":"rights","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L102","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[loc]"],"doc":"Returns a seq of the right siblings of this loc","row":102},{"fixed-arities":[1],"end-row":121,"meta":{},"name-end-col":11,"name-end-row":109,"name-row":109,"added":"1.0","ns":"clojure.zip","name":"down","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L109","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":52,"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children","row":109},{"fixed-arities":[1],"end-row":135,"meta":{},"name-end-col":9,"name-end-row":123,"name-row":123,"added":"1.0","ns":"clojure.zip","name":"up","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L123","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[loc]"],"doc":"Returns the loc of the parent of the node at this loc, or nil if at\n  the top","row":123},{"fixed-arities":[1],"end-row":147,"meta":{},"name-end-col":11,"name-end-row":137,"name-row":137,"added":"1.0","ns":"clojure.zip","name":"root","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L137","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":25,"arglist-strs":["[loc]"],"doc":"zips all the way up and returns the root node, reflecting any\n changes.","row":137},{"fixed-arities":[1],"end-row":155,"meta":{},"name-end-col":12,"name-end-row":149,"name-row":149,"added":"1.0","ns":"clojure.zip","name":"right","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L149","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":77,"arglist-strs":["[loc]"],"doc":"Returns the loc of the right sibling of the node at this loc, or nil","row":149},{"fixed-arities":[1],"end-row":164,"meta":{},"name-end-col":16,"name-end-row":157,"name-row":157,"added":"1.0","ns":"clojure.zip","name":"rightmost","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L157","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[loc]"],"doc":"Returns the loc of the rightmost sibling of the node at this loc, or self","row":157},{"fixed-arities":[1],"end-row":172,"meta":{},"name-end-col":11,"name-end-row":166,"name-row":166,"added":"1.0","ns":"clojure.zip","name":"left","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L166","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc]"],"doc":"Returns the loc of the left sibling of the node at this loc, or nil","row":166},{"fixed-arities":[1],"end-row":181,"meta":{},"name-end-col":15,"name-end-row":174,"name-row":174,"added":"1.0","ns":"clojure.zip","name":"leftmost","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L174","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":15,"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost sibling of the node at this loc, or self","row":174},{"fixed-arities":[2],"end-row":191,"meta":{},"name-end-col":18,"name-end-row":183,"name-row":183,"added":"1.0","ns":"clojure.zip","name":"insert-left","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L183","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the left sibling of the node at this loc,\n without moving","row":183},{"fixed-arities":[2],"end-row":201,"meta":{},"name-end-col":19,"name-end-row":193,"name-row":193,"added":"1.0","ns":"clojure.zip","name":"insert-right","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L193","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the right sibling of the node at this loc,\n  without moving","row":193},{"fixed-arities":[2],"end-row":208,"meta":{},"name-end-col":14,"name-end-row":203,"name-row":203,"added":"1.0","ns":"clojure.zip","name":"replace","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L203","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":66,"arglist-strs":["[loc node]"],"doc":"Replaces the node at this loc, without moving","row":203},{"end-row":214,"meta":{},"name-end-col":11,"name-end-row":210,"name-row":210,"added":"1.0","ns":"clojure.zip","name":"edit","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L210","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[loc f & args]"],"varargs-min-arity":2,"doc":"Replaces the node at this loc with the value of (f node args)","row":210},{"fixed-arities":[2],"end-row":221,"meta":{},"name-end-col":19,"name-end-row":216,"name-row":216,"added":"1.0","ns":"clojure.zip","name":"insert-child","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L216","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":73,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the leftmost child of the node at this loc,\n  without moving","row":216},{"fixed-arities":[2],"end-row":228,"meta":{},"name-end-col":19,"name-end-row":223,"name-row":223,"added":"1.0","ns":"clojure.zip","name":"append-child","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L223","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":77,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the rightmost child of the node at this loc,\n  without moving","row":223},{"fixed-arities":[1],"end-row":244,"meta":{},"name-end-col":11,"name-end-row":230,"name-row":230,"added":"1.0","ns":"clojure.zip","name":"next","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L230","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":32,"arglist-strs":["[loc]"],"doc":"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.","row":230},{"fixed-arities":[1],"end-row":256,"meta":{},"name-end-col":11,"name-end-row":246,"name-row":246,"added":"1.0","ns":"clojure.zip","name":"prev","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L246","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[loc]"],"doc":"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.","row":246},{"fixed-arities":[1],"end-row":262,"meta":{},"name-end-col":11,"name-end-row":258,"name-row":258,"added":"1.0","ns":"clojure.zip","name":"end?","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L258","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":22,"arglist-strs":["[loc]"],"doc":"Returns true if loc represents the end of a depth-first walk","row":258},{"fixed-arities":[1],"end-row":279,"meta":{},"name-end-col":13,"name-end-row":264,"name-row":264,"added":"1.0","ns":"clojure.zip","name":"remove","defined-by":"clojure.core/defn","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L264","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":7,"end-col":37,"arglist-strs":["[loc]"],"doc":"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.","row":264},{"end-row":285,"meta":{},"name-end-col":10,"name-end-row":285,"name-row":285,"ns":"clojure.zip","name":"data","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L285","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":6,"end-col":32,"row":285},{"end-row":286,"meta":{},"name-end-col":8,"name-end-row":286,"name-row":286,"ns":"clojure.zip","name":"dz","defined-by":"clojure.core/def","git-source":"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L286","filename":"/src/clj/clojure/zip.clj","col":1,"name-col":6,"end-col":27,"row":286}]