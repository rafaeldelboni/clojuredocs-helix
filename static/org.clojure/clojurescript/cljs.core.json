[{"fixed-arities":[2],"end-row":90,"ns":"cljs.core","name":"import-macros","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[ns [& vars]]"],"row":64},{"end-row":192,"ns":"cljs.core","name":"doto","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x & forms]"],"doc":"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new js/Map) (.set \"a\" 1) (.set \"b\" 2))","row":178},{"end-row":389,"ns":"cljs.core","name":"memfn","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name & args]"],"doc":"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.","row":380},{"fixed-arities":[1],"end-row":590,"private":true,"ns":"cljs.core","name":"assert-valid-fdecl","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"doc":"A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.","row":553},{"fixed-arities":[1],"end-row":617,"private":true,"ns":"cljs.core","name":"sigs","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":592},{"fixed-arities":[2],"end-row":627,"ns":"cljs.core","name":"defonce","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x init]"],"doc":"defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated","row":619},{"arglist-strs":["[bindings]"],"end-row":730,"filename":"cljs/core.cljc","fixed-arities":[1],"lang":"clj","name":"destructure","ns":"cljs.core","row":629},{"end-row":736,"private":true,"ns":"cljs.core","name":"return-first","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"row":732},{"fixed-arities":[2],"end-row":770,"ns":"cljs.core","name":"goog-define","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[sym default]"],"doc":"Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {your-app.core/DEBUG! true}","row":738},{"end-row":787,"ns":"cljs.core","name":"let","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://clojure.org/reference/special_forms#binding-forms for\n  more information about destructuring.","row":772},{"end-row":811,"ns":"cljs.core","name":"loop","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.","row":789},{"doc":"protocol fqn -> [partition number, bit]","end-row":829,"filename":"cljs/core.cljc","lang":"clj","name":"fast-path-protocols","ns":"cljs.core","row":813},{"doc":"total number of partitions","end-row":837,"filename":"cljs/core.cljc","lang":"clj","name":"fast-path-protocol-partitions-count","ns":"cljs.core","row":831},{"fixed-arities":[2],"end-row":842,"private":true,"ns":"cljs.core","name":"compatible?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[inferred-tag allowed-tags]"],"row":839},{"fixed-arities":[3],"end-row":847,"private":true,"ns":"cljs.core","name":"typed-expr?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env form allowed-tags]"],"row":844},{"fixed-arities":[1],"end-row":850,"private":true,"ns":"cljs.core","name":"string-expr","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[e]"],"row":849},{"fixed-arities":[0,1],"end-row":867,"ns":"cljs.core","name":"str","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & ys]"],"row":852},{"fixed-arities":[1],"end-row":870,"private":true,"ns":"cljs.core","name":"bool-expr","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[e]"],"row":869},{"fixed-arities":[2],"end-row":875,"private":true,"ns":"cljs.core","name":"simple-test-expr?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env ast]"],"row":872},{"fixed-arities":[0,1],"end-row":886,"ns":"cljs.core","name":"and","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & next]"],"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.","row":877},{"fixed-arities":[0,1],"end-row":897,"ns":"cljs.core","name":"or","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & next]"],"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.","row":888},{"fixed-arities":[1],"end-row":900,"ns":"cljs.core","name":"nil?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":899},{"fixed-arities":[1],"end-row":903,"ns":"cljs.core","name":"some?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":902},{"fixed-arities":[1],"end-row":906,"ns":"cljs.core","name":"coercive-not","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":905},{"fixed-arities":[2],"end-row":909,"ns":"cljs.core","name":"coercive-not=","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]"],"row":908},{"fixed-arities":[2],"end-row":912,"ns":"cljs.core","name":"coercive-=","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]"],"row":911},{"fixed-arities":[1],"end-row":916,"ns":"cljs.core","name":"coercive-boolean","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":914},{"fixed-arities":[1],"end-row":921,"ns":"cljs.core","name":"truth_","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":919},{"fixed-arities":[0],"end-row":924,"ns":"cljs.core","name":"js-arguments","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":923},{"fixed-arities":[2],"end-row":927,"ns":"cljs.core","name":"js-delete","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key]"],"row":926},{"fixed-arities":[2],"end-row":930,"ns":"cljs.core","name":"js-in","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[key obj]"],"row":929},{"fixed-arities":[0],"end-row":937,"ns":"cljs.core","name":"js-debugger","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"doc":"Emit JavaScript \"debugger;\" statement","row":932},{"fixed-arities":[1],"end-row":951,"ns":"cljs.core","name":"js-comment","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[comment]"],"doc":"Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline","row":939},{"fixed-arities":[2],"end-row":957,"ns":"cljs.core","name":"unsafe-cast","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[t x]"],"doc":"EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.","row":953},{"fixed-arities":[1],"end-row":962,"ns":"cljs.core","name":"js-inline-comment","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[comment]"],"doc":"Emit an inline JavaScript comment.","row":959},{"fixed-arities":[1],"end-row":965,"ns":"cljs.core","name":"true?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":964},{"fixed-arities":[1],"end-row":968,"ns":"cljs.core","name":"false?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":967},{"fixed-arities":[1],"end-row":971,"ns":"cljs.core","name":"string?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":970},{"fixed-arities":[1],"end-row":974,"ns":"cljs.core","name":"js-fn?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":973},{"fixed-arities":[1],"end-row":991,"ns":"cljs.core","name":"exists?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"doc":"Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.","row":976},{"fixed-arities":[1],"end-row":996,"ns":"cljs.core","name":"undefined?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"doc":"Return true if argument is identical to the JavaScript undefined value.","row":993},{"fixed-arities":[2],"end-row":999,"ns":"cljs.core","name":"identical?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a b]"],"row":998},{"fixed-arities":[2],"end-row":1008,"ns":"cljs.core","name":"instance?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[c x]"],"row":1001},{"fixed-arities":[1],"end-row":1011,"ns":"cljs.core","name":"number?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1010},{"fixed-arities":[1],"end-row":1014,"ns":"cljs.core","name":"symbol?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1013},{"fixed-arities":[1],"end-row":1017,"ns":"cljs.core","name":"keyword?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1016},{"fixed-arities":[2],"end-row":1030,"ns":"cljs.core","name":"aget","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[array idx]","[array idx & idxs]"],"row":1019},{"fixed-arities":[3],"end-row":1044,"ns":"cljs.core","name":"aset","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"row":1032},{"fixed-arities":[2],"end-row":1051,"ns":"cljs.core","name":"unchecked-get","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key]"],"doc":"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.","row":1046},{"fixed-arities":[3],"end-row":1058,"ns":"cljs.core","name":"unchecked-set","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key val]"],"doc":"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.","row":1053},{"fixed-arities":[0,1,2],"end-row":1064,"ns":"cljs.core","name":"+","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"row":1060},{"fixed-arities":[1],"end-row":1066,"ns":"cljs.core","name":"byte","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1066},{"fixed-arities":[1],"end-row":1067,"ns":"cljs.core","name":"short","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1067},{"fixed-arities":[1],"end-row":1068,"ns":"cljs.core","name":"float","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1068},{"fixed-arities":[1],"end-row":1069,"ns":"cljs.core","name":"double","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1069},{"fixed-arities":[1],"end-row":1071,"ns":"cljs.core","name":"unchecked-byte","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1071},{"fixed-arities":[1],"end-row":1072,"ns":"cljs.core","name":"unchecked-char","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1072},{"fixed-arities":[1],"end-row":1073,"ns":"cljs.core","name":"unchecked-short","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1073},{"fixed-arities":[1],"end-row":1074,"ns":"cljs.core","name":"unchecked-float","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1074},{"fixed-arities":[1],"end-row":1075,"ns":"cljs.core","name":"unchecked-double","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1075},{"arglist-strs":["[& xs]"],"end-row":1078,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-add","ns":"cljs.core","row":1077},{"arglist-strs":["[& xs]"],"end-row":1081,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-add-int","ns":"cljs.core","row":1080},{"fixed-arities":[1],"end-row":1084,"ns":"cljs.core","name":"unchecked-dec","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1083},{"fixed-arities":[1],"end-row":1087,"ns":"cljs.core","name":"unchecked-dec-int","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1086},{"arglist-strs":["[& xs]"],"end-row":1090,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-divide-int","ns":"cljs.core","row":1089},{"fixed-arities":[1],"end-row":1093,"ns":"cljs.core","name":"unchecked-inc","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1092},{"fixed-arities":[1],"end-row":1096,"ns":"cljs.core","name":"unchecked-inc-int","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1095},{"arglist-strs":["[& xs]"],"end-row":1099,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-multiply","ns":"cljs.core","row":1098},{"arglist-strs":["[& xs]"],"end-row":1102,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-multiply-int","ns":"cljs.core","row":1101},{"fixed-arities":[1],"end-row":1105,"ns":"cljs.core","name":"unchecked-negate","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1104},{"fixed-arities":[1],"end-row":1108,"ns":"cljs.core","name":"unchecked-negate-int","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1107},{"fixed-arities":[2],"end-row":1111,"ns":"cljs.core","name":"unchecked-remainder-int","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1110},{"arglist-strs":["[& xs]"],"end-row":1114,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-subtract","ns":"cljs.core","row":1113},{"arglist-strs":["[& xs]"],"end-row":1117,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"unchecked-subtract-int","ns":"cljs.core","row":1116},{"fixed-arities":[1,2],"end-row":1122,"ns":"cljs.core","name":"-","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1119},{"fixed-arities":[0,1,2],"end-row":1128,"ns":"cljs.core","name":"*","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"row":1124},{"fixed-arities":[1,2],"end-row":1133,"ns":"cljs.core","name":"/","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1130},{"fixed-arities":[1,2],"end-row":1138,"ns":"cljs.core","name":"divide","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1135},{"fixed-arities":[1,2],"end-row":1143,"ns":"cljs.core","name":"<","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1140},{"fixed-arities":[1,2],"end-row":1148,"ns":"cljs.core","name":"<=","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1145},{"fixed-arities":[1,2],"end-row":1153,"ns":"cljs.core","name":">","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1150},{"fixed-arities":[1,2],"end-row":1158,"ns":"cljs.core","name":">=","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1155},{"fixed-arities":[1,2],"end-row":1163,"ns":"cljs.core","name":"==","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1160},{"fixed-arities":[1],"end-row":1166,"ns":"cljs.core","name":"dec","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1165},{"fixed-arities":[1],"end-row":1169,"ns":"cljs.core","name":"inc","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1168},{"fixed-arities":[1],"end-row":1172,"ns":"cljs.core","name":"zero?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1171},{"fixed-arities":[1],"end-row":1175,"ns":"cljs.core","name":"pos?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1174},{"fixed-arities":[1],"end-row":1178,"ns":"cljs.core","name":"neg?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1177},{"fixed-arities":[1,2],"end-row":1184,"ns":"cljs.core","name":"max","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1180},{"fixed-arities":[1,2],"end-row":1190,"ns":"cljs.core","name":"min","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1186},{"fixed-arities":[2],"end-row":1193,"ns":"cljs.core","name":"js-mod","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[num div]"],"row":1192},{"fixed-arities":[1],"end-row":1196,"ns":"cljs.core","name":"bit-not","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1195},{"fixed-arities":[2],"end-row":1200,"ns":"cljs.core","name":"bit-and","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1198},{"fixed-arities":[2],"end-row":1205,"ns":"cljs.core","name":"unsafe-bit-and","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1203},{"fixed-arities":[2],"end-row":1209,"ns":"cljs.core","name":"bit-or","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1207},{"fixed-arities":[1],"end-row":1212,"ns":"cljs.core","name":"int","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1211},{"fixed-arities":[2],"end-row":1216,"ns":"cljs.core","name":"bit-xor","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1214},{"fixed-arities":[2],"end-row":1220,"ns":"cljs.core","name":"bit-and-not","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1218},{"fixed-arities":[2],"end-row":1223,"ns":"cljs.core","name":"bit-clear","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1222},{"fixed-arities":[2],"end-row":1226,"ns":"cljs.core","name":"bit-flip","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1225},{"fixed-arities":[2],"end-row":1229,"ns":"cljs.core","name":"bit-test","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1228},{"fixed-arities":[2],"end-row":1232,"ns":"cljs.core","name":"bit-shift-left","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1231},{"fixed-arities":[2],"end-row":1235,"ns":"cljs.core","name":"bit-shift-right","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1234},{"fixed-arities":[2],"end-row":1238,"ns":"cljs.core","name":"bit-shift-right-zero-fill","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1237},{"fixed-arities":[2],"end-row":1241,"ns":"cljs.core","name":"unsigned-bit-shift-right","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1240},{"fixed-arities":[2],"end-row":1244,"ns":"cljs.core","name":"bit-set","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1243},{"fixed-arities":[2],"end-row":1248,"ns":"cljs.core","name":"mask","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[hash shift]"],"row":1247},{"fixed-arities":[2],"end-row":1252,"ns":"cljs.core","name":"bitpos","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[hash shift]"],"row":1251},{"fixed-arities":[3],"end-row":1262,"ns":"cljs.core","name":"caching-hash","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[coll hash-fn hash-key]"],"row":1255},{"fixed-arities":[5],"end-row":1271,"private":true,"ns":"cljs.core","name":"do-curried","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[name doc meta args body]"],"row":1266},{"end-row":1277,"private":true,"ns":"cljs.core","name":"defcurried","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name doc meta args & body]"],"doc":"Builds another arity of the fn that returns a fn awaiting the last\n  param","row":1273},{"fixed-arities":[3],"end-row":1288,"private":true,"ns":"cljs.core","name":"do-rfn","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[f1 k fkv]"],"row":1279},{"fixed-arities":[2],"end-row":1293,"private":true,"ns":"cljs.core","name":"rfn","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[[f1 k] fkv]"],"doc":"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.","row":1290},{"fixed-arities":[1],"end-row":1301,"private":true,"ns":"cljs.core","name":"protocol-prefix","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[psym]"],"row":1297},{"end-row":1311,"filename":"cljs/core.cljc","lang":"clj","name":"base-type","ns":"cljs.core","private":true,"row":1303},{"end-row":1319,"filename":"cljs/core.cljc","lang":"clj","name":"js-base-type","ns":"cljs.core","private":true,"row":1313},{"end-row":1380,"ns":"cljs.core","name":"reify","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& impls]"],"doc":"reify creates an object implementing a protocol.\n  reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}","row":1321},{"end-row":1388,"ns":"cljs.core","name":"specify!","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & impls]"],"doc":"Identical to reify but mutates its first argument.","row":1382},{"end-row":1395,"ns":"cljs.core","name":"specify","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & impls]"],"doc":"Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.","row":1390},{"fixed-arities":[0],"end-row":1398,"private":true,"ns":"cljs.core","name":"js-this","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":1397},{"end-row":1404,"ns":"cljs.core","name":"this-as","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name & body]"],"doc":"Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.","row":1400},{"fixed-arities":[1],"end-row":1407,"private":true,"ns":"cljs.core","name":"to-property","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[sym]"],"row":1406},{"fixed-arities":[3],"end-row":1425,"private":true,"ns":"cljs.core","name":"update-protocol-var","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[p type env]"],"row":1409},{"fixed-arities":[2],"end-row":1430,"private":true,"ns":"cljs.core","name":"resolve-var","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env sym]"],"row":1427},{"fixed-arities":[1],"end-row":1437,"private":true,"ns":"cljs.core","name":"->impl-map","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[impls]"],"row":1432},{"fixed-arities":[5],"end-row":1448,"private":true,"ns":"cljs.core","name":"base-assign-impls","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env resolve tsym type [p sigs]]"],"row":1439},{"end-row":1450,"filename":"cljs/core.cljc","lang":"clj","name":"extend-prefix","ns":"cljs.core","private":true,"row":1450},{"fixed-arities":[2],"end-row":1461,"private":true,"ns":"cljs.core","name":"adapt-obj-params","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1459},{"fixed-arities":[2],"end-row":1468,"private":true,"ns":"cljs.core","name":"adapt-ifn-params","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1463},{"fixed-arities":[2],"end-row":1474,"private":true,"ns":"cljs.core","name":"adapt-ifn-invoke-params","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1471},{"fixed-arities":[2],"end-row":1480,"private":true,"ns":"cljs.core","name":"adapt-proto-params","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1476},{"fixed-arities":[3],"end-row":1489,"private":true,"ns":"cljs.core","name":"add-obj-methods","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type type-sym sigs]"],"row":1482},{"fixed-arities":[3],"end-row":1497,"private":true,"ns":"cljs.core","name":"ifn-invoke-methods","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type type-sym [f & meths :as form]]"],"row":1491},{"fixed-arities":[3],"end-row":1518,"private":true,"ns":"cljs.core","name":"add-ifn-methods","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type type-sym [f & meths :as form]]"],"row":1499},{"fixed-arities":[4],"end-row":1530,"private":true,"ns":"cljs.core","name":"add-proto-methods*","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[pprefix type type-sym [f & meths :as form]]"],"row":1520},{"fixed-arities":[5],"end-row":1547,"private":true,"ns":"cljs.core","name":"proto-assign-impls","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env resolve type-sym type [p sigs]]"],"row":1532},{"fixed-arities":[3],"end-row":1577,"private":true,"ns":"cljs.core","name":"validate-impl-sigs","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env p method]"],"row":1549},{"fixed-arities":[2],"end-row":1595,"private":true,"ns":"cljs.core","name":"validate-impls","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env impls]"],"row":1579},{"fixed-arities":[2],"end-row":1599,"private":true,"ns":"cljs.core","name":"type-hint-first-arg","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym argv]"],"row":1597},{"fixed-arities":[2],"end-row":1603,"private":true,"ns":"cljs.core","name":"type-hint-single-arity-sig","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1601},{"fixed-arities":[2],"end-row":1607,"private":true,"ns":"cljs.core","name":"type-hint-multi-arity-sig","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1605},{"fixed-arities":[2],"end-row":1611,"private":true,"ns":"cljs.core","name":"type-hint-multi-arity-sigs","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym sigs]"],"row":1609},{"fixed-arities":[2],"end-row":1617,"private":true,"ns":"cljs.core","name":"type-hint-sigs","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1613},{"fixed-arities":[2],"end-row":1623,"private":true,"ns":"cljs.core","name":"type-hint-impl-map","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[type-sym impl-map]"],"row":1619},{"end-row":1665,"ns":"cljs.core","name":"extend-type","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[type-sym & impls]"],"doc":"Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)","row":1625},{"fixed-arities":[2],"end-row":1687,"private":true,"ns":"cljs.core","name":"prepare-protocol-masks","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env impls]"],"row":1667},{"fixed-arities":[3],"end-row":1692,"private":true,"ns":"cljs.core","name":"annotate-specs","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[annots v [f sigs]]"],"row":1689},{"arglist-strs":["[type specs fields]","[type specs fields inline]"],"end-row":1709,"filename":"cljs/core.cljc","fixed-arities":[4,3],"lang":"clj","name":"dt->et","ns":"cljs.core","row":1694},{"fixed-arities":[2],"end-row":1715,"private":true,"ns":"cljs.core","name":"collect-protocols","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[impls env]"],"row":1711},{"fixed-arities":[3],"end-row":1726,"private":true,"ns":"cljs.core","name":"build-positional-factory","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[rsym rname fields]"],"row":1717},{"fixed-arities":[3],"end-row":1733,"private":true,"ns":"cljs.core","name":"validate-fields","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[case name fields]"],"row":1728},{"end-row":1803,"ns":"cljs.core","name":"deftype","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[t fields & impls]"],"doc":"(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields","row":1735},{"fixed-arities":[5],"end-row":1910,"private":true,"ns":"cljs.core","name":"emit-defrecord","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env tagname rname fields impls]"],"doc":"Do not use this directly - use defrecord","row":1805},{"fixed-arities":[3],"end-row":1922,"private":true,"ns":"cljs.core","name":"build-map-factory","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[rsym rname fields]"],"row":1912},{"end-row":1991,"ns":"cljs.core","name":"defrecord","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[rsym fields & impls]"],"doc":"(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.","row":1924},{"end-row":2177,"ns":"cljs.core","name":"defprotocol","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym & doc+methods]"],"doc":"A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17","row":1993},{"fixed-arities":[2],"end-row":2203,"ns":"cljs.core","name":"implements?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym x]"],"doc":"EXPERIMENTAL","row":2179},{"fixed-arities":[2],"end-row":2235,"ns":"cljs.core","name":"satisfies?","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym x]"],"doc":"Returns true if x satisfies the protocol","row":2205},{"end-row":2243,"ns":"cljs.core","name":"lazy-seq","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.","row":2237},{"end-row":2251,"ns":"cljs.core","name":"delay","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.","row":2245},{"end-row":2275,"ns":"cljs.core","name":"with-redefs","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.","row":2253},{"end-row":2288,"ns":"cljs.core","name":"binding","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.","row":2277},{"end-row":2329,"ns":"cljs.core","name":"condp","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[pred expr & clauses]"],"doc":"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an Error is thrown.","row":2290},{"fixed-arities":[4],"end-row":2346,"private":true,"ns":"cljs.core","name":"assoc-test","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[m test expr env]"],"row":2331},{"fixed-arities":[2],"end-row":2351,"private":true,"ns":"cljs.core","name":"const?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[env x]"],"row":2348},{"end-row":2422,"ns":"cljs.core","name":"case","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[e & clauses]"],"doc":"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.","row":2353},{"fixed-arities":[1],"end-row":2425,"private":true,"ns":"cljs.core","name":"when-assert","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":2424},{"fixed-arities":[1,2],"end-row":2438,"ns":"cljs.core","name":"assert","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x message]"],"doc":"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.","row":2427},{"fixed-arities":[2],"end-row":2525,"ns":"cljs.core","name":"for","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[seq-exprs body-expr]"],"doc":"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))","row":2440},{"end-row":2581,"ns":"cljs.core","name":"doseq","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[seq-exprs & body]"],"doc":"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.","row":2527},{"arglist-strs":["[& rest]"],"end-row":2590,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"array","ns":"cljs.core","row":2583},{"fixed-arities":[1,2],"end-row":2608,"ns":"cljs.core","name":"make-array","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[size]","[type size]","[type size & more-sizes]"],"row":2592},{"fixed-arities":[0,1],"end-row":2617,"ns":"cljs.core","name":"list","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & xs]"],"row":2610},{"fixed-arities":[0],"end-row":2628,"ns":"cljs.core","name":"vector","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& xs]"],"row":2619},{"fixed-arities":[0],"end-row":2638,"ns":"cljs.core","name":"array-map","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& kvs]"],"row":2630},{"fixed-arities":[0],"end-row":2651,"ns":"cljs.core","name":"hash-map","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& kvs]"],"row":2640},{"fixed-arities":[0],"end-row":2665,"ns":"cljs.core","name":"hash-set","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& xs]"],"row":2653},{"fixed-arities":[1],"end-row":2674,"private":true,"ns":"cljs.core","name":"js-obj*","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[kvs]"],"row":2667},{"arglist-strs":["[& rest]"],"end-row":2694,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"js-obj","ns":"cljs.core","row":2676},{"fixed-arities":[1],"end-row":2699,"ns":"cljs.core","name":"alength","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a]"],"row":2696},{"fixed-arities":[4],"end-row":2715,"ns":"cljs.core","name":"amap","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a idx ret expr]"],"doc":"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.","row":2701},{"fixed-arities":[5],"end-row":2727,"ns":"cljs.core","name":"areduce","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a idx ret init expr]"],"doc":"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.","row":2717},{"end-row":2741,"ns":"cljs.core","name":"dotimes","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.","row":2729},{"end-row":2751,"private":true,"ns":"cljs.core","name":"check-valid-options","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[options & valid-keys]"],"doc":"Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.","row":2743},{"end-row":2798,"ns":"cljs.core","name":"defmulti","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[mm-name & options]"],"doc":"Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy","row":2753},{"end-row":2803,"ns":"cljs.core","name":"defmethod","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[multifn dispatch-val & fn-tail]"],"doc":"Creates and installs a new method of multimethod associated with dispatch-value. ","row":2800},{"fixed-arities":[1],"end-row":2813,"ns":"cljs.core","name":"time","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr]"],"doc":"Evaluates expr and prints the time it took. Returns the value of expr.","row":2805},{"end-row":2831,"ns":"cljs.core","name":"simple-benchmark","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings expr iterations & {:keys [print-fn] :or {print-fn 'println}}]"],"doc":"Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.","row":2815},{"end-row":2833,"filename":"cljs/core.cljc","lang":"clj","name":"cs","ns":"cljs.core","private":true,"row":2833},{"fixed-arities":[0,1],"end-row":2844,"private":true,"ns":"cljs.core","name":"gen-apply-to-helper","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[]","[n]"],"row":2835},{"fixed-arities":[0],"end-row":2854,"ns":"cljs.core","name":"gen-apply-to","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":2846},{"fixed-arities":[3],"end-row":2878,"private":true,"ns":"cljs.core","name":"gen-apply-to-simple-helper","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[f num-args args]"],"row":2856},{"fixed-arities":[3],"end-row":2882,"ns":"cljs.core","name":"gen-apply-to-simple","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[f num-args args]"],"row":2880},{"end-row":2893,"ns":"cljs.core","name":"with-out-str","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.","row":2884},{"end-row":2902,"ns":"cljs.core","name":"lazy-cat","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& colls]"],"doc":"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))","row":2895},{"fixed-arities":[1],"end-row":2905,"ns":"cljs.core","name":"js-str","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[s]"],"row":2904},{"fixed-arities":[1],"end-row":2911,"ns":"cljs.core","name":"es6-iterable","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[ty]"],"row":2907},{"fixed-arities":[1],"end-row":2927,"ns":"cljs.core","name":"ns-publics","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the public intern mappings for the namespace.","row":2913},{"fixed-arities":[1],"end-row":2941,"ns":"cljs.core","name":"ns-imports","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the import mappings for the namespace.","row":2929},{"fixed-arities":[1],"end-row":2955,"ns":"cljs.core","name":"ns-interns","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the intern mappings for the namespace.","row":2943},{"fixed-arities":[2],"end-row":2967,"ns":"cljs.core","name":"ns-unmap","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns quoted-sym]"],"doc":"Removes the mappings for the symbol from the namespace.","row":2957},{"end-row":2974,"ns":"cljs.core","name":"vswap!","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[vol f & args]"],"doc":"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.","row":2969},{"arglist-strs":["[x & forms]"],"end-row":2978,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"locking","ns":"cljs.core","row":2976},{"fixed-arities":[0],"end-row":2981,"private":true,"ns":"cljs.core","name":"ns-special-form","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":2981},{"end-row":3036,"ns":"cljs.core","name":"require","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])","row":2983},{"end-row":3041,"ns":"cljs.core","name":"require-macros","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Similar to require but only for macros.","row":3038},{"end-row":3054,"ns":"cljs.core","name":"use","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])","row":3043},{"end-row":3059,"ns":"cljs.core","name":"use-macros","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Similar to use but only for macros.","row":3056},{"end-row":3068,"ns":"cljs.core","name":"import","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& import-symbols-or-lists]"],"doc":"import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.","row":3061},{"end-row":3081,"ns":"cljs.core","name":"refer-clojure","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.","row":3070},{"fixed-arities":[1],"end-row":3085,"ns":"cljs.core","name":"load-file*","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[f]"],"row":3084},{"fixed-arities":[1],"end-row":3096,"ns":"cljs.core","name":"macroexpand-1","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted]"],"doc":"If form represents a macro form, returns its expansion,\n  else returns form.","row":3087},{"fixed-arities":[1],"end-row":3112,"ns":"cljs.core","name":"macroexpand","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted]"],"doc":"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.","row":3098},{"fixed-arities":[1],"end-row":3115,"private":true,"ns":"cljs.core","name":"multi-arity-fn?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":3114},{"fixed-arities":[1],"end-row":3119,"private":true,"ns":"cljs.core","name":"variadic-fn?","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":3117},{"fixed-arities":[3,2],"end-row":3155,"private":true,"ns":"cljs.core","name":"variadic-fn*","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[sym method]","[sym [arglist & body :as method] solo]"],"row":3121},{"fixed-arities":[1],"end-row":3162,"ns":"cljs.core","name":"copy-arguments","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[dest]"],"row":3157},{"fixed-arities":[1],"end-row":3169,"private":true,"ns":"cljs.core","name":"elide-implicit-macro-args","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[arglists]"],"row":3164},{"fixed-arities":[4],"end-row":3199,"private":true,"ns":"cljs.core","name":"variadic-fn","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[name meta [[arglist & body :as method] :as fdecl] emit-var?]"],"row":3171},{"fixed-arities":[4],"end-row":3286,"private":true,"ns":"cljs.core","name":"multi-arity-fn","lang":"clj","filename":"cljs/core.cljc","arglist-strs":["[name meta fdecl emit-var?]"],"row":3209},{"doc":"Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.","end-row":3368,"filename":"cljs/core.cljc","lang":"clj","macro":true,"name":"defn","ns":"cljs.core","row":3297},{"end-row":3414,"ns":"cljs.core","name":"defmacro","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[&form &env name & args]"],"doc":"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.","row":3373},{"fixed-arities":[1],"end-row":3435,"ns":"cljs.core","name":"resolve","lang":"clj","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-sym]"],"doc":"Returns the var to which a symbol will be resolved in the namespace else nil.","row":3419},{"end-row":117,"ns":"cljs.core","name":"->","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x & forms]"],"doc":"Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc.","row":104},{"end-row":133,"ns":"cljs.core","name":"->>","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x & forms]"],"doc":"Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc.","row":120},{"fixed-arities":[2],"end-row":151,"ns":"cljs.core","name":"..","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x form]","[x form & more]"],"doc":"form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand.","row":136},{"end-row":156,"ns":"cljs.core","name":"comment","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Ignores body, yields nil","row":154},{"end-row":171,"ns":"cljs.core","name":"cond","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& clauses]"],"doc":"Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil.","row":159},{"end-row":176,"ns":"cljs.core","name":"declare","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& names]"],"doc":"defs the supplied var names with no bindings, useful for making forward declarations.","row":174},{"end-row":192,"ns":"cljs.core","name":"doto","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x & forms]"],"doc":"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new js/Map) (.set \"a\" 1) (.set \"b\" 2))","row":178},{"fixed-arities":[1],"end-row":200,"private":true,"ns":"cljs.core","name":"parse-impls","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[specs]"],"row":195},{"fixed-arities":[2],"end-row":208,"private":true,"ns":"cljs.core","name":"emit-extend-protocol","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[p specs]"],"row":203},{"end-row":247,"ns":"cljs.core","name":"extend-protocol","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[p & specs]"],"doc":"Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))","row":211},{"fixed-arities":[2],"end-row":266,"private":true,"ns":"cljs.core","name":"maybe-destructured","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[params body]"],"row":250},{"end-row":330,"ns":"cljs.core","name":"fn","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& sigs]"],"doc":"params => positional-params* , or positional-params* & rest-param\n     positional-param => binding-form\n     rest-param => binding-form\n     binding-form => name, or destructuring-form\n\n     Defines a function\n\n     See https://clojure.org/reference/special_forms#fn for more information","row":269},{"end-row":336,"ns":"cljs.core","name":"defn-","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name & decls]"],"doc":"same as defn, yielding non-public def","row":333},{"fixed-arities":[3,2],"end-row":356,"ns":"cljs.core","name":"if-let","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings then]","[bindings then else & oldform]"],"doc":"bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else","row":339},{"fixed-arities":[3,2],"end-row":364,"ns":"cljs.core","name":"if-not","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[test then]","[test then else]"],"doc":"Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil.","row":359},{"end-row":378,"ns":"cljs.core","name":"letfn","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[fnspecs & body]"],"doc":"fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.","row":367},{"end-row":389,"ns":"cljs.core","name":"memfn","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name & args]"],"doc":"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.","row":380},{"end-row":395,"ns":"cljs.core","name":"when","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[test & body]"],"doc":"Evaluates test. If logical true, evaluates body in an implicit do.","row":392},{"end-row":409,"ns":"cljs.core","name":"when-first","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once","row":398},{"end-row":424,"ns":"cljs.core","name":"when-let","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test","row":412},{"end-row":430,"ns":"cljs.core","name":"when-not","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[test & body]"],"doc":"Evaluates test. If logical false, evaluates body in an implicit do.","row":427},{"end-row":440,"ns":"cljs.core","name":"while","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[test & body]"],"doc":"Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil","row":433},{"end-row":457,"ns":"cljs.core","name":"cond->","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & clauses]"],"doc":"Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression.","row":443},{"end-row":474,"ns":"cljs.core","name":"cond->>","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & clauses]"],"doc":"Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression.","row":460},{"end-row":486,"ns":"cljs.core","name":"as->","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr name & forms]"],"doc":"Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form.","row":477},{"end-row":500,"ns":"cljs.core","name":"some->","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & forms]"],"doc":"When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc","row":489},{"end-row":514,"ns":"cljs.core","name":"some->>","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & forms]"],"doc":"When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc","row":503},{"fixed-arities":[3,2],"end-row":534,"ns":"cljs.core","name":"if-some","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings then]","[bindings then else & oldform]"],"doc":"bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else","row":517},{"end-row":551,"ns":"cljs.core","name":"when-some","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test","row":537},{"fixed-arities":[1],"end-row":590,"private":true,"ns":"cljs.core","name":"assert-valid-fdecl","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"doc":"A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.","row":553},{"fixed-arities":[1],"end-row":617,"private":true,"ns":"cljs.core","name":"sigs","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":592},{"fixed-arities":[2],"end-row":627,"ns":"cljs.core","name":"defonce","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x init]"],"doc":"defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated","row":619},{"arglist-strs":["[bindings]"],"end-row":730,"filename":"cljs/core.cljc","fixed-arities":[1],"lang":"cljs","name":"destructure","ns":"cljs.core","row":629},{"end-row":736,"private":true,"ns":"cljs.core","name":"return-first","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"row":732},{"fixed-arities":[2],"end-row":770,"ns":"cljs.core","name":"goog-define","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[sym default]"],"doc":"Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {your-app.core/DEBUG! true}","row":738},{"end-row":787,"ns":"cljs.core","name":"let","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://clojure.org/reference/special_forms#binding-forms for\n  more information about destructuring.","row":772},{"end-row":811,"ns":"cljs.core","name":"loop","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.","row":789},{"doc":"protocol fqn -> [partition number, bit]","end-row":829,"filename":"cljs/core.cljc","lang":"cljs","name":"fast-path-protocols","ns":"cljs.core","row":813},{"doc":"total number of partitions","end-row":837,"filename":"cljs/core.cljc","lang":"cljs","name":"fast-path-protocol-partitions-count","ns":"cljs.core","row":831},{"fixed-arities":[2],"end-row":842,"private":true,"ns":"cljs.core","name":"compatible?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[inferred-tag allowed-tags]"],"row":839},{"fixed-arities":[3],"end-row":847,"private":true,"ns":"cljs.core","name":"typed-expr?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env form allowed-tags]"],"row":844},{"fixed-arities":[1],"end-row":850,"private":true,"ns":"cljs.core","name":"string-expr","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[e]"],"row":849},{"fixed-arities":[0,1],"end-row":867,"ns":"cljs.core","name":"str","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & ys]"],"row":852},{"fixed-arities":[1],"end-row":870,"private":true,"ns":"cljs.core","name":"bool-expr","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[e]"],"row":869},{"fixed-arities":[2],"end-row":875,"private":true,"ns":"cljs.core","name":"simple-test-expr?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env ast]"],"row":872},{"fixed-arities":[0,1],"end-row":886,"ns":"cljs.core","name":"and","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & next]"],"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.","row":877},{"fixed-arities":[0,1],"end-row":897,"ns":"cljs.core","name":"or","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & next]"],"doc":"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.","row":888},{"fixed-arities":[1],"end-row":900,"ns":"cljs.core","name":"nil?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":899},{"fixed-arities":[1],"end-row":903,"ns":"cljs.core","name":"some?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":902},{"fixed-arities":[1],"end-row":906,"ns":"cljs.core","name":"coercive-not","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":905},{"fixed-arities":[2],"end-row":909,"ns":"cljs.core","name":"coercive-not=","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]"],"row":908},{"fixed-arities":[2],"end-row":912,"ns":"cljs.core","name":"coercive-=","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]"],"row":911},{"fixed-arities":[1],"end-row":916,"ns":"cljs.core","name":"coercive-boolean","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":914},{"fixed-arities":[1],"end-row":921,"ns":"cljs.core","name":"truth_","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":919},{"fixed-arities":[0],"end-row":924,"ns":"cljs.core","name":"js-arguments","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":923},{"fixed-arities":[2],"end-row":927,"ns":"cljs.core","name":"js-delete","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key]"],"row":926},{"fixed-arities":[2],"end-row":930,"ns":"cljs.core","name":"js-in","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[key obj]"],"row":929},{"fixed-arities":[0],"end-row":937,"ns":"cljs.core","name":"js-debugger","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"doc":"Emit JavaScript \"debugger;\" statement","row":932},{"fixed-arities":[1],"end-row":951,"ns":"cljs.core","name":"js-comment","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[comment]"],"doc":"Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline","row":939},{"fixed-arities":[2],"end-row":957,"ns":"cljs.core","name":"unsafe-cast","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[t x]"],"doc":"EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.","row":953},{"fixed-arities":[1],"end-row":962,"ns":"cljs.core","name":"js-inline-comment","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[comment]"],"doc":"Emit an inline JavaScript comment.","row":959},{"fixed-arities":[1],"end-row":965,"ns":"cljs.core","name":"true?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":964},{"fixed-arities":[1],"end-row":968,"ns":"cljs.core","name":"false?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":967},{"fixed-arities":[1],"end-row":971,"ns":"cljs.core","name":"string?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":970},{"fixed-arities":[1],"end-row":974,"ns":"cljs.core","name":"js-fn?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":973},{"fixed-arities":[1],"end-row":991,"ns":"cljs.core","name":"exists?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"doc":"Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.","row":976},{"fixed-arities":[1],"end-row":996,"ns":"cljs.core","name":"undefined?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"doc":"Return true if argument is identical to the JavaScript undefined value.","row":993},{"fixed-arities":[2],"end-row":999,"ns":"cljs.core","name":"identical?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a b]"],"row":998},{"fixed-arities":[2],"end-row":1008,"ns":"cljs.core","name":"instance?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[c x]"],"row":1001},{"fixed-arities":[1],"end-row":1011,"ns":"cljs.core","name":"number?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1010},{"fixed-arities":[1],"end-row":1014,"ns":"cljs.core","name":"symbol?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1013},{"fixed-arities":[1],"end-row":1017,"ns":"cljs.core","name":"keyword?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1016},{"fixed-arities":[2],"end-row":1030,"ns":"cljs.core","name":"aget","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[array idx]","[array idx & idxs]"],"row":1019},{"fixed-arities":[3],"end-row":1044,"ns":"cljs.core","name":"aset","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"row":1032},{"fixed-arities":[2],"end-row":1051,"ns":"cljs.core","name":"unchecked-get","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key]"],"doc":"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.","row":1046},{"fixed-arities":[3],"end-row":1058,"ns":"cljs.core","name":"unchecked-set","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[obj key val]"],"doc":"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.","row":1053},{"fixed-arities":[0,1,2],"end-row":1064,"ns":"cljs.core","name":"+","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"row":1060},{"fixed-arities":[1],"end-row":1066,"ns":"cljs.core","name":"byte","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1066},{"fixed-arities":[1],"end-row":1067,"ns":"cljs.core","name":"short","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1067},{"fixed-arities":[1],"end-row":1068,"ns":"cljs.core","name":"float","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1068},{"fixed-arities":[1],"end-row":1069,"ns":"cljs.core","name":"double","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1069},{"fixed-arities":[1],"end-row":1071,"ns":"cljs.core","name":"unchecked-byte","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1071},{"fixed-arities":[1],"end-row":1072,"ns":"cljs.core","name":"unchecked-char","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1072},{"fixed-arities":[1],"end-row":1073,"ns":"cljs.core","name":"unchecked-short","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1073},{"fixed-arities":[1],"end-row":1074,"ns":"cljs.core","name":"unchecked-float","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1074},{"fixed-arities":[1],"end-row":1075,"ns":"cljs.core","name":"unchecked-double","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1075},{"arglist-strs":["[& xs]"],"end-row":1078,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-add","ns":"cljs.core","row":1077},{"arglist-strs":["[& xs]"],"end-row":1081,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-add-int","ns":"cljs.core","row":1080},{"fixed-arities":[1],"end-row":1084,"ns":"cljs.core","name":"unchecked-dec","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1083},{"fixed-arities":[1],"end-row":1087,"ns":"cljs.core","name":"unchecked-dec-int","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1086},{"arglist-strs":["[& xs]"],"end-row":1090,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-divide-int","ns":"cljs.core","row":1089},{"fixed-arities":[1],"end-row":1093,"ns":"cljs.core","name":"unchecked-inc","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1092},{"fixed-arities":[1],"end-row":1096,"ns":"cljs.core","name":"unchecked-inc-int","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1095},{"arglist-strs":["[& xs]"],"end-row":1099,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-multiply","ns":"cljs.core","row":1098},{"arglist-strs":["[& xs]"],"end-row":1102,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-multiply-int","ns":"cljs.core","row":1101},{"fixed-arities":[1],"end-row":1105,"ns":"cljs.core","name":"unchecked-negate","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1104},{"fixed-arities":[1],"end-row":1108,"ns":"cljs.core","name":"unchecked-negate-int","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1107},{"fixed-arities":[2],"end-row":1111,"ns":"cljs.core","name":"unchecked-remainder-int","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1110},{"arglist-strs":["[& xs]"],"end-row":1114,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-subtract","ns":"cljs.core","row":1113},{"arglist-strs":["[& xs]"],"end-row":1117,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"unchecked-subtract-int","ns":"cljs.core","row":1116},{"fixed-arities":[1,2],"end-row":1122,"ns":"cljs.core","name":"-","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1119},{"fixed-arities":[0,1,2],"end-row":1128,"ns":"cljs.core","name":"*","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"row":1124},{"fixed-arities":[1,2],"end-row":1133,"ns":"cljs.core","name":"/","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1130},{"fixed-arities":[1,2],"end-row":1138,"ns":"cljs.core","name":"divide","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1135},{"fixed-arities":[1,2],"end-row":1143,"ns":"cljs.core","name":"<","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1140},{"fixed-arities":[1,2],"end-row":1148,"ns":"cljs.core","name":"<=","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1145},{"fixed-arities":[1,2],"end-row":1153,"ns":"cljs.core","name":">","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1150},{"fixed-arities":[1,2],"end-row":1158,"ns":"cljs.core","name":">=","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1155},{"fixed-arities":[1,2],"end-row":1163,"ns":"cljs.core","name":"==","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1160},{"fixed-arities":[1],"end-row":1166,"ns":"cljs.core","name":"dec","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1165},{"fixed-arities":[1],"end-row":1169,"ns":"cljs.core","name":"inc","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1168},{"fixed-arities":[1],"end-row":1172,"ns":"cljs.core","name":"zero?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1171},{"fixed-arities":[1],"end-row":1175,"ns":"cljs.core","name":"pos?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1174},{"fixed-arities":[1],"end-row":1178,"ns":"cljs.core","name":"neg?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1177},{"fixed-arities":[1,2],"end-row":1184,"ns":"cljs.core","name":"max","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1180},{"fixed-arities":[1,2],"end-row":1190,"ns":"cljs.core","name":"min","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x y]","[x y & more]"],"row":1186},{"fixed-arities":[2],"end-row":1193,"ns":"cljs.core","name":"js-mod","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[num div]"],"row":1192},{"fixed-arities":[1],"end-row":1196,"ns":"cljs.core","name":"bit-not","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1195},{"fixed-arities":[2],"end-row":1200,"ns":"cljs.core","name":"bit-and","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1198},{"fixed-arities":[2],"end-row":1205,"ns":"cljs.core","name":"unsafe-bit-and","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1203},{"fixed-arities":[2],"end-row":1209,"ns":"cljs.core","name":"bit-or","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1207},{"fixed-arities":[1],"end-row":1212,"ns":"cljs.core","name":"int","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":1211},{"fixed-arities":[2],"end-row":1216,"ns":"cljs.core","name":"bit-xor","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1214},{"fixed-arities":[2],"end-row":1220,"ns":"cljs.core","name":"bit-and-not","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x y]","[x y & more]"],"row":1218},{"fixed-arities":[2],"end-row":1223,"ns":"cljs.core","name":"bit-clear","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1222},{"fixed-arities":[2],"end-row":1226,"ns":"cljs.core","name":"bit-flip","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1225},{"fixed-arities":[2],"end-row":1229,"ns":"cljs.core","name":"bit-test","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1228},{"fixed-arities":[2],"end-row":1232,"ns":"cljs.core","name":"bit-shift-left","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1231},{"fixed-arities":[2],"end-row":1235,"ns":"cljs.core","name":"bit-shift-right","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1234},{"fixed-arities":[2],"end-row":1238,"ns":"cljs.core","name":"bit-shift-right-zero-fill","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1237},{"fixed-arities":[2],"end-row":1241,"ns":"cljs.core","name":"unsigned-bit-shift-right","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1240},{"fixed-arities":[2],"end-row":1244,"ns":"cljs.core","name":"bit-set","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x n]"],"row":1243},{"fixed-arities":[2],"end-row":1248,"ns":"cljs.core","name":"mask","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[hash shift]"],"row":1247},{"fixed-arities":[2],"end-row":1252,"ns":"cljs.core","name":"bitpos","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[hash shift]"],"row":1251},{"fixed-arities":[3],"end-row":1262,"ns":"cljs.core","name":"caching-hash","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[coll hash-fn hash-key]"],"row":1255},{"fixed-arities":[5],"end-row":1271,"private":true,"ns":"cljs.core","name":"do-curried","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[name doc meta args body]"],"row":1266},{"end-row":1277,"private":true,"ns":"cljs.core","name":"defcurried","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name doc meta args & body]"],"doc":"Builds another arity of the fn that returns a fn awaiting the last\n  param","row":1273},{"fixed-arities":[3],"end-row":1288,"private":true,"ns":"cljs.core","name":"do-rfn","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[f1 k fkv]"],"row":1279},{"fixed-arities":[2],"end-row":1293,"private":true,"ns":"cljs.core","name":"rfn","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[[f1 k] fkv]"],"doc":"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.","row":1290},{"fixed-arities":[1],"end-row":1301,"private":true,"ns":"cljs.core","name":"protocol-prefix","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[psym]"],"row":1297},{"end-row":1311,"filename":"cljs/core.cljc","lang":"cljs","name":"base-type","ns":"cljs.core","private":true,"row":1303},{"end-row":1319,"filename":"cljs/core.cljc","lang":"cljs","name":"js-base-type","ns":"cljs.core","private":true,"row":1313},{"end-row":1380,"ns":"cljs.core","name":"reify","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& impls]"],"doc":"reify creates an object implementing a protocol.\n  reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}","row":1321},{"end-row":1388,"ns":"cljs.core","name":"specify!","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & impls]"],"doc":"Identical to reify but mutates its first argument.","row":1382},{"end-row":1395,"ns":"cljs.core","name":"specify","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr & impls]"],"doc":"Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.","row":1390},{"fixed-arities":[0],"end-row":1398,"private":true,"ns":"cljs.core","name":"js-this","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":1397},{"end-row":1404,"ns":"cljs.core","name":"this-as","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[name & body]"],"doc":"Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.","row":1400},{"fixed-arities":[1],"end-row":1407,"private":true,"ns":"cljs.core","name":"to-property","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[sym]"],"row":1406},{"fixed-arities":[3],"end-row":1425,"private":true,"ns":"cljs.core","name":"update-protocol-var","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[p type env]"],"row":1409},{"fixed-arities":[2],"end-row":1430,"private":true,"ns":"cljs.core","name":"resolve-var","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env sym]"],"row":1427},{"fixed-arities":[1],"end-row":1437,"private":true,"ns":"cljs.core","name":"->impl-map","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[impls]"],"row":1432},{"fixed-arities":[5],"end-row":1448,"private":true,"ns":"cljs.core","name":"base-assign-impls","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env resolve tsym type [p sigs]]"],"row":1439},{"end-row":1450,"filename":"cljs/core.cljc","lang":"cljs","name":"extend-prefix","ns":"cljs.core","private":true,"row":1450},{"fixed-arities":[2],"end-row":1461,"private":true,"ns":"cljs.core","name":"adapt-obj-params","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1459},{"fixed-arities":[2],"end-row":1468,"private":true,"ns":"cljs.core","name":"adapt-ifn-params","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1463},{"fixed-arities":[2],"end-row":1474,"private":true,"ns":"cljs.core","name":"adapt-ifn-invoke-params","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1471},{"fixed-arities":[2],"end-row":1480,"private":true,"ns":"cljs.core","name":"adapt-proto-params","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type [[this & args :as sig] & body]]"],"row":1476},{"fixed-arities":[3],"end-row":1489,"private":true,"ns":"cljs.core","name":"add-obj-methods","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type type-sym sigs]"],"row":1482},{"fixed-arities":[3],"end-row":1497,"private":true,"ns":"cljs.core","name":"ifn-invoke-methods","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type type-sym [f & meths :as form]]"],"row":1491},{"fixed-arities":[3],"end-row":1518,"private":true,"ns":"cljs.core","name":"add-ifn-methods","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type type-sym [f & meths :as form]]"],"row":1499},{"fixed-arities":[4],"end-row":1530,"private":true,"ns":"cljs.core","name":"add-proto-methods*","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[pprefix type type-sym [f & meths :as form]]"],"row":1520},{"fixed-arities":[5],"end-row":1547,"private":true,"ns":"cljs.core","name":"proto-assign-impls","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env resolve type-sym type [p sigs]]"],"row":1532},{"fixed-arities":[3],"end-row":1577,"private":true,"ns":"cljs.core","name":"validate-impl-sigs","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env p method]"],"row":1549},{"fixed-arities":[2],"end-row":1595,"private":true,"ns":"cljs.core","name":"validate-impls","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env impls]"],"row":1579},{"fixed-arities":[2],"end-row":1599,"private":true,"ns":"cljs.core","name":"type-hint-first-arg","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym argv]"],"row":1597},{"fixed-arities":[2],"end-row":1603,"private":true,"ns":"cljs.core","name":"type-hint-single-arity-sig","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1601},{"fixed-arities":[2],"end-row":1607,"private":true,"ns":"cljs.core","name":"type-hint-multi-arity-sig","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1605},{"fixed-arities":[2],"end-row":1611,"private":true,"ns":"cljs.core","name":"type-hint-multi-arity-sigs","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym sigs]"],"row":1609},{"fixed-arities":[2],"end-row":1617,"private":true,"ns":"cljs.core","name":"type-hint-sigs","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym sig]"],"row":1613},{"fixed-arities":[2],"end-row":1623,"private":true,"ns":"cljs.core","name":"type-hint-impl-map","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[type-sym impl-map]"],"row":1619},{"end-row":1665,"ns":"cljs.core","name":"extend-type","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[type-sym & impls]"],"doc":"Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)","row":1625},{"fixed-arities":[2],"end-row":1687,"private":true,"ns":"cljs.core","name":"prepare-protocol-masks","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env impls]"],"row":1667},{"fixed-arities":[3],"end-row":1692,"private":true,"ns":"cljs.core","name":"annotate-specs","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[annots v [f sigs]]"],"row":1689},{"arglist-strs":["[type specs fields]","[type specs fields inline]"],"end-row":1709,"filename":"cljs/core.cljc","fixed-arities":[4,3],"lang":"cljs","name":"dt->et","ns":"cljs.core","row":1694},{"fixed-arities":[2],"end-row":1715,"private":true,"ns":"cljs.core","name":"collect-protocols","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[impls env]"],"row":1711},{"fixed-arities":[3],"end-row":1726,"private":true,"ns":"cljs.core","name":"build-positional-factory","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[rsym rname fields]"],"row":1717},{"fixed-arities":[3],"end-row":1733,"private":true,"ns":"cljs.core","name":"validate-fields","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[case name fields]"],"row":1728},{"end-row":1803,"ns":"cljs.core","name":"deftype","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[t fields & impls]"],"doc":"(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields","row":1735},{"fixed-arities":[5],"end-row":1910,"private":true,"ns":"cljs.core","name":"emit-defrecord","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env tagname rname fields impls]"],"doc":"Do not use this directly - use defrecord","row":1805},{"fixed-arities":[3],"end-row":1922,"private":true,"ns":"cljs.core","name":"build-map-factory","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[rsym rname fields]"],"row":1912},{"end-row":1991,"ns":"cljs.core","name":"defrecord","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[rsym fields & impls]"],"doc":"(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.","row":1924},{"end-row":2177,"ns":"cljs.core","name":"defprotocol","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym & doc+methods]"],"doc":"A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17","row":1993},{"fixed-arities":[2],"end-row":2203,"ns":"cljs.core","name":"implements?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym x]"],"doc":"EXPERIMENTAL","row":2179},{"fixed-arities":[2],"end-row":2235,"ns":"cljs.core","name":"satisfies?","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[psym x]"],"doc":"Returns true if x satisfies the protocol","row":2205},{"end-row":2243,"ns":"cljs.core","name":"lazy-seq","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.","row":2237},{"end-row":2251,"ns":"cljs.core","name":"delay","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.","row":2245},{"end-row":2275,"ns":"cljs.core","name":"with-redefs","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.","row":2253},{"end-row":2288,"ns":"cljs.core","name":"binding","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.","row":2277},{"end-row":2329,"ns":"cljs.core","name":"condp","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[pred expr & clauses]"],"doc":"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an Error is thrown.","row":2290},{"fixed-arities":[4],"end-row":2346,"private":true,"ns":"cljs.core","name":"assoc-test","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[m test expr env]"],"row":2331},{"fixed-arities":[2],"end-row":2351,"private":true,"ns":"cljs.core","name":"const?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[env x]"],"row":2348},{"end-row":2422,"ns":"cljs.core","name":"case","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[e & clauses]"],"doc":"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.","row":2353},{"fixed-arities":[1],"end-row":2425,"private":true,"ns":"cljs.core","name":"when-assert","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]"],"row":2424},{"fixed-arities":[1,2],"end-row":2438,"ns":"cljs.core","name":"assert","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[x]","[x message]"],"doc":"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.","row":2427},{"fixed-arities":[2],"end-row":2525,"ns":"cljs.core","name":"for","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[seq-exprs body-expr]"],"doc":"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))","row":2440},{"end-row":2581,"ns":"cljs.core","name":"doseq","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[seq-exprs & body]"],"doc":"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.","row":2527},{"arglist-strs":["[& rest]"],"end-row":2590,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"array","ns":"cljs.core","row":2583},{"fixed-arities":[1,2],"end-row":2608,"ns":"cljs.core","name":"make-array","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[size]","[type size]","[type size & more-sizes]"],"row":2592},{"fixed-arities":[0,1],"end-row":2617,"ns":"cljs.core","name":"list","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[x]","[x & xs]"],"row":2610},{"fixed-arities":[0],"end-row":2628,"ns":"cljs.core","name":"vector","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& xs]"],"row":2619},{"fixed-arities":[0],"end-row":2638,"ns":"cljs.core","name":"array-map","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& kvs]"],"row":2630},{"fixed-arities":[0],"end-row":2651,"ns":"cljs.core","name":"hash-map","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& kvs]"],"row":2640},{"fixed-arities":[0],"end-row":2665,"ns":"cljs.core","name":"hash-set","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]","[& xs]"],"row":2653},{"fixed-arities":[1],"end-row":2674,"private":true,"ns":"cljs.core","name":"js-obj*","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[kvs]"],"row":2667},{"arglist-strs":["[& rest]"],"end-row":2694,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"js-obj","ns":"cljs.core","row":2676},{"fixed-arities":[1],"end-row":2699,"ns":"cljs.core","name":"alength","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a]"],"row":2696},{"fixed-arities":[4],"end-row":2715,"ns":"cljs.core","name":"amap","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a idx ret expr]"],"doc":"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.","row":2701},{"fixed-arities":[5],"end-row":2727,"ns":"cljs.core","name":"areduce","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[a idx ret init expr]"],"doc":"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.","row":2717},{"end-row":2741,"ns":"cljs.core","name":"dotimes","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings & body]"],"doc":"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.","row":2729},{"end-row":2751,"private":true,"ns":"cljs.core","name":"check-valid-options","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[options & valid-keys]"],"doc":"Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.","row":2743},{"end-row":2798,"ns":"cljs.core","name":"defmulti","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[mm-name & options]"],"doc":"Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy","row":2753},{"end-row":2803,"ns":"cljs.core","name":"defmethod","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[multifn dispatch-val & fn-tail]"],"doc":"Creates and installs a new method of multimethod associated with dispatch-value. ","row":2800},{"fixed-arities":[1],"end-row":2813,"ns":"cljs.core","name":"time","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[expr]"],"doc":"Evaluates expr and prints the time it took. Returns the value of expr.","row":2805},{"end-row":2831,"ns":"cljs.core","name":"simple-benchmark","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[bindings expr iterations & {:keys [print-fn] :or {print-fn 'println}}]"],"doc":"Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.","row":2815},{"end-row":2833,"filename":"cljs/core.cljc","lang":"cljs","name":"cs","ns":"cljs.core","private":true,"row":2833},{"fixed-arities":[0,1],"end-row":2844,"private":true,"ns":"cljs.core","name":"gen-apply-to-helper","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[]","[n]"],"row":2835},{"fixed-arities":[0],"end-row":2854,"ns":"cljs.core","name":"gen-apply-to","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":2846},{"fixed-arities":[3],"end-row":2878,"private":true,"ns":"cljs.core","name":"gen-apply-to-simple-helper","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[f num-args args]"],"row":2856},{"fixed-arities":[3],"end-row":2882,"ns":"cljs.core","name":"gen-apply-to-simple","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[f num-args args]"],"row":2880},{"end-row":2893,"ns":"cljs.core","name":"with-out-str","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.","row":2884},{"end-row":2902,"ns":"cljs.core","name":"lazy-cat","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& colls]"],"doc":"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))","row":2895},{"fixed-arities":[1],"end-row":2905,"ns":"cljs.core","name":"js-str","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[s]"],"row":2904},{"fixed-arities":[1],"end-row":2911,"ns":"cljs.core","name":"es6-iterable","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[ty]"],"row":2907},{"fixed-arities":[1],"end-row":2927,"ns":"cljs.core","name":"ns-publics","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the public intern mappings for the namespace.","row":2913},{"fixed-arities":[1],"end-row":2941,"ns":"cljs.core","name":"ns-imports","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the import mappings for the namespace.","row":2929},{"fixed-arities":[1],"end-row":2955,"ns":"cljs.core","name":"ns-interns","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns]"],"doc":"Returns a map of the intern mappings for the namespace.","row":2943},{"fixed-arities":[2],"end-row":2967,"ns":"cljs.core","name":"ns-unmap","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-ns quoted-sym]"],"doc":"Removes the mappings for the symbol from the namespace.","row":2957},{"end-row":2974,"ns":"cljs.core","name":"vswap!","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[vol f & args]"],"doc":"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.","row":2969},{"arglist-strs":["[x & forms]"],"end-row":2978,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"locking","ns":"cljs.core","row":2976},{"fixed-arities":[0],"end-row":2981,"private":true,"ns":"cljs.core","name":"ns-special-form","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[]"],"row":2981},{"end-row":3036,"ns":"cljs.core","name":"require","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])","row":2983},{"end-row":3041,"ns":"cljs.core","name":"require-macros","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Similar to require but only for macros.","row":3038},{"end-row":3054,"ns":"cljs.core","name":"use","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])","row":3043},{"end-row":3059,"ns":"cljs.core","name":"use-macros","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Similar to use but only for macros.","row":3056},{"end-row":3068,"ns":"cljs.core","name":"import","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& import-symbols-or-lists]"],"doc":"import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.","row":3061},{"end-row":3081,"ns":"cljs.core","name":"refer-clojure","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[& args]"],"doc":"Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.","row":3070},{"fixed-arities":[1],"end-row":3085,"ns":"cljs.core","name":"load-file*","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[f]"],"row":3084},{"fixed-arities":[1],"end-row":3096,"ns":"cljs.core","name":"macroexpand-1","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted]"],"doc":"If form represents a macro form, returns its expansion,\n  else returns form.","row":3087},{"fixed-arities":[1],"end-row":3112,"ns":"cljs.core","name":"macroexpand","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted]"],"doc":"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.","row":3098},{"fixed-arities":[1],"end-row":3115,"private":true,"ns":"cljs.core","name":"multi-arity-fn?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":3114},{"fixed-arities":[1],"end-row":3119,"private":true,"ns":"cljs.core","name":"variadic-fn?","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[fdecl]"],"row":3117},{"fixed-arities":[3,2],"end-row":3155,"private":true,"ns":"cljs.core","name":"variadic-fn*","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[sym method]","[sym [arglist & body :as method] solo]"],"row":3121},{"fixed-arities":[1],"end-row":3162,"ns":"cljs.core","name":"copy-arguments","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[dest]"],"row":3157},{"fixed-arities":[1],"end-row":3169,"private":true,"ns":"cljs.core","name":"elide-implicit-macro-args","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[arglists]"],"row":3164},{"fixed-arities":[4],"end-row":3199,"private":true,"ns":"cljs.core","name":"variadic-fn","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[name meta [[arglist & body :as method] :as fdecl] emit-var?]"],"row":3171},{"fixed-arities":[4],"end-row":3286,"private":true,"ns":"cljs.core","name":"multi-arity-fn","lang":"cljs","filename":"cljs/core.cljc","arglist-strs":["[name meta fdecl emit-var?]"],"row":3209},{"doc":"Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.","end-row":3368,"filename":"cljs/core.cljc","lang":"cljs","macro":true,"name":"defn","ns":"cljs.core","row":3297},{"end-row":3414,"ns":"cljs.core","name":"defmacro","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[&form &env name & args]"],"doc":"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.","row":3373},{"fixed-arities":[1],"end-row":3435,"ns":"cljs.core","name":"resolve","lang":"cljs","filename":"cljs/core.cljc","macro":true,"arglist-strs":["[quoted-sym]"],"doc":"Returns the var to which a symbol will be resolved in the namespace else nil.","row":3419},{"end-row":19,"filename":"cljs/core.cljs","name":"*clojurescript-version*","ns":"cljs.core","row":19},{"end-row":26,"filename":"cljs/core.cljs","name":"*unchecked-if*","ns":"cljs.core","row":26},{"end-row":30,"filename":"cljs/core.cljs","name":"*unchecked-arrays*","ns":"cljs.core","row":30},{"end-row":33,"filename":"cljs/core.cljs","name":"*warn-on-infer*","ns":"cljs.core","row":33},{"end-row":37,"filename":"cljs/core.cljs","name":"PROTOCOL_SENTINEL","ns":"cljs.core","row":37},{"end-row":39,"filename":"cljs/core.cljs","name":"MODULE_URIS","ns":"cljs.core","row":39},{"end-row":40,"filename":"cljs/core.cljs","name":"MODULE_INFOS","ns":"cljs.core","row":40},{"doc":"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.","end-row":48,"filename":"cljs/core.cljs","name":"*target*","ns":"cljs.core","row":42},{"doc":"Manually set the JavaScript global context. Only \"window\", \"self\"\n  , and \"global\" supported. ","end-row":54,"filename":"cljs/core.cljs","name":"*global*","ns":"cljs.core","row":50},{"doc":"Var bound to the current namespace. Only used for bootstrapping.","end-row":60,"filename":"cljs/core.cljs","name":"*ns*","ns":"cljs.core","row":56},{"end-row":65,"filename":"cljs/core.cljs","name":"*out*","ns":"cljs.core","row":62},{"end-row":69,"filename":"cljs/core.cljs","name":"*assert*","ns":"cljs.core","row":67},{"doc":"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.","end-row":75,"filename":"cljs/core.cljs","name":"*print-fn*","ns":"cljs.core","row":71},{"end-row":77,"filename":"cljs/core.cljs","name":"boolean","ns":"cljs.core","row":77},{"arglist-strs":["[f]"],"doc":"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.","end-row":86,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"*exec-tap-fn*","ns":"cljs.core","row":79},{"doc":"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.","end-row":92,"filename":"cljs/core.cljs","name":"*print-err-fn*","ns":"cljs.core","row":88},{"arglist-strs":["[f]"],"doc":"Set *print-fn* to f.","end-row":96,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"set-print-fn!","ns":"cljs.core","row":94},{"arglist-strs":["[f]"],"doc":"Set *print-err-fn* to f.","end-row":100,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"set-print-err-fn!","ns":"cljs.core","row":98},{"doc":"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.","end-row":107,"filename":"cljs/core.cljs","name":"*flush-on-newline*","ns":"cljs.core","row":102},{"doc":"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.","end-row":114,"filename":"cljs/core.cljs","name":"*print-newline*","ns":"cljs.core","row":109},{"doc":"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true","end-row":122,"filename":"cljs/core.cljs","name":"*print-readably*","ns":"cljs.core","row":116},{"doc":"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.","end-row":130,"filename":"cljs/core.cljs","name":"*print-meta*","ns":"cljs.core","row":124},{"doc":"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.","end-row":138,"filename":"cljs/core.cljs","name":"*print-dup*","ns":"cljs.core","row":132},{"doc":"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true.","end-row":146,"filename":"cljs/core.cljs","name":"*print-namespace-maps*","ns":"cljs.core","row":140},{"doc":"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.","end-row":158,"filename":"cljs/core.cljs","name":"*print-length*","ns":"cljs.core","row":148},{"doc":"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.","end-row":171,"filename":"cljs/core.cljs","name":"*print-level*","ns":"cljs.core","row":160},{"doc":"*print-fns-bodies* controls whether functions print their source or\n    only their names.","end-row":177,"filename":"cljs/core.cljs","name":"*print-fn-bodies*","ns":"cljs.core","row":173},{"end-row":182,"filename":"cljs/core.cljs","name":"*loaded-libs*","ns":"cljs.core","row":179},{"arglist-strs":["[]"],"end-row":189,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"pr-opts","ns":"cljs.core","private":true,"row":184},{"end-row":191,"filename":"cljs/core.cljs","name":"into-array","ns":"cljs.core","row":191},{"arglist-strs":["[]"],"doc":"Set *print-fn* to console.log","end-row":205,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"enable-console-print!","ns":"cljs.core","row":193},{"doc":"bound in a repl thread to the most recent value printed","end-row":209,"filename":"cljs/core.cljs","name":"*1","ns":"cljs.core","row":207},{"doc":"bound in a repl thread to the second most recent value printed","end-row":213,"filename":"cljs/core.cljs","name":"*2","ns":"cljs.core","row":211},{"doc":"bound in a repl thread to the third most recent value printed","end-row":217,"filename":"cljs/core.cljs","name":"*3","ns":"cljs.core","row":215},{"doc":"bound in a repl thread to the most recent exception caught by the repl","end-row":221,"filename":"cljs/core.cljs","name":"*e","ns":"cljs.core","row":219},{"arglist-strs":["[x]"],"doc":"Internal - do not use!","end-row":226,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"truth_","ns":"cljs.core","row":223},{"end-row":228,"filename":"cljs/core.cljs","name":"not-native","ns":"cljs.core","row":228},{"end-row":230,"filename":"cljs/core.cljs","name":"instance?","ns":"cljs.core","row":230},{"end-row":230,"filename":"cljs/core.cljs","name":"Keyword","ns":"cljs.core","row":230},{"arglist-strs":["[x y]"],"doc":"Tests if 2 arguments are the same object","end-row":235,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"identical?","ns":"cljs.core","row":232},{"arglist-strs":["[x]"],"doc":"Returns true if x is nil, false otherwise.","end-row":240,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"nil?","ns":"cljs.core","row":237},{"arglist-strs":["[x]"],"doc":"Returns true if x is a JavaScript array.","end-row":247,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"array?","ns":"cljs.core","row":242},{"arglist-strs":["[x]"],"doc":"Returns true if x is a JavaScript number.","end-row":252,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"number?","ns":"cljs.core","row":249},{"arglist-strs":["[x]"],"doc":"Returns true if x is logical false, false otherwise.","end-row":260,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"not","ns":"cljs.core","row":254},{"arglist-strs":["[x]"],"doc":"Returns true if x is not nil, false otherwise.","end-row":264,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"some?","ns":"cljs.core","row":262},{"arglist-strs":["[x]"],"doc":"Returns true if x's constructor is Object","end-row":271,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"object?","ns":"cljs.core","row":266},{"arglist-strs":["[x]"],"doc":"Returns true if x is a JavaScript string.","end-row":276,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"string?","ns":"cljs.core","row":273},{"arglist-strs":["[x]"],"doc":"Returns true if x is a JavaScript string of length one.","end-row":281,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"char?","ns":"cljs.core","row":278},{"arglist-strs":["[x]"],"doc":"Returns true if given any argument.","end-row":285,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"any?","ns":"cljs.core","row":283},{"arglist-strs":["[p x]"],"doc":"Internal - do not use!","end-row":295,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"native-satisfies?","ns":"cljs.core","row":288},{"arglist-strs":["[x]"],"end-row":300,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"is_proto_","ns":"cljs.core","row":298},{"doc":"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments","end-row":306,"filename":"cljs/core.cljs","name":"*main-cli-fn*","ns":"cljs.core","row":302},{"doc":"A sequence of the supplied command line arguments, or nil if\n  none were supplied","end-row":311,"filename":"cljs/core.cljs","name":"*command-line-args*","ns":"cljs.core","row":308},{"arglist-strs":["[x]"],"doc":"Return x's constructor.","end-row":317,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"type","ns":"cljs.core","row":313},{"arglist-strs":["[proto obj]"],"end-row":326,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"missing-protocol","ns":"cljs.core","row":319},{"arglist-strs":["[ty]"],"end-row":331,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"type->str","ns":"cljs.core","row":328},{"arglist-strs":["[file]"],"end-row":336,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"load-file","ns":"cljs.core","row":334},{"end-row":340,"filename":"cljs/core.cljs","name":"ITER_SYMBOL","ns":"cljs.core","row":340},{"end-row":341,"filename":"cljs/core.cljs","name":"ITER_SYMBOL","ns":"cljs.core","row":341},{"end-row":368,"filename":"cljs/core.cljs","name":"CHAR_MAP","ns":"cljs.core","row":343},{"end-row":395,"filename":"cljs/core.cljs","name":"DEMUNGE_MAP","ns":"cljs.core","row":370},{"end-row":397,"filename":"cljs/core.cljs","name":"DEMUNGE_PATTERN","ns":"cljs.core","row":397},{"arglist-strs":["[]"],"doc":"Returns highest resolution time offered by host in milliseconds.","end-row":412,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"system-time","ns":"cljs.core","row":399},{"end-row":416,"filename":"cljs/core.cljs","name":"apply","ns":"cljs.core","row":416},{"arglist-strs":["[size]","[type size]","[type size & more-sizes]"],"doc":"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.","end-row":432,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"make-array","ns":"cljs.core","row":418},{"arglist-strs":["[arr]"],"doc":"Returns a javascript array, cloned from the passed in array","end-row":441,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"aclone","ns":"cljs.core","row":434},{"arglist-strs":["[var-args]"],"doc":"Creates a new javascript array.\n@param {...*} var_args","end-row":453,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"array","ns":"cljs.core","row":443},{"arglist-strs":["[e]"],"end-row":458,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"maybe-warn","ns":"cljs.core","private":true,"row":455},{"arglist-strs":["[array idx]","[array idx & idxs]"],"end-row":472,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"checked-aget","ns":"cljs.core","private":true,"row":460},{"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"end-row":486,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"checked-aset","ns":"cljs.core","private":true,"row":474},{"arglist-strs":["[array idx]","[array idx & idxs]"],"end-row":494,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"checked-aget'","ns":"cljs.core","private":true,"row":488},{"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"end-row":502,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"checked-aset'","ns":"cljs.core","private":true,"row":496},{"arglist-strs":["[array idx]","[array idx & idxs]"],"doc":"Returns the value at the index/indices. Works on JavaScript arrays.","end-row":509,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"aget","ns":"cljs.core","row":504},{"arglist-strs":["[array idx val]","[array idx idx2 & idxv]"],"doc":"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.","end-row":517,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"aset","ns":"cljs.core","row":511},{"arglist-strs":["[array]"],"doc":"Returns the length of the array. Works on arrays of all types.","end-row":522,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"alength","ns":"cljs.core","row":519},{"end-row":524,"filename":"cljs/core.cljs","name":"reduce","ns":"cljs.core","row":524},{"arglist-strs":["[aseq]","[type aseq]"],"doc":"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.","end-row":532,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"into-array","ns":"cljs.core","row":526},{"arglist-strs":["[obj s & args]"],"doc":"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.","end-row":538,"filename":"cljs/core.cljs","name":"js-invoke","ns":"cljs.core","row":534},{"arglist-strs":["[x]"],"doc":"Returns true if x is an instance of Symbol","end-row":545,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"js-symbol?","ns":"cljs.core","row":540},{"doc":"Marker protocol","end-row":550,"filename":"cljs/core.cljs","name":"Fn","ns":"cljs.core","row":549},{"doc":"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2","end-row":578,"filename":"cljs/core.cljs","name":"IFn","ns":"cljs.core","row":552},{"arglist-strs":["[this]","[this a]","[this a b]","[this a b c]","[this a b c d]","[this a b c d e]","[this a b c d e f]","[this a b c d e f g]","[this a b c d e f g h]","[this a b c d e f g h i]","[this a b c d e f g h i j]","[this a b c d e f g h i j k]","[this a b c d e f g h i j k l]","[this a b c d e f g h i j k l m]","[this a b c d e f g h i j k l m n]","[this a b c d e f g h i j k l m n o]","[this a b c d e f g h i j k l m n o p]","[this a b c d e f g h i j k l m n o p q]","[this a b c d e f g h i j k l m n o p q r]","[this a b c d e f g h i j k l m n o p q r s]","[this a b c d e f g h i j k l m n o p q r s t]","[this a b c d e f g h i j k l m n o p q r s t rest]"],"end-row":578,"filename":"cljs/core.cljs","fixed-arities":[7,20,1,4,15,21,13,22,6,17,3,12,2,19,11,9,5,14,16,10,18,8],"name":"-invoke","ns":"cljs.core","row":556},{"doc":"Protocol for cloning a value.","end-row":583,"filename":"cljs/core.cljs","name":"ICloneable","ns":"cljs.core","row":580},{"arglist-strs":["[value]"],"doc":"Creates a clone of value.","end-row":583,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-clone","ns":"cljs.core","row":582},{"doc":"Protocol for adding the ability to count a collection in constant time.","end-row":588,"filename":"cljs/core.cljs","name":"ICounted","ns":"cljs.core","row":585},{"arglist-strs":["[coll]"],"doc":"Calculates the count of coll in constant time. Used by cljs.core/count.","end-row":588,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-count","ns":"cljs.core","row":587},{"doc":"Protocol for creating an empty collection.","end-row":594,"filename":"cljs/core.cljs","name":"IEmptyableCollection","ns":"cljs.core","row":590},{"arglist-strs":["[coll]"],"doc":"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.","end-row":594,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-empty","ns":"cljs.core","row":592},{"doc":"Protocol for adding to a collection.","end-row":602,"filename":"cljs/core.cljs","name":"ICollection","ns":"cljs.core","row":596},{"arglist-strs":["[coll o]"],"doc":"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)","end-row":602,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-conj","ns":"cljs.core","row":598},{"doc":"Protocol for collections to provide indexed-based access to their items.","end-row":611,"filename":"cljs/core.cljs","name":"IIndexed","ns":"cljs.core","row":607},{"arglist-strs":["[coll n]","[coll n not-found]"],"doc":"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.","end-row":611,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"-nth","ns":"cljs.core","row":609},{"doc":"Marker protocol indicating an array sequence.","end-row":614,"filename":"cljs/core.cljs","name":"ASeq","ns":"cljs.core","row":613},{"doc":"Protocol for collections to provide access to their items as sequences.","end-row":624,"filename":"cljs/core.cljs","name":"ISeq","ns":"cljs.core","row":616},{"arglist-strs":["[coll]"],"doc":"Returns the first item in the collection coll. Used by cljs.core/first.","end-row":619,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-first","ns":"cljs.core","row":618},{"arglist-strs":["[coll]"],"doc":"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()","end-row":624,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-rest","ns":"cljs.core","row":620},{"doc":"Protocol for accessing the next items of a collection.","end-row":632,"filename":"cljs/core.cljs","name":"INext","ns":"cljs.core","row":626},{"arglist-strs":["[coll]"],"doc":"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil","end-row":632,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-next","ns":"cljs.core","row":628},{"doc":"Protocol for looking up a value in a data structure.","end-row":638,"filename":"cljs/core.cljs","name":"ILookup","ns":"cljs.core","row":634},{"arglist-strs":["[o k]","[o k not-found]"],"doc":"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.","end-row":638,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"-lookup","ns":"cljs.core","row":636},{"doc":"Protocol for adding associativity to collections.","end-row":647,"filename":"cljs/core.cljs","name":"IAssociative","ns":"cljs.core","row":640},{"arglist-strs":["[coll k]"],"doc":"Returns true if k is a key in coll.","end-row":643,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-contains-key?","ns":"cljs.core","row":642},{"arglist-strs":["[coll k v]"],"doc":"Returns a new collection of coll with a mapping from key k to\n     value v added to it.","end-row":647,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-assoc","ns":"cljs.core","row":645},{"doc":"Protocol for implementing entry finding in collections.","end-row":651,"filename":"cljs/core.cljs","name":"IFind","ns":"cljs.core","row":649},{"arglist-strs":["[coll k]"],"doc":"Returns the map entry for key, or nil if key not present.","end-row":651,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-find","ns":"cljs.core","row":651},{"doc":"Protocol for adding mapping functionality to collections.","end-row":657,"filename":"cljs/core.cljs","name":"IMap","ns":"cljs.core","row":653},{"arglist-strs":["[coll k]"],"doc":"Returns a new collection of coll without the mapping for key k.","end-row":657,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-dissoc","ns":"cljs.core","row":656},{"doc":"Protocol for examining a map entry.","end-row":664,"filename":"cljs/core.cljs","name":"IMapEntry","ns":"cljs.core","row":659},{"arglist-strs":["[coll]"],"doc":"Returns the key of the map entry.","end-row":662,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-key","ns":"cljs.core","row":661},{"arglist-strs":["[coll]"],"doc":"Returns the value of the map entry.","end-row":664,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-val","ns":"cljs.core","row":663},{"doc":"Protocol for adding set functionality to a collection.","end-row":669,"filename":"cljs/core.cljs","name":"ISet","ns":"cljs.core","row":666},{"arglist-strs":["[coll v]"],"doc":"Returns a new collection of coll that does not contain v.","end-row":669,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-disjoin","ns":"cljs.core","row":668},{"doc":"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.","end-row":679,"filename":"cljs/core.cljs","name":"IStack","ns":"cljs.core","row":671},{"arglist-strs":["[coll]"],"doc":"Returns the item from the top of the stack. Is used by cljs.core/peek.","end-row":676,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-peek","ns":"cljs.core","row":675},{"arglist-strs":["[coll]"],"doc":"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.","end-row":679,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-pop","ns":"cljs.core","row":677},{"doc":"Protocol for adding vector functionality to collections.","end-row":684,"filename":"cljs/core.cljs","name":"IVector","ns":"cljs.core","row":681},{"arglist-strs":["[coll n val]"],"doc":"Returns a new vector with value val added at position n.","end-row":684,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-assoc-n","ns":"cljs.core","row":683},{"doc":"Protocol for adding dereference functionality to a reference.","end-row":689,"filename":"cljs/core.cljs","name":"IDeref","ns":"cljs.core","row":686},{"arglist-strs":["[o]"],"doc":"Returns the value of the reference o.","end-row":689,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-deref","ns":"cljs.core","row":688},{"end-row":692,"filename":"cljs/core.cljs","name":"IDerefWithTimeout","ns":"cljs.core","row":691},{"arglist-strs":["[o msec timeout-val]"],"end-row":692,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-deref-with-timeout","ns":"cljs.core","row":692},{"doc":"Protocol for accessing the metadata of an object.","end-row":697,"filename":"cljs/core.cljs","name":"IMeta","ns":"cljs.core","row":694},{"arglist-strs":["[o]"],"doc":"Returns the metadata of object o.","end-row":697,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-meta","ns":"cljs.core","row":696},{"doc":"Protocol for adding metadata to an object.","end-row":702,"filename":"cljs/core.cljs","name":"IWithMeta","ns":"cljs.core","row":699},{"arglist-strs":["[o meta]"],"doc":"Returns a new object with value of o and metadata meta added to it.","end-row":702,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-with-meta","ns":"cljs.core","row":701},{"doc":"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.","end-row":710,"filename":"cljs/core.cljs","name":"IReduce","ns":"cljs.core","row":704},{"arglist-strs":["[coll f]","[coll f start]"],"doc":"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.","end-row":710,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"-reduce","ns":"cljs.core","row":707},{"doc":"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.","end-row":717,"filename":"cljs/core.cljs","name":"IKVReduce","ns":"cljs.core","row":712},{"arglist-strs":["[coll f init]"],"doc":"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.","end-row":717,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-kv-reduce","ns":"cljs.core","row":715},{"doc":"Protocol for adding value comparison functionality to a type.","end-row":722,"filename":"cljs/core.cljs","name":"IEquiv","ns":"cljs.core","row":719},{"arglist-strs":["[o other]"],"doc":"Returns true if o and other are equal, false otherwise.","end-row":722,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-equiv","ns":"cljs.core","row":721},{"doc":"Protocol for adding hashing functionality to a type.","end-row":727,"filename":"cljs/core.cljs","name":"IHash","ns":"cljs.core","row":724},{"arglist-strs":["[o]"],"doc":"Returns the hash code of o.","end-row":727,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-hash","ns":"cljs.core","row":726},{"doc":"Protocol for adding the ability to a type to be transformed into a sequence.","end-row":732,"filename":"cljs/core.cljs","name":"ISeqable","ns":"cljs.core","row":729},{"arglist-strs":["[o]"],"doc":"Returns a seq of o, or nil if o is empty.","end-row":732,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-seq","ns":"cljs.core","row":731},{"doc":"Marker interface indicating a persistent collection of sequential items","end-row":735,"filename":"cljs/core.cljs","name":"ISequential","ns":"cljs.core","row":734},{"doc":"Marker interface indicating a persistent list","end-row":738,"filename":"cljs/core.cljs","name":"IList","ns":"cljs.core","row":737},{"doc":"Marker interface indicating a record object","end-row":741,"filename":"cljs/core.cljs","name":"IRecord","ns":"cljs.core","row":740},{"doc":"Protocol for reversing a seq.","end-row":746,"filename":"cljs/core.cljs","name":"IReversible","ns":"cljs.core","row":743},{"arglist-strs":["[coll]"],"doc":"Returns a seq of the items in coll in reversed order.","end-row":746,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-rseq","ns":"cljs.core","row":745},{"doc":"Protocol for a collection which can represent their items\n  in a sorted manner. ","end-row":763,"filename":"cljs/core.cljs","name":"ISorted","ns":"cljs.core","row":748},{"arglist-strs":["[coll ascending?]"],"doc":"Returns a sorted seq from coll in either ascending or descending order.","end-row":752,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-sorted-seq","ns":"cljs.core","row":751},{"arglist-strs":["[coll k ascending?]"],"doc":"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)","end-row":759,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-sorted-seq-from","ns":"cljs.core","row":753},{"arglist-strs":["[coll entry]"],"doc":"Returns the key for entry.","end-row":761,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-entry-key","ns":"cljs.core","row":760},{"arglist-strs":["[coll]"],"doc":"Returns the comparator for coll.","end-row":763,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-comparator","ns":"cljs.core","row":762},{"doc":"Protocol for writing. Currently only implemented by StringBufferWriter.","end-row":770,"filename":"cljs/core.cljs","name":"IWriter","ns":"cljs.core","row":765},{"arglist-strs":["[writer s]"],"doc":"Writes s with writer and returns the result.","end-row":768,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-write","ns":"cljs.core","row":767},{"arglist-strs":["[writer]"],"doc":"Flush writer.","end-row":770,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-flush","ns":"cljs.core","row":769},{"doc":"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.","end-row":778,"filename":"cljs/core.cljs","name":"IPrintWithWriter","ns":"cljs.core","row":772},{"arglist-strs":["[o writer opts]"],"end-row":778,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-pr-writer","ns":"cljs.core","row":778},{"doc":"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.","end-row":784,"filename":"cljs/core.cljs","name":"IPending","ns":"cljs.core","row":780},{"arglist-strs":["[x]"],"doc":"Returns true if a value for x has been produced, false otherwise.","end-row":784,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-realized?","ns":"cljs.core","row":783},{"doc":"Protocol for types that can be watched. Currently only implemented by Atom.","end-row":794,"filename":"cljs/core.cljs","name":"IWatchable","ns":"cljs.core","row":786},{"arglist-strs":["[this oldval newval]"],"doc":"Calls all watchers with this, oldval and newval.","end-row":789,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-notify-watches","ns":"cljs.core","row":788},{"arglist-strs":["[this key f]"],"doc":"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.","end-row":792,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-add-watch","ns":"cljs.core","row":790},{"arglist-strs":["[this key]"],"doc":"Removes watcher that corresponds to key from this.","end-row":794,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-remove-watch","ns":"cljs.core","row":793},{"doc":"Protocol for collections which can transformed to transients.","end-row":799,"filename":"cljs/core.cljs","name":"IEditableCollection","ns":"cljs.core","row":796},{"arglist-strs":["[coll]"],"doc":"Returns a new, transient version of the collection, in constant time.","end-row":799,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-as-transient","ns":"cljs.core","row":798},{"doc":"Protocol for adding basic functionality to transient collections.","end-row":806,"filename":"cljs/core.cljs","name":"ITransientCollection","ns":"cljs.core","row":801},{"arglist-strs":["[tcoll val]"],"doc":"Adds value val to tcoll and returns tcoll.","end-row":804,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-conj!","ns":"cljs.core","row":803},{"arglist-strs":["[tcoll]"],"doc":"Creates a persistent data structure from tcoll and returns it.","end-row":806,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-persistent!","ns":"cljs.core","row":805},{"doc":"Protocol for adding associativity to transient collections.","end-row":812,"filename":"cljs/core.cljs","name":"ITransientAssociative","ns":"cljs.core","row":808},{"arglist-strs":["[tcoll key val]"],"doc":"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.","end-row":812,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-assoc!","ns":"cljs.core","row":810},{"doc":"Protocol for adding mapping functionality to transient collections.","end-row":817,"filename":"cljs/core.cljs","name":"ITransientMap","ns":"cljs.core","row":814},{"arglist-strs":["[tcoll key]"],"doc":"Returns a new transient collection of tcoll without the mapping for key.","end-row":817,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-dissoc!","ns":"cljs.core","row":816},{"doc":"Protocol for adding vector functionality to transient collections.","end-row":824,"filename":"cljs/core.cljs","name":"ITransientVector","ns":"cljs.core","row":819},{"arglist-strs":["[tcoll n val]"],"doc":"Returns tcoll with value val added at position n.","end-row":822,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-assoc-n!","ns":"cljs.core","row":821},{"arglist-strs":["[tcoll]"],"doc":"Returns tcoll with the last item removed from it.","end-row":824,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-pop!","ns":"cljs.core","row":823},{"doc":"Protocol for adding set functionality to a transient collection.","end-row":829,"filename":"cljs/core.cljs","name":"ITransientSet","ns":"cljs.core","row":826},{"arglist-strs":["[tcoll v]"],"doc":"Returns tcoll without v.","end-row":829,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-disjoin!","ns":"cljs.core","row":828},{"doc":"Protocol for values that can be compared.","end-row":835,"filename":"cljs/core.cljs","name":"IComparable","ns":"cljs.core","row":831},{"arglist-strs":["[x y]"],"doc":"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.","end-row":835,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-compare","ns":"cljs.core","row":833},{"doc":"Protocol for accessing the items of a chunk.","end-row":840,"filename":"cljs/core.cljs","name":"IChunk","ns":"cljs.core","row":837},{"arglist-strs":["[coll]"],"doc":"Return a new chunk of coll with the first item removed.","end-row":840,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-drop-first","ns":"cljs.core","row":839},{"doc":"Protocol for accessing a collection as sequential chunks.","end-row":847,"filename":"cljs/core.cljs","name":"IChunkedSeq","ns":"cljs.core","row":842},{"arglist-strs":["[coll]"],"doc":"Returns the first chunk in coll.","end-row":845,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-chunked-first","ns":"cljs.core","row":844},{"arglist-strs":["[coll]"],"doc":"Return a new collection of coll with the first chunk removed.","end-row":847,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-chunked-rest","ns":"cljs.core","row":846},{"doc":"Protocol for accessing the chunks of a collection.","end-row":852,"filename":"cljs/core.cljs","name":"IChunkedNext","ns":"cljs.core","row":849},{"arglist-strs":["[coll]"],"doc":"Returns a new collection of coll without the first chunk.","end-row":852,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-chunked-next","ns":"cljs.core","row":851},{"doc":"Protocol for adding a name.","end-row":859,"filename":"cljs/core.cljs","name":"INamed","ns":"cljs.core","row":854},{"arglist-strs":["[x]"],"doc":"Returns the name String of x.","end-row":857,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-name","ns":"cljs.core","row":856},{"arglist-strs":["[x]"],"doc":"Returns the namespace String of x.","end-row":859,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-namespace","ns":"cljs.core","row":858},{"doc":"Marker protocol indicating an atom.","end-row":862,"filename":"cljs/core.cljs","name":"IAtom","ns":"cljs.core","row":861},{"doc":"Protocol for adding resetting functionality.","end-row":867,"filename":"cljs/core.cljs","name":"IReset","ns":"cljs.core","row":864},{"arglist-strs":["[o new-value]"],"doc":"Sets the value of o to new-value.","end-row":867,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-reset!","ns":"cljs.core","row":866},{"doc":"Protocol for adding swapping functionality.","end-row":872,"filename":"cljs/core.cljs","name":"ISwap","ns":"cljs.core","row":869},{"arglist-strs":["[o f]","[o f a]","[o f a b]","[o f a b xs]"],"doc":"Swaps the value of o to be (apply f current-value-of-atom args).","end-row":872,"filename":"cljs/core.cljs","fixed-arities":[4,3,2,5],"name":"-swap!","ns":"cljs.core","row":871},{"doc":"Protocol for adding volatile functionality.","end-row":878,"filename":"cljs/core.cljs","name":"IVolatile","ns":"cljs.core","row":874},{"arglist-strs":["[o new-value]"],"doc":"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.","end-row":878,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-vreset!","ns":"cljs.core","row":876},{"doc":"Protocol for iterating over a collection.","end-row":883,"filename":"cljs/core.cljs","name":"IIterable","ns":"cljs.core","row":880},{"arglist-strs":["[coll]"],"doc":"Returns an iterator for coll.","end-row":883,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-iterator","ns":"cljs.core","row":882},{"end-row":890,"filename":"cljs/core.cljs","name":"StringBufferWriter","ns":"cljs.core","row":887},{"arglist-strs":["[sb]"],"end-row":890,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->StringBufferWriter","ns":"cljs.core","row":887},{"arglist-strs":["[obj]"],"doc":"Support so that collections can implement toString without\n   loading all the printing machinery.","end-row":900,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pr-str*","ns":"cljs.core","row":892},{"arglist-strs":["[x n]"],"end-row":908,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"int-rotate-left","ns":"cljs.core","row":905},{"arglist-strs":["[a b]"],"end-row":913,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"imul","ns":"cljs.core","row":913},{"arglist-strs":["[a b]"],"end-row":922,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"imul","ns":"cljs.core","row":914},{"end-row":925,"filename":"cljs/core.cljs","name":"m3-seed","ns":"cljs.core","row":925},{"end-row":926,"filename":"cljs/core.cljs","name":"m3-C1","ns":"cljs.core","row":926},{"end-row":927,"filename":"cljs/core.cljs","name":"m3-C2","ns":"cljs.core","row":927},{"arglist-strs":["[k1]"],"end-row":930,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"m3-mix-K1","ns":"cljs.core","row":929},{"arglist-strs":["[h1 k1]"],"end-row":933,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"m3-mix-H1","ns":"cljs.core","row":932},{"arglist-strs":["[h1 len]"],"end-row":942,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"m3-fmix","ns":"cljs.core","row":935},{"arglist-strs":["[in]"],"end-row":949,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"m3-hash-int","ns":"cljs.core","row":944},{"arglist-strs":["[in]"],"end-row":963,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"m3-hash-unencoded-chars","ns":"cljs.core","row":951},{"end-row":967,"filename":"cljs/core.cljs","name":"list","ns":"cljs.core","row":967},{"end-row":967,"filename":"cljs/core.cljs","name":"Symbol","ns":"cljs.core","row":967},{"end-row":967,"filename":"cljs/core.cljs","name":"=","ns":"cljs.core","row":967},{"end-row":967,"filename":"cljs/core.cljs","name":"compare","ns":"cljs.core","row":967},{"end-row":970,"filename":"cljs/core.cljs","name":"string-hash-cache","ns":"cljs.core","row":970},{"end-row":971,"filename":"cljs/core.cljs","name":"string-hash-cache-count","ns":"cljs.core","row":971},{"arglist-strs":["[s]"],"end-row":983,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-string*","ns":"cljs.core","row":974},{"arglist-strs":["[k]"],"end-row":989,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"add-to-string-hash-cache","ns":"cljs.core","row":985},{"arglist-strs":["[k]"],"end-row":1000,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-string","ns":"cljs.core","row":991},{"arglist-strs":["[o]"],"doc":"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.","end-row":1036,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash","ns":"cljs.core","row":1002},{"arglist-strs":["[seed hash]"],"end-row":1043,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"hash-combine","ns":"cljs.core","row":1038},{"arglist-strs":["[c x]"],"doc":"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false","end-row":1049,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"instance?","ns":"cljs.core","row":1045},{"arglist-strs":["[x]"],"doc":"Return true if x is a Symbol","end-row":1054,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"symbol?","ns":"cljs.core","row":1051},{"arglist-strs":["[sym]"],"end-row":1059,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-symbol","ns":"cljs.core","private":true,"row":1056},{"arglist-strs":["[a b]"],"end-row":1071,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"compare-symbols","ns":"cljs.core","private":true,"row":1061},{"end-row":1073,"filename":"cljs/core.cljs","name":"get","ns":"cljs.core","row":1073},{"end-row":1107,"filename":"cljs/core.cljs","name":"Symbol","ns":"cljs.core","row":1075},{"arglist-strs":["[ns name str _hash _meta]"],"end-row":1107,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->Symbol","ns":"cljs.core","row":1075},{"arglist-strs":["[v]"],"doc":"Returns true if v is of type cljs.core.Var","end-row":1112,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"var?","ns":"cljs.core","row":1109},{"arglist-strs":["[name]","[ns name]"],"doc":"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.","end-row":1131,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"symbol","ns":"cljs.core","row":1114},{"end-row":1199,"filename":"cljs/core.cljs","name":"Var","ns":"cljs.core","row":1133},{"arglist-strs":["[val sym _meta]"],"end-row":1199,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->Var","ns":"cljs.core","row":1133},{"end-row":1203,"filename":"cljs/core.cljs","name":"array-seq","ns":"cljs.core","row":1203},{"end-row":1203,"filename":"cljs/core.cljs","name":"prim-seq","ns":"cljs.core","row":1203},{"end-row":1203,"filename":"cljs/core.cljs","name":"IndexedSeq","ns":"cljs.core","row":1203},{"arglist-strs":["[x]"],"doc":"Return true if x implements IIterable protocol.","end-row":1208,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"iterable?","ns":"cljs.core","row":1205},{"arglist-strs":["[x]"],"doc":"Return true if x has a JavaScript iterator property","end-row":1214,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"js-iterable?","ns":"cljs.core","row":1210},{"arglist-strs":["[value]"],"doc":"Clone the supplied value which must implement ICloneable.","end-row":1219,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"clone","ns":"cljs.core","row":1216},{"arglist-strs":["[value]"],"doc":"Return true if x implements ICloneable protocol.","end-row":1224,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"cloneable?","ns":"cljs.core","row":1221},{"end-row":1226,"filename":"cljs/core.cljs","name":"es6-iterator-seq","ns":"cljs.core","row":1226},{"arglist-strs":["[coll]"],"doc":"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.","end-row":1253,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"seq","ns":"cljs.core","row":1228},{"arglist-strs":["[coll]"],"doc":"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.","end-row":1264,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"first","ns":"cljs.core","row":1255},{"arglist-strs":["[coll]"],"doc":"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.","end-row":1277,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"rest","ns":"cljs.core","row":1266},{"arglist-strs":["[coll]"],"doc":"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil","end-row":1286,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"next","ns":"cljs.core","row":1279},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.","end-row":1304,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"=","ns":"cljs.core","row":1288},{"end-row":1314,"filename":"cljs/core.cljs","name":"ES6Iterator","ns":"cljs.core","row":1307},{"arglist-strs":["[s]"],"end-row":1314,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->ES6Iterator","ns":"cljs.core","row":1307},{"arglist-strs":["[coll]"],"doc":"EXPERIMENTAL: Return a ES2015 compatible iterator for coll.","end-row":1319,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"es6-iterator","ns":"cljs.core","row":1316},{"end-row":1329,"filename":"cljs/core.cljs","name":"ES6IteratorSeq","ns":"cljs.core","row":1321},{"arglist-strs":["[value iter _rest]"],"end-row":1329,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->ES6IteratorSeq","ns":"cljs.core","row":1321},{"arglist-strs":["[iter]"],"doc":"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq.","end-row":1337,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"es6-iterator-seq","ns":"cljs.core","row":1331},{"arglist-strs":["[hash-basis count]"],"doc":"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.","end-row":1351,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"mix-collection-hash","ns":"cljs.core","row":1341},{"arglist-strs":["[coll]"],"doc":"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.","end-row":1362,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-ordered-coll","ns":"cljs.core","row":1353},{"end-row":1365,"filename":"cljs/core.cljs","name":"empty-ordered-hash","ns":"cljs.core","private":true,"row":1364},{"arglist-strs":["[coll]"],"doc":"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.","end-row":1377,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-unordered-coll","ns":"cljs.core","row":1367},{"end-row":1380,"filename":"cljs/core.cljs","name":"empty-unordered-hash","ns":"cljs.core","private":true,"row":1379},{"end-row":1383,"filename":"cljs/core.cljs","name":"hash-map","ns":"cljs.core","row":1383},{"end-row":1383,"filename":"cljs/core.cljs","name":"list","ns":"cljs.core","row":1383},{"end-row":1383,"filename":"cljs/core.cljs","name":"equiv-sequential","ns":"cljs.core","row":1383},{"end-row":1406,"filename":"cljs/core.cljs","name":"Inst","ns":"cljs.core","row":1405},{"arglist-strs":["[inst]"],"end-row":1406,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"inst-ms*","ns":"cljs.core","row":1406},{"arglist-strs":["[inst]"],"doc":"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT","end-row":1415,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"inst-ms","ns":"cljs.core","row":1412},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies Inst","end-row":1420,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"inst?","ns":"cljs.core","row":1417},{"end-row":1426,"filename":"cljs/core.cljs","name":"with-meta","ns":"cljs.core","row":1426},{"arglist-strs":["[x]"],"doc":"Returns a number one greater than num.","end-row":1441,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"inc","ns":"cljs.core","row":1439},{"end-row":1443,"filename":"cljs/core.cljs","name":"deref","ns":"cljs.core","row":1443},{"end-row":1447,"filename":"cljs/core.cljs","name":"Reduced","ns":"cljs.core","row":1445},{"arglist-strs":["[val]"],"end-row":1447,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->Reduced","ns":"cljs.core","row":1445},{"arglist-strs":["[x]"],"doc":"Wraps x in a way such that a reduce will terminate with the value x","end-row":1452,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"reduced","ns":"cljs.core","row":1449},{"arglist-strs":["[r]"],"doc":"Returns true if x is the result of a call to reduced","end-row":1457,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"reduced?","ns":"cljs.core","row":1454},{"arglist-strs":["[x]"],"doc":"If x is already reduced?, returns it, else returns (reduced x)","end-row":1462,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ensure-reduced","ns":"cljs.core","row":1459},{"arglist-strs":["[x]"],"doc":"If x is reduced?, returns (deref x), else returns x","end-row":1467,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unreduced","ns":"cljs.core","row":1464},{"arglist-strs":["[o]"],"doc":"Also reader macro: @var/@atom/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?.","end-row":1477,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"deref","ns":"cljs.core","row":1471},{"fixed-arities":[3,2],"end-row":1501,"private":true,"ns":"cljs.core","name":"ci-reduce","filename":"cljs/core.cljs","arglist-strs":["[cicoll f]","[cicoll f val]"],"doc":"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization","row":1479},{"arglist-strs":["[arr f]","[arr f val]","[arr f val idx]"],"end-row":1532,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"array-reduce","ns":"cljs.core","private":true,"row":1503},{"end-row":1534,"filename":"cljs/core.cljs","name":"hash-coll","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"cons","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"drop","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"count","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"nth","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"RSeq","ns":"cljs.core","row":1534},{"end-row":1534,"filename":"cljs/core.cljs","name":"List","ns":"cljs.core","row":1534},{"arglist-strs":["[x]"],"doc":"Returns true if coll implements count in constant time","end-row":1538,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"counted?","ns":"cljs.core","row":1536},{"arglist-strs":["[x]"],"doc":"Returns true if coll implements nth in constant time","end-row":1542,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"indexed?","ns":"cljs.core","row":1540},{"arglist-strs":["[coll x]","[coll x start]"],"end-row":1559,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"-indexOf","ns":"cljs.core","private":true,"row":1544},{"arglist-strs":["[coll x]","[coll x start]"],"end-row":1576,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"-lastIndexOf","ns":"cljs.core","private":true,"row":1561},{"end-row":1585,"filename":"cljs/core.cljs","name":"IndexedSeqIterator","ns":"cljs.core","row":1578},{"arglist-strs":["[arr i]"],"end-row":1585,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->IndexedSeqIterator","ns":"cljs.core","row":1578},{"end-row":1673,"filename":"cljs/core.cljs","name":"IndexedSeq","ns":"cljs.core","row":1587},{"arglist-strs":["[arr i meta]"],"end-row":1673,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->IndexedSeq","ns":"cljs.core","row":1587},{"arglist-strs":["[prim]","[prim i]"],"doc":"Create seq from a primitive JavaScript Array-like.","end-row":1683,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"prim-seq","ns":"cljs.core","row":1677},{"arglist-strs":["[array]","[array i]"],"doc":"Create a seq from a JavaScript array.","end-row":1690,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"array-seq","ns":"cljs.core","row":1685},{"end-row":1692,"filename":"cljs/core.cljs","name":"with-meta","ns":"cljs.core","row":1692},{"end-row":1692,"filename":"cljs/core.cljs","name":"seq-reduce","ns":"cljs.core","row":1692},{"end-row":1755,"filename":"cljs/core.cljs","name":"RSeq","ns":"cljs.core","row":1694},{"arglist-strs":["[ci i meta]"],"end-row":1755,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->RSeq","ns":"cljs.core","row":1694},{"arglist-strs":["[coll]"],"doc":"Same as (first (next x))","end-row":1762,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"second","ns":"cljs.core","row":1759},{"arglist-strs":["[coll]"],"doc":"Same as (first (first x))","end-row":1767,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ffirst","ns":"cljs.core","row":1764},{"arglist-strs":["[coll]"],"doc":"Same as (next (first x))","end-row":1772,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"nfirst","ns":"cljs.core","row":1769},{"arglist-strs":["[coll]"],"doc":"Same as (first (next x))","end-row":1777,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"fnext","ns":"cljs.core","row":1774},{"arglist-strs":["[coll]"],"doc":"Same as (next (next x))","end-row":1782,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"nnext","ns":"cljs.core","row":1779},{"arglist-strs":["[s]"],"doc":"Return the last item in coll, in linear time","end-row":1790,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"last","ns":"cljs.core","row":1784},{"arglist-strs":["[]","[coll]","[coll x]","[coll x & xs]"],"doc":"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.","end-row":1811,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"conj","ns":"cljs.core","row":1796},{"arglist-strs":["[coll]"],"doc":"Returns an empty collection of the same category as coll, or nil","end-row":1824,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"empty","ns":"cljs.core","row":1813},{"arglist-strs":["[coll]"],"end-row":1830,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"accumulating-seq-count","ns":"cljs.core","private":true,"row":1826},{"arglist-strs":["[coll]"],"doc":"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps","end-row":1851,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"count","ns":"cljs.core","row":1832},{"arglist-strs":["[coll n]","[coll n not-found]"],"end-row":1871,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"linear-traversal-nth","ns":"cljs.core","private":true,"row":1853},{"arglist-strs":["[coll n]","[coll n not-found]"],"doc":"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.","end-row":1943,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"nth","ns":"cljs.core","row":1873},{"arglist-strs":["[coll n]"],"doc":"Returns the nth rest of coll, coll when n is 0.","end-row":1951,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"nthrest","ns":"cljs.core","row":1945},{"arglist-strs":["[o k]","[o k not-found]"],"doc":"Returns the value mapped to key, not-found or nil if key not present\n  in associative collection, set, string, array, or ILookup instance.","end-row":1994,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"get","ns":"cljs.core","row":1953},{"end-row":1996,"filename":"cljs/core.cljs","name":"PersistentHashMap","ns":"cljs.core","row":1996},{"end-row":1996,"filename":"cljs/core.cljs","name":"PersistentArrayMap","ns":"cljs.core","row":1996},{"end-row":1996,"filename":"cljs/core.cljs","name":"MapEntry","ns":"cljs.core","row":1996},{"arglist-strs":["[coll k v]","[coll k v & kvs]"],"doc":"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).","end-row":2013,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"assoc","ns":"cljs.core","row":1998},{"arglist-strs":["[coll]","[coll k]","[coll k & ks]"],"doc":"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).","end-row":2027,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"dissoc","ns":"cljs.core","row":2015},{"arglist-strs":["[f]"],"doc":"Return true if f is a JavaScript function or satisfies the Fn protocol.","end-row":2032,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"fn?","ns":"cljs.core","row":2029},{"end-row":2085,"filename":"cljs/core.cljs","name":"MetaFn","ns":"cljs.core","row":2034},{"arglist-strs":["[afn meta]"],"end-row":2085,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->MetaFn","ns":"cljs.core","row":2034},{"arglist-strs":["[o meta]"],"doc":"Returns an object of the same type and value as obj, with\n  map m as its metadata.","end-row":2094,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"with-meta","ns":"cljs.core","row":2087},{"arglist-strs":["[o]"],"doc":"Returns the metadata of obj, returns nil if there is no metadata.","end-row":2101,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"meta","ns":"cljs.core","row":2096},{"arglist-strs":["[coll]"],"doc":"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.","end-row":2108,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"peek","ns":"cljs.core","row":2103},{"arglist-strs":["[coll]"],"doc":"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.","end-row":2116,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pop","ns":"cljs.core","row":2110},{"arglist-strs":["[coll]","[coll k]","[coll k & ks]"],"doc":"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).","end-row":2130,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"disj","ns":"cljs.core","row":2118},{"arglist-strs":["[coll]"],"doc":"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))","end-row":2136,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"empty?","ns":"cljs.core","row":2132},{"arglist-strs":["[x]"],"doc":"Returns true if x satisfies ICollection","end-row":2143,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"coll?","ns":"cljs.core","row":2138},{"arglist-strs":["[x]"],"doc":"Returns true if x satisfies ISet","end-row":2150,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"set?","ns":"cljs.core","row":2145},{"arglist-strs":["[x]"],"doc":"Returns true if coll implements IAssociative","end-row":2154,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"associative?","ns":"cljs.core","row":2152},{"arglist-strs":["[x]"],"doc":"Returns true if coll implements IFind","end-row":2158,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ifind?","ns":"cljs.core","row":2156},{"arglist-strs":["[x]"],"doc":"Returns true if coll satisfies ISequential","end-row":2162,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"sequential?","ns":"cljs.core","row":2160},{"arglist-strs":["[x]"],"doc":"Returns true if coll satisfies ISorted","end-row":2166,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"sorted?","ns":"cljs.core","row":2164},{"arglist-strs":["[x]"],"doc":"Returns true if coll satisfies IReduce","end-row":2170,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"reduceable?","ns":"cljs.core","row":2168},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies IMap","end-row":2177,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"map?","ns":"cljs.core","row":2172},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies IRecord","end-row":2182,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"record?","ns":"cljs.core","row":2179},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies IVector","end-row":2186,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"vector?","ns":"cljs.core","row":2184},{"end-row":2188,"filename":"cljs/core.cljs","name":"ChunkedCons","ns":"cljs.core","row":2188},{"end-row":2188,"filename":"cljs/core.cljs","name":"ChunkedSeq","ns":"cljs.core","row":2188},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies IChunkedSeq.","end-row":2192,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunked-seq?","ns":"cljs.core","row":2190},{"arglist-strs":["[]","[& keyvals]"],"doc":"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.","end-row":2201,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"js-obj","ns":"cljs.core","row":2195},{"arglist-strs":["[obj]"],"doc":"Return the JavaScript keys for an object.","end-row":2206,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"js-keys","ns":"cljs.core","row":2203},{"arglist-strs":["[obj key]"],"doc":"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.","end-row":2212,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"js-delete","ns":"cljs.core","row":2208},{"arglist-strs":["[from i to j len]"],"end-row":2220,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"array-copy","ns":"cljs.core","private":true,"row":2214},{"arglist-strs":["[from i to j len]"],"end-row":2228,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"array-copy-downward","ns":"cljs.core","private":true,"row":2222},{"end-row":2232,"filename":"cljs/core.cljs","name":"lookup-sentinel","ns":"cljs.core","private":true,"row":2232},{"arglist-strs":["[x]"],"doc":"Returns true if x is the value false, false otherwise.","end-row":2236,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"false?","ns":"cljs.core","row":2234},{"arglist-strs":["[x]"],"doc":"Returns true if x is the value true, false otherwise.","end-row":2240,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"true?","ns":"cljs.core","row":2238},{"arglist-strs":["[x]"],"doc":"Return true if x is a Boolean","end-row":2244,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"boolean?","ns":"cljs.core","row":2242},{"arglist-strs":["[x]"],"doc":"Returns true if x identical to the JavaScript undefined value.","end-row":2249,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"undefined?","ns":"cljs.core","row":2246},{"arglist-strs":["[s]"],"doc":"Return true if s satisfies ISeq","end-row":2256,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"seq?","ns":"cljs.core","row":2251},{"arglist-strs":["[s]"],"doc":"Return true if the seq function is supported for s","end-row":2265,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"seqable?","ns":"cljs.core","row":2258},{"arglist-strs":["[x]"],"doc":"Coerce to boolean","end-row":2273,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"boolean","ns":"cljs.core","row":2267},{"arglist-strs":["[f]"],"doc":"Returns true if f returns true for fn? or satisfies IFn.","end-row":2278,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ifn?","ns":"cljs.core","row":2275},{"arglist-strs":["[n]"],"doc":"Returns true if n is a JavaScript number with no decimal part.","end-row":2286,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"integer?","ns":"cljs.core","row":2280},{"doc":"INTERNAL: do not use","end-row":2290,"filename":"cljs/core.cljs","name":"LongImpl","ns":"cljs.core","row":2288},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.","end-row":2298,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"int?","ns":"cljs.core","row":2292},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies int? and is positive.","end-row":2314,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pos-int?","ns":"cljs.core","row":2300},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies int? and is negative.","end-row":2328,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"neg-int?","ns":"cljs.core","row":2316},{"arglist-strs":["[x]"],"doc":"Return true if x satisfies int? and is a natural integer value.","end-row":2343,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"nat-int?","ns":"cljs.core","row":2330},{"arglist-strs":["[x]"],"doc":"Returns true for JavaScript numbers, false otherwise.","end-row":2348,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"float?","ns":"cljs.core","row":2345},{"arglist-strs":["[x]"],"doc":"Returns true for JavaScript numbers, false otherwise.","end-row":2353,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"double?","ns":"cljs.core","row":2350},{"arglist-strs":["[x]"],"doc":"Returns true for Infinity and -Infinity values.","end-row":2359,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"infinite?","ns":"cljs.core","row":2355},{"arglist-strs":["[coll v]"],"doc":"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.","end-row":2379,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"contains?","ns":"cljs.core","row":2361},{"arglist-strs":["[coll k]"],"doc":"Returns the map entry for key, or nil if key not present.","end-row":2389,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"find","ns":"cljs.core","row":2381},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns true if no two of the arguments are =","end-row":2405,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"distinct?","ns":"cljs.core","row":2391},{"arglist-strs":["[x y]"],"doc":"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.","end-row":2433,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"compare","ns":"cljs.core","row":2409},{"fixed-arities":[4,2],"end-row":2449,"private":true,"ns":"cljs.core","name":"compare-indexed","filename":"cljs/core.cljs","arglist-strs":["[xs ys]","[xs ys len n]"],"doc":"Compare indexed collection.","row":2435},{"fixed-arities":[1],"end-row":2463,"private":true,"ns":"cljs.core","name":"fn->comparator","filename":"cljs/core.cljs","arglist-strs":["[f]"],"doc":"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.","row":2451},{"end-row":2465,"filename":"cljs/core.cljs","name":"to-array","ns":"cljs.core","row":2465},{"arglist-strs":["[coll]","[comp coll]"],"doc":"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.","end-row":2479,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"sort","ns":"cljs.core","row":2467},{"arglist-strs":["[keyfn coll]","[keyfn comp coll]"],"doc":"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.","end-row":2489,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"sort-by","ns":"cljs.core","row":2481},{"arglist-strs":["[f coll]","[f val coll]"],"end-row":2504,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"seq-reduce","ns":"cljs.core","private":true,"row":2492},{"end-row":2506,"filename":"cljs/core.cljs","name":"vec","ns":"cljs.core","row":2506},{"arglist-strs":["[coll]"],"doc":"Return a random permutation of coll","end-row":2513,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"shuffle","ns":"cljs.core","row":2508},{"arglist-strs":["[coll f]","[coll f init]"],"end-row":2536,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"iter-reduce","ns":"cljs.core","private":true,"row":2515},{"arglist-strs":["[f coll]","[f val coll]"],"doc":"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.","end-row":2585,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"reduce","ns":"cljs.core","row":2538},{"arglist-strs":["[f init coll]"],"doc":"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.","end-row":2597,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"reduce-kv","ns":"cljs.core","row":2587},{"arglist-strs":["[x]"],"doc":"Returns its argument.","end-row":2601,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"identity","ns":"cljs.core","row":2599},{"arglist-strs":["[f]","[f cf]"],"doc":"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.","end-row":2612,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"completing","ns":"cljs.core","row":2603},{"arglist-strs":["[xform f coll]","[xform f init coll]"],"doc":"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.","end-row":2627,"filename":"cljs/core.cljs","fixed-arities":[4,3],"name":"transduce","ns":"cljs.core","row":2614},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the sum of nums. (+) returns 0.","end-row":2638,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"+","ns":"cljs.core","row":2632},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.","end-row":2645,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"-","ns":"cljs.core","row":2640},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the product of nums. (*) returns 1.","end-row":2652,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"*","ns":"cljs.core","row":2647},{"end-row":2654,"filename":"cljs/core.cljs","name":"divide","ns":"cljs.core","row":2654},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.","end-row":2661,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"/","ns":"cljs.core","row":2656},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.","end-row":2673,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"<","ns":"cljs.core","row":2663},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.","end-row":2685,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"<=","ns":"cljs.core","row":2675},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.","end-row":2697,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":">","ns":"cljs.core","row":2687},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.","end-row":2709,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":">=","ns":"cljs.core","row":2699},{"arglist-strs":["[x]"],"doc":"Returns a number one less than num.","end-row":2713,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"dec","ns":"cljs.core","row":2711},{"arglist-strs":["[a]"],"doc":"Returns the absolute value of a.","end-row":2718,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"abs","ns":"cljs.core","row":2715},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns the greatest of the nums.","end-row":2725,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"max","ns":"cljs.core","row":2720},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns the least of the nums.","end-row":2732,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"min","ns":"cljs.core","row":2727},{"arglist-strs":["[x]"],"end-row":2734,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"byte","ns":"cljs.core","row":2734},{"arglist-strs":["[x]"],"doc":"Coerce to char","end-row":2742,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"char","ns":"cljs.core","row":2736},{"arglist-strs":["[x]"],"end-row":2744,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"short","ns":"cljs.core","row":2744},{"arglist-strs":["[x]"],"end-row":2745,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"float","ns":"cljs.core","row":2745},{"arglist-strs":["[x]"],"end-row":2746,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"double","ns":"cljs.core","row":2746},{"arglist-strs":["[x]"],"end-row":2748,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-byte","ns":"cljs.core","row":2748},{"arglist-strs":["[x]"],"end-row":2749,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-char","ns":"cljs.core","row":2749},{"arglist-strs":["[x]"],"end-row":2750,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-short","ns":"cljs.core","row":2750},{"arglist-strs":["[x]"],"end-row":2751,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-float","ns":"cljs.core","row":2751},{"arglist-strs":["[x]"],"end-row":2752,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-double","ns":"cljs.core","row":2752},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the sum of nums. (+) returns 0.","end-row":2759,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"unchecked-add","ns":"cljs.core","row":2754},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the sum of nums. (+) returns 0.","end-row":2766,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"unchecked-add-int","ns":"cljs.core","row":2761},{"arglist-strs":["[x]"],"doc":"Returns a number one less than x, an int.","end-row":2771,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-dec","ns":"cljs.core","row":2768},{"arglist-strs":["[x]"],"doc":"Returns a number one less than x, an int.","end-row":2776,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-dec-int","ns":"cljs.core","row":2773},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.","end-row":2783,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"unchecked-divide-int","ns":"cljs.core","row":2778},{"arglist-strs":["[x]"],"end-row":2786,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-inc","ns":"cljs.core","row":2785},{"arglist-strs":["[x]"],"end-row":2789,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-inc-int","ns":"cljs.core","row":2788},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the product of nums. (*) returns 1.","end-row":2796,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"unchecked-multiply","ns":"cljs.core","row":2791},{"arglist-strs":["[]","[x]","[x y]","[x y & more]"],"doc":"Returns the product of nums. (*) returns 1.","end-row":2803,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"unchecked-multiply-int","ns":"cljs.core","row":2798},{"arglist-strs":["[x]"],"end-row":2806,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-negate","ns":"cljs.core","row":2805},{"arglist-strs":["[x]"],"end-row":2809,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-negate-int","ns":"cljs.core","row":2808},{"end-row":2811,"filename":"cljs/core.cljs","name":"mod","ns":"cljs.core","row":2811},{"arglist-strs":["[x n]"],"end-row":2814,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"unchecked-remainder-int","ns":"cljs.core","row":2813},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.","end-row":2821,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"unchecked-subtract","ns":"cljs.core","row":2816},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.","end-row":2828,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"unchecked-subtract-int","ns":"cljs.core","row":2823},{"arglist-strs":["[q]"],"end-row":2833,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"fix","ns":"cljs.core","private":true,"row":2830},{"arglist-strs":["[x]"],"doc":"Coerce to int by stripping decimal places.","end-row":2838,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"int","ns":"cljs.core","row":2835},{"arglist-strs":["[x]"],"doc":"Coerce to int by stripping decimal places.","end-row":2843,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-int","ns":"cljs.core","row":2840},{"arglist-strs":["[x]"],"doc":"Coerce to long by stripping decimal places. Identical to `int'.","end-row":2848,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"long","ns":"cljs.core","row":2845},{"arglist-strs":["[x]"],"doc":"Coerce to long by stripping decimal places. Identical to `int'.","end-row":2853,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"unchecked-long","ns":"cljs.core","row":2850},{"arglist-strs":["[x]"],"end-row":2855,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"booleans","ns":"cljs.core","row":2855},{"arglist-strs":["[x]"],"end-row":2856,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"bytes","ns":"cljs.core","row":2856},{"arglist-strs":["[x]"],"end-row":2857,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chars","ns":"cljs.core","row":2857},{"arglist-strs":["[x]"],"end-row":2858,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"shorts","ns":"cljs.core","row":2858},{"arglist-strs":["[x]"],"end-row":2859,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ints","ns":"cljs.core","row":2859},{"arglist-strs":["[x]"],"end-row":2860,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"floats","ns":"cljs.core","row":2860},{"arglist-strs":["[x]"],"end-row":2861,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"doubles","ns":"cljs.core","row":2861},{"arglist-strs":["[x]"],"end-row":2862,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"longs","ns":"cljs.core","row":2862},{"arglist-strs":["[n d]"],"doc":"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers","end-row":2867,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"js-mod","ns":"cljs.core","row":2864},{"arglist-strs":["[n d]"],"doc":"Modulus of num and div. Truncates toward negative infinity.","end-row":2872,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"mod","ns":"cljs.core","row":2869},{"arglist-strs":["[n d]"],"doc":"quot[ient] of dividing numerator by denominator.","end-row":2878,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"quot","ns":"cljs.core","row":2874},{"arglist-strs":["[n d]"],"doc":"remainder of dividing numerator by denominator.","end-row":2884,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"rem","ns":"cljs.core","row":2880},{"arglist-strs":["[x y]","[x y & more]"],"doc":"Bitwise exclusive or","end-row":2890,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-xor","ns":"cljs.core","row":2886},{"arglist-strs":["[x y]","[x y & more]"],"doc":"Bitwise and","end-row":2896,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-and","ns":"cljs.core","row":2892},{"arglist-strs":["[x y]","[x y & more]"],"doc":"Bitwise or","end-row":2902,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-or","ns":"cljs.core","row":2898},{"arglist-strs":["[x y]","[x y & more]"],"doc":"Bitwise and with complement","end-row":2908,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-and-not","ns":"cljs.core","row":2904},{"arglist-strs":["[x n]"],"doc":"Clear bit at index n","end-row":2913,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-clear","ns":"cljs.core","row":2910},{"arglist-strs":["[x n]"],"doc":"Flip bit at index n","end-row":2918,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-flip","ns":"cljs.core","row":2915},{"arglist-strs":["[x]"],"doc":"Bitwise complement","end-row":2922,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"bit-not","ns":"cljs.core","row":2920},{"arglist-strs":["[x n]"],"doc":"Set bit at index n","end-row":2927,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-set","ns":"cljs.core","row":2924},{"arglist-strs":["[x n]"],"doc":"Test bit at index n","end-row":2932,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-test","ns":"cljs.core","row":2929},{"arglist-strs":["[x n]"],"doc":"Bitwise shift left","end-row":2936,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-shift-left","ns":"cljs.core","row":2934},{"arglist-strs":["[x n]"],"doc":"Bitwise shift right","end-row":2940,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-shift-right","ns":"cljs.core","row":2938},{"arglist-strs":["[x n]"],"doc":"DEPRECATED: Bitwise shift right with zero fill","end-row":2944,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bit-shift-right-zero-fill","ns":"cljs.core","row":2942},{"arglist-strs":["[x n]"],"doc":"Bitwise shift right with zero fill","end-row":2948,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"unsigned-bit-shift-right","ns":"cljs.core","row":2946},{"arglist-strs":["[v]"],"doc":"Counts the number of bits set in n","end-row":2955,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"bit-count","ns":"cljs.core","row":2950},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.","end-row":2968,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"==","ns":"cljs.core","row":2957},{"arglist-strs":["[x]"],"doc":"Returns true if num is greater than zero, else false","end-row":2972,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pos?","ns":"cljs.core","row":2970},{"arglist-strs":["[x]"],"doc":"Returns true if num is zero, else false","end-row":2977,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"zero?","ns":"cljs.core","row":2974},{"arglist-strs":["[x]"],"doc":"Returns true if num is less than zero, else false","end-row":2981,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"neg?","ns":"cljs.core","row":2979},{"arglist-strs":["[coll n]"],"doc":"Returns the nth next of coll, (seq coll) when n is 0.","end-row":2991,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"nthnext","ns":"cljs.core","row":2985},{"arglist-strs":["[]","[x]","[x & ys]"],"doc":"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.","end-row":3007,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"str","ns":"cljs.core","row":2995},{"arglist-strs":["[s start]","[s start end]"],"doc":"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.","end-row":3013,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"subs","ns":"cljs.core","row":3009},{"end-row":3015,"filename":"cljs/core.cljs","name":"map","ns":"cljs.core","row":3015},{"end-row":3015,"filename":"cljs/core.cljs","name":"name","ns":"cljs.core","row":3015},{"fixed-arities":[2],"end-row":3030,"private":true,"ns":"cljs.core","name":"equiv-sequential","filename":"cljs/core.cljs","arglist-strs":["[x y]"],"doc":"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.","row":3017},{"arglist-strs":["[coll]"],"end-row":3038,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-coll","ns":"cljs.core","private":true,"row":3032},{"end-row":3040,"filename":"cljs/core.cljs","name":"key","ns":"cljs.core","row":3040},{"end-row":3040,"filename":"cljs/core.cljs","name":"val","ns":"cljs.core","row":3040},{"arglist-strs":["[m]"],"end-row":3050,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-imap","ns":"cljs.core","private":true,"row":3042},{"arglist-strs":["[s]"],"end-row":3059,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-iset","ns":"cljs.core","private":true,"row":3052},{"end-row":3061,"filename":"cljs/core.cljs","name":"name","ns":"cljs.core","row":3061},{"end-row":3061,"filename":"cljs/core.cljs","name":"chunk-first","ns":"cljs.core","row":3061},{"end-row":3061,"filename":"cljs/core.cljs","name":"chunk-rest","ns":"cljs.core","row":3061},{"fixed-arities":[2],"end-row":3072,"private":true,"ns":"cljs.core","name":"extend-object!","filename":"cljs/core.cljs","arglist-strs":["[obj fn-map]"],"doc":"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached.","row":3063},{"end-row":3143,"filename":"cljs/core.cljs","name":"List","ns":"cljs.core","row":3075},{"arglist-strs":["[meta first rest count __hash]"],"end-row":3143,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->List","ns":"cljs.core","row":3075},{"arglist-strs":["[x]"],"doc":"Returns true if x implements IList","end-row":3148,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"list?","ns":"cljs.core","row":3145},{"end-row":3217,"filename":"cljs/core.cljs","name":"EmptyList","ns":"cljs.core","row":3152},{"arglist-strs":["[meta]"],"end-row":3217,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->EmptyList","ns":"cljs.core","row":3152},{"arglist-strs":["[coll]"],"doc":"Returns true if coll satisfies? IReversible.","end-row":3226,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"reversible?","ns":"cljs.core","row":3223},{"arglist-strs":["[rev]"],"doc":"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil","end-row":3232,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"rseq","ns":"cljs.core","row":3228},{"arglist-strs":["[coll]"],"doc":"Returns a seq of the items in coll in reverse order. Not lazy.","end-row":3239,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"reverse","ns":"cljs.core","row":3234},{"arglist-strs":["[& xs]"],"doc":"Creates a new list containing the items.","end-row":3256,"filename":"cljs/core.cljs","name":"list","ns":"cljs.core","row":3241},{"end-row":3314,"filename":"cljs/core.cljs","name":"Cons","ns":"cljs.core","row":3258},{"arglist-strs":["[meta first rest __hash]"],"end-row":3314,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->Cons","ns":"cljs.core","row":3258},{"arglist-strs":["[x coll]"],"doc":"Returns a new seq where x is the first element and coll is the rest.","end-row":3324,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"cons","ns":"cljs.core","row":3318},{"arglist-strs":["[k]"],"end-row":3327,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"hash-keyword","ns":"cljs.core","row":3326},{"arglist-strs":["[a b]"],"end-row":3339,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"compare-keywords","ns":"cljs.core","private":true,"row":3329},{"end-row":3367,"filename":"cljs/core.cljs","name":"Keyword","ns":"cljs.core","row":3341},{"arglist-strs":["[ns name fqn _hash]"],"end-row":3367,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->Keyword","ns":"cljs.core","row":3341},{"arglist-strs":["[x]"],"doc":"Return true if x is a Keyword","end-row":3372,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"keyword?","ns":"cljs.core","row":3369},{"arglist-strs":["[x y]"],"doc":"Efficient test to determine that two keywords are identical.","end-row":3381,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"keyword-identical?","ns":"cljs.core","row":3374},{"arglist-strs":["[x y]"],"doc":"Efficient test to determine that two symbols are identical.","end-row":3390,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"symbol-identical?","ns":"cljs.core","row":3383},{"arglist-strs":["[x]"],"doc":"Returns the namespace String of a symbol or keyword, or nil if not present.","end-row":3397,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"namespace","ns":"cljs.core","row":3392},{"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword","end-row":3401,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ident?","ns":"cljs.core","row":3399},{"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword without a namespace","end-row":3405,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"simple-ident?","ns":"cljs.core","row":3403},{"arglist-strs":["[x]"],"doc":"Return true if x is a symbol or keyword with a namespace","end-row":3409,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"qualified-ident?","ns":"cljs.core","row":3407},{"arglist-strs":["[x]"],"doc":"Return true if x is a symbol without a namespace","end-row":3413,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"simple-symbol?","ns":"cljs.core","row":3411},{"arglist-strs":["[x]"],"doc":"Return true if x is a symbol with a namespace","end-row":3417,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"qualified-symbol?","ns":"cljs.core","row":3415},{"arglist-strs":["[x]"],"doc":"Return true if x is a keyword without a namespace","end-row":3421,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"simple-keyword?","ns":"cljs.core","row":3419},{"arglist-strs":["[x]"],"doc":"Return true if x is a keyword with a namespace","end-row":3425,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"qualified-keyword?","ns":"cljs.core","row":3423},{"arglist-strs":["[name]","[ns name]"],"doc":"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.","end-row":3449,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"keyword","ns":"cljs.core","row":3427},{"end-row":3529,"filename":"cljs/core.cljs","name":"LazySeq","ns":"cljs.core","row":3452},{"arglist-strs":["[meta fn s __hash]"],"end-row":3529,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->LazySeq","ns":"cljs.core","row":3452},{"end-row":3533,"filename":"cljs/core.cljs","name":"ArrayChunk","ns":"cljs.core","row":3533},{"end-row":3547,"filename":"cljs/core.cljs","name":"ChunkBuffer","ns":"cljs.core","row":3535},{"arglist-strs":["[buf end]"],"end-row":3547,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->ChunkBuffer","ns":"cljs.core","row":3535},{"arglist-strs":["[capacity]"],"end-row":3550,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunk-buffer","ns":"cljs.core","row":3549},{"end-row":3574,"filename":"cljs/core.cljs","name":"ArrayChunk","ns":"cljs.core","row":3552},{"arglist-strs":["[arr off end]"],"end-row":3574,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->ArrayChunk","ns":"cljs.core","row":3552},{"arglist-strs":["[arr]","[arr off]","[arr off end]"],"end-row":3582,"filename":"cljs/core.cljs","fixed-arities":[1,3,2],"name":"array-chunk","ns":"cljs.core","row":3576},{"end-row":3653,"filename":"cljs/core.cljs","name":"ChunkedCons","ns":"cljs.core","row":3584},{"arglist-strs":["[chunk more meta __hash]"],"end-row":3653,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->ChunkedCons","ns":"cljs.core","row":3584},{"arglist-strs":["[chunk rest]"],"end-row":3660,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"chunk-cons","ns":"cljs.core","row":3657},{"arglist-strs":["[b x]"],"end-row":3663,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"chunk-append","ns":"cljs.core","row":3662},{"arglist-strs":["[b]"],"end-row":3666,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunk","ns":"cljs.core","row":3665},{"arglist-strs":["[s]"],"end-row":3669,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunk-first","ns":"cljs.core","row":3668},{"arglist-strs":["[s]"],"end-row":3672,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunk-rest","ns":"cljs.core","row":3671},{"arglist-strs":["[s]"],"end-row":3677,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunk-next","ns":"cljs.core","row":3674},{"arglist-strs":["[coll]"],"doc":"Returns an array containing the contents of coll.","end-row":3689,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"to-array","ns":"cljs.core","row":3681},{"arglist-strs":["[coll]"],"doc":"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.","end-row":3700,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"to-array-2d","ns":"cljs.core","row":3691},{"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.","end-row":3722,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"int-array","ns":"cljs.core","row":3702},{"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.","end-row":3744,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"long-array","ns":"cljs.core","row":3724},{"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.","end-row":3766,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"double-array","ns":"cljs.core","row":3746},{"arglist-strs":["[size-or-seq]","[size init-val-or-seq]"],"doc":"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.","end-row":3788,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"object-array","ns":"cljs.core","row":3768},{"arglist-strs":["[n coll]"],"doc":"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq","end-row":3800,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bounded-count","ns":"cljs.core","row":3790},{"arglist-strs":["[arglist]"],"end-row":3809,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"spread","ns":"cljs.core","row":3802},{"arglist-strs":["[]","[x]","[x y]","[x y & zs]"],"doc":"Returns a lazy seq representing the concatenation of the elements in the supplied colls.","end-row":3834,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"concat","ns":"cljs.core","row":3811},{"arglist-strs":["[args]","[a args]","[a b args]","[a b c args]","[a b c d & more]"],"doc":"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.","end-row":3844,"filename":"cljs/core.cljs","fixed-arities":[1,4,3,2],"name":"list*","ns":"cljs.core","row":3836},{"arglist-strs":["[coll]"],"doc":"Returns a new, transient version of the collection, in constant time.","end-row":3852,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"transient","ns":"cljs.core","row":3849},{"arglist-strs":["[tcoll]"],"doc":"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.","end-row":3859,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"persistent!","ns":"cljs.core","row":3854},{"arglist-strs":["[]","[tcoll]","[tcoll val]","[tcoll val & vals]"],"doc":"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.","end-row":3872,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"conj!","ns":"cljs.core","row":3861},{"arglist-strs":["[tcoll key val]","[tcoll key val & kvs]"],"doc":"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.","end-row":3884,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"assoc!","ns":"cljs.core","row":3874},{"arglist-strs":["[tcoll key]","[tcoll key & ks]"],"doc":"Returns a transient map that doesn't contain a mapping for key(s).","end-row":3894,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"dissoc!","ns":"cljs.core","row":3886},{"arglist-strs":["[tcoll]"],"doc":"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll","end-row":3900,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pop!","ns":"cljs.core","row":3896},{"arglist-strs":["[tcoll val]","[tcoll val & vals]"],"doc":"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).","end-row":3911,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"disj!","ns":"cljs.core","row":3902},{"fixed-arities":[1],"end-row":3926,"private":true,"ns":"cljs.core","name":"next*","filename":"cljs/core.cljs","arglist-strs":["[coll]"],"doc":"Internal. DO NOT USE! Next without the nil? check.","row":3921},{"fixed-arities":[4,6,3,2,5],"end-row":3960,"private":true,"ns":"cljs.core","name":"apply-to-simple","filename":"cljs/core.cljs","arglist-strs":["[f args]","[f a0 args]","[f a0 a1 args]","[f a0 a1 a2 args]","[f a0 a1 a2 a3 args]"],"doc":"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!","row":3928},{"arglist-strs":["[f args]","[f x args]","[f x y args]","[f x y z args]","[f a b c d & args]"],"doc":"Applies fn f to the argument list formed by prepending intervening arguments to args.","end-row":4008,"filename":"cljs/core.cljs","fixed-arities":[4,3,2,5],"name":"apply","ns":"cljs.core","row":3962},{"arglist-strs":["[gmap]"],"end-row":4021,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"--destructure-map","ns":"cljs.core","row":4014},{"arglist-strs":["[obj f]","[obj f a]","[obj f a b]","[obj f a b c]","[obj f a b c d]","[obj f a b c d & args]"],"doc":"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.","end-row":4037,"filename":"cljs/core.cljs","fixed-arities":[4,6,3,2,5],"name":"vary-meta","ns":"cljs.core","row":4023},{"arglist-strs":["[x]","[x y]","[x y & more]"],"doc":"Same as (not (= obj1 obj2))","end-row":4044,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"not=","ns":"cljs.core","row":4039},{"arglist-strs":["[coll]"],"doc":"If coll is empty, returns nil, else coll","end-row":4048,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"not-empty","ns":"cljs.core","row":4046},{"arglist-strs":["[]"],"end-row":4055,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"nil-iter","ns":"cljs.core","row":4050},{"end-row":4064,"filename":"cljs/core.cljs","name":"StringIter","ns":"cljs.core","row":4057},{"arglist-strs":["[s i]"],"end-row":4064,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->StringIter","ns":"cljs.core","row":4057},{"arglist-strs":["[x]"],"end-row":4067,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"string-iter","ns":"cljs.core","row":4066},{"end-row":4076,"filename":"cljs/core.cljs","name":"ArrayIter","ns":"cljs.core","row":4069},{"arglist-strs":["[arr i]"],"end-row":4076,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->ArrayIter","ns":"cljs.core","row":4069},{"arglist-strs":["[x]"],"end-row":4079,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"array-iter","ns":"cljs.core","row":4078},{"end-row":4081,"filename":"cljs/core.cljs","name":"INIT","ns":"cljs.core","row":4081},{"end-row":4082,"filename":"cljs/core.cljs","name":"START","ns":"cljs.core","row":4082},{"end-row":4100,"filename":"cljs/core.cljs","name":"SeqIter","ns":"cljs.core","row":4084},{"arglist-strs":["[_seq _next]"],"end-row":4100,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->SeqIter","ns":"cljs.core","row":4084},{"arglist-strs":["[coll]"],"end-row":4103,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"seq-iter","ns":"cljs.core","row":4102},{"arglist-strs":["[coll]"],"end-row":4112,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"iter","ns":"cljs.core","row":4105},{"end-row":4124,"filename":"cljs/core.cljs","name":"Many","ns":"cljs.core","row":4114},{"arglist-strs":["[vals]"],"end-row":4124,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->Many","ns":"cljs.core","row":4114},{"end-row":4126,"filename":"cljs/core.cljs","name":"NONE","ns":"cljs.core","private":true,"row":4126},{"end-row":4145,"filename":"cljs/core.cljs","name":"Single","ns":"cljs.core","row":4128},{"arglist-strs":["[val]"],"end-row":4145,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->Single","ns":"cljs.core","row":4128},{"end-row":4156,"filename":"cljs/core.cljs","name":"Empty","ns":"cljs.core","row":4147},{"arglist-strs":["[]"],"end-row":4156,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"->Empty","ns":"cljs.core","row":4147},{"end-row":4158,"filename":"cljs/core.cljs","name":"EMPTY","ns":"cljs.core","private":true,"row":4158},{"end-row":4174,"filename":"cljs/core.cljs","name":"MultiIterator","ns":"cljs.core","row":4160},{"arglist-strs":["[iters]"],"end-row":4174,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->MultiIterator","ns":"cljs.core","row":4160},{"arglist-strs":["[iter]"],"end-row":4185,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"chunkIteratorSeq","ns":"cljs.core","private":true,"row":4176},{"end-row":4222,"filename":"cljs/core.cljs","name":"TransformerIterator","ns":"cljs.core","row":4187},{"arglist-strs":["[buffer _next completed xf sourceIter multi]"],"end-row":4222,"filename":"cljs/core.cljs","fixed-arities":[6],"name":"->TransformerIterator","ns":"cljs.core","row":4187},{"arglist-strs":["[xform sourceIter multi]"],"end-row":4236,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"transformer-iterator","ns":"cljs.core","row":4226},{"arglist-strs":["[coll]","[xform coll]","[xform coll & colls]"],"doc":"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments","end-row":4266,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"sequence","ns":"cljs.core","row":4246},{"arglist-strs":["[pred coll]"],"doc":"Returns true if (pred x) is logical true for every x in coll, else\n  false.","end-row":4275,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"every?","ns":"cljs.core","row":4268},{"arglist-strs":["[pred coll]"],"doc":"Returns false if (pred x) is logical true for every x in\n  coll, else true.","end-row":4280,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"not-every?","ns":"cljs.core","row":4277},{"arglist-strs":["[pred coll]"],"doc":"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)","end-row":4289,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"some","ns":"cljs.core","row":4282},{"arglist-strs":["[pred coll]"],"doc":"Returns false if (pred x) is logical true for any x in coll,\n  else true.","end-row":4294,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"not-any?","ns":"cljs.core","row":4291},{"arglist-strs":["[n]"],"doc":"Returns true if n is even, throws an exception if n is not an integer","end-row":4300,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"even?","ns":"cljs.core","row":4296},{"arglist-strs":["[n]"],"doc":"Returns true if n is odd, throws an exception if n is not an integer","end-row":4304,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"odd?","ns":"cljs.core","row":4302},{"arglist-strs":["[f]"],"doc":"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.","end-row":4314,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"complement","ns":"cljs.core","row":4306},{"arglist-strs":["[x]"],"doc":"Returns a function that takes any number of arguments and returns x.","end-row":4318,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"constantly","ns":"cljs.core","row":4316},{"arglist-strs":["[]","[f]","[f g]","[f g h]","[f1 f2 f3 & fs]"],"doc":"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.","end-row":4347,"filename":"cljs/core.cljs","fixed-arities":[0,1,3,2],"name":"comp","ns":"cljs.core","row":4320},{"arglist-strs":["[f]","[f arg1]","[f arg1 arg2]","[f arg1 arg2 arg3]","[f arg1 arg2 arg3 & more]"],"doc":"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.","end-row":4376,"filename":"cljs/core.cljs","fixed-arities":[1,4,3,2],"name":"partial","ns":"cljs.core","row":4349},{"arglist-strs":["[f x]","[f x y]","[f x y z]"],"doc":"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.","end-row":4399,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"fnil","ns":"cljs.core","row":4378},{"end-row":4401,"filename":"cljs/core.cljs","name":"volatile!","ns":"cljs.core","row":4401},{"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.","end-row":4429,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"map-indexed","ns":"cljs.core","row":4403},{"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.","end-row":4460,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"keep","ns":"cljs.core","row":4431},{"end-row":4492,"filename":"cljs/core.cljs","name":"Atom","ns":"cljs.core","row":4465},{"arglist-strs":["[state meta validator watches]"],"end-row":4492,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->Atom","ns":"cljs.core","row":4465},{"arglist-strs":["[x]","[x & {:keys [meta validator]}]"],"doc":"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.","end-row":4509,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"atom","ns":"cljs.core","row":4494},{"end-row":4511,"filename":"cljs/core.cljs","name":"pr-str","ns":"cljs.core","row":4511},{"arglist-strs":["[a new-value]"],"doc":"Sets the value of atom to newval without regard for the\n  current value. Returns new-value.","end-row":4527,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"reset!","ns":"cljs.core","row":4513},{"arglist-strs":["[a new-value]"],"doc":"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.","end-row":4542,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"reset-vals!","ns":"cljs.core","row":4529},{"arglist-strs":["[a f]","[a f x]","[a f x y]","[a f x y & more]"],"doc":"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.","end-row":4564,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"swap!","ns":"cljs.core","row":4544},{"arglist-strs":["[a f]","[a f x]","[a f x y]","[a f x y & more]"],"doc":"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.","end-row":4579,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"swap-vals!","ns":"cljs.core","row":4566},{"arglist-strs":["[a oldval newval]"],"doc":"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.","end-row":4588,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"compare-and-set!","ns":"cljs.core","row":4581},{"arglist-strs":["[iref val]"],"doc":"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.","end-row":4601,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"set-validator!","ns":"cljs.core","row":4590},{"arglist-strs":["[iref]"],"doc":"Gets the validator-fn for a var/ref/agent/atom.","end-row":4606,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"get-validator","ns":"cljs.core","row":4603},{"end-row":4614,"filename":"cljs/core.cljs","name":"Volatile","ns":"cljs.core","row":4608},{"arglist-strs":["[state]"],"end-row":4614,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->Volatile","ns":"cljs.core","row":4608},{"arglist-strs":["[val]"],"doc":"Creates and returns a Volatile with an initial value of val.","end-row":4619,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"volatile!","ns":"cljs.core","row":4616},{"arglist-strs":["[x]"],"doc":"Returns true if x is a volatile.","end-row":4623,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"volatile?","ns":"cljs.core","row":4621},{"arglist-strs":["[vol newval]"],"doc":"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.","end-row":4628,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"vreset!","ns":"cljs.core","row":4625},{"arglist-strs":["[f]","[f coll]"],"doc":"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.","end-row":4664,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"keep-indexed","ns":"cljs.core","row":4630},{"arglist-strs":["[p]","[p1 p2]","[p1 p2 p3]","[p1 p2 p3 & ps]"],"doc":"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.","end-row":4703,"filename":"cljs/core.cljs","fixed-arities":[1,3,2],"name":"every-pred","ns":"cljs.core","row":4666},{"arglist-strs":["[p]","[p1 p2]","[p1 p2 p3]","[p1 p2 p3 & ps]"],"doc":"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.","end-row":4742,"filename":"cljs/core.cljs","fixed-arities":[1,3,2],"name":"some-fn","ns":"cljs.core","row":4705},{"arglist-strs":["[f]","[f coll]","[f c1 c2]","[f c1 c2 c3]","[f c1 c2 c3 & colls]"],"doc":"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.","end-row":4789,"filename":"cljs/core.cljs","fixed-arities":[1,4,3,2],"name":"map","ns":"cljs.core","row":4744},{"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.","end-row":4816,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"take","ns":"cljs.core","row":4791},{"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.","end-row":4841,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"drop","ns":"cljs.core","row":4818},{"arglist-strs":["[s]","[n s]"],"doc":"Return a lazy sequence of all but the last n (default 1) items in coll","end-row":4846,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"drop-last","ns":"cljs.core","row":4843},{"arglist-strs":["[n coll]"],"doc":"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.","end-row":4855,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"take-last","ns":"cljs.core","row":4848},{"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.","end-row":4880,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"drop-while","ns":"cljs.core","row":4857},{"end-row":4941,"filename":"cljs/core.cljs","name":"Cycle","ns":"cljs.core","row":4882},{"arglist-strs":["[meta all prev current _next]"],"end-row":4941,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->Cycle","ns":"cljs.core","row":4882},{"arglist-strs":["[coll]"],"doc":"Returns a lazy (infinite!) sequence of repetitions of the items in coll.","end-row":4947,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"cycle","ns":"cljs.core","row":4943},{"arglist-strs":["[n coll]"],"doc":"Returns a vector of [(take n coll) (drop n coll)]","end-row":4952,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"split-at","ns":"cljs.core","row":4949},{"end-row":5049,"filename":"cljs/core.cljs","name":"Repeat","ns":"cljs.core","row":4954},{"arglist-strs":["[meta count val next __hash]"],"end-row":5049,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->Repeat","ns":"cljs.core","row":4954},{"arglist-strs":["[x]","[n x]"],"doc":"Returns a lazy (infinite!, or length n if supplied) sequence of xs.","end-row":5056,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"repeat","ns":"cljs.core","row":5051},{"arglist-strs":["[n x]"],"doc":"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs.","end-row":5061,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"replicate","ns":"cljs.core","row":5058},{"arglist-strs":["[f]","[n f]"],"doc":"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it","end-row":5068,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"repeatedly","ns":"cljs.core","row":5063},{"end-row":5070,"filename":"cljs/core.cljs","name":"UNREALIZED-SEED","ns":"cljs.core","private":true,"row":5070},{"end-row":5129,"filename":"cljs/core.cljs","name":"Iterate","ns":"cljs.core","row":5072},{"arglist-strs":["[meta f prev-seed seed next]"],"end-row":5129,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->Iterate","ns":"cljs.core","row":5072},{"arglist-strs":["[f x]"],"doc":"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects","end-row":5134,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"iterate","ns":"cljs.core","row":5131},{"arglist-strs":["[]","[c1]","[c1 c2]","[c1 c2 & colls]"],"doc":"Returns a lazy seq of the first item in each coll, then the second etc.","end-row":5150,"filename":"cljs/core.cljs","fixed-arities":[0,1,2],"name":"interleave","ns":"cljs.core","row":5136},{"arglist-strs":["[sep]","[sep coll]"],"doc":"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.","end-row":5170,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"interpose","ns":"cljs.core","row":5152},{"fixed-arities":[1],"end-row":5184,"private":true,"ns":"cljs.core","name":"flatten1","filename":"cljs/core.cljs","arglist-strs":["[colls]"],"doc":"Take a collection of collections, and return a lazy seq\n  of items from the inner collection","row":5174},{"end-row":5186,"filename":"cljs/core.cljs","name":"cat","ns":"cljs.core","row":5186},{"arglist-strs":["[f]","[f & colls]"],"doc":"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided","end-row":5196,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"mapcat","ns":"cljs.core","row":5188},{"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","end-row":5225,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"filter","ns":"cljs.core","row":5198},{"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","end-row":5233,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"remove","ns":"cljs.core","row":5227},{"arglist-strs":["[branch? children root]"],"doc":"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.","end-row":5248,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"tree-seq","ns":"cljs.core","row":5235},{"arglist-strs":["[x]"],"doc":"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.","end-row":5256,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"flatten","ns":"cljs.core","row":5250},{"arglist-strs":["[]","[to]","[to from]","[to xform from]"],"doc":"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.","end-row":5276,"filename":"cljs/core.cljs","fixed-arities":[0,1,3,2],"name":"into","ns":"cljs.core","row":5258},{"arglist-strs":["[f coll]","[f c1 c2]","[f c1 c2 c3]","[f c1 c2 c3 & colls]"],"doc":"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.","end-row":5292,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"mapv","ns":"cljs.core","row":5278},{"arglist-strs":["[pred coll]"],"doc":"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.","end-row":5301,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"filterv","ns":"cljs.core","row":5294},{"arglist-strs":["[n coll]","[n step coll]","[n step pad coll]"],"doc":"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.","end-row":5323,"filename":"cljs/core.cljs","fixed-arities":[4,3,2],"name":"partition","ns":"cljs.core","row":5303},{"arglist-strs":["[m ks]","[m ks not-found]"],"doc":"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.","end-row":5342,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"get-in","ns":"cljs.core","row":5325},{"arglist-strs":["[m [k & ks] v]"],"doc":"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.","end-row":5351,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"assoc-in","ns":"cljs.core","row":5344},{"arglist-strs":["[m [k & ks] f]","[m [k & ks] f a]","[m [k & ks] f a b]","[m [k & ks] f a b c]","[m [k & ks] f a b c & args]"],"doc":"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.","end-row":5378,"filename":"cljs/core.cljs","fixed-arities":[4,6,3,5],"name":"update-in","ns":"cljs.core","row":5353},{"arglist-strs":["[m k f]","[m k f x]","[m k f x y]","[m k f x y z]","[m k f x y z & more]"],"doc":"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.","end-row":5394,"filename":"cljs/core.cljs","fixed-arities":[4,6,3,5],"name":"update","ns":"cljs.core","row":5380},{"end-row":5398,"filename":"cljs/core.cljs","name":"VectorNode","ns":"cljs.core","row":5398},{"arglist-strs":["[edit arr]"],"end-row":5398,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->VectorNode","ns":"cljs.core","row":5398},{"arglist-strs":["[edit]"],"end-row":5401,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pv-fresh-node","ns":"cljs.core","private":true,"row":5400},{"arglist-strs":["[node idx]"],"end-row":5404,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"pv-aget","ns":"cljs.core","private":true,"row":5403},{"arglist-strs":["[node idx val]"],"end-row":5407,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pv-aset","ns":"cljs.core","private":true,"row":5406},{"arglist-strs":["[node]"],"end-row":5410,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pv-clone-node","ns":"cljs.core","private":true,"row":5409},{"arglist-strs":["[pv]"],"end-row":5416,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"tail-off","ns":"cljs.core","private":true,"row":5412},{"arglist-strs":["[edit level node]"],"end-row":5426,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"new-path","ns":"cljs.core","private":true,"row":5418},{"arglist-strs":["[pv level parent tailnode]"],"end-row":5442,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"push-tail","ns":"cljs.core","private":true,"row":5428},{"arglist-strs":["[i cnt]"],"end-row":5445,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"vector-index-out-of-bounds","ns":"cljs.core","private":true,"row":5444},{"arglist-strs":["[pv]"],"end-row":5453,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"first-array-for-longvec","ns":"cljs.core","private":true,"row":5447},{"arglist-strs":["[pv i]"],"end-row":5464,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"unchecked-array-for","ns":"cljs.core","private":true,"row":5455},{"arglist-strs":["[pv i]"],"end-row":5469,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-for","ns":"cljs.core","private":true,"row":5466},{"arglist-strs":["[pv level node i val]"],"end-row":5479,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"do-assoc","ns":"cljs.core","private":true,"row":5471},{"arglist-strs":["[pv level node]"],"end-row":5493,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pop-tail","ns":"cljs.core","private":true,"row":5481},{"end-row":5505,"filename":"cljs/core.cljs","name":"RangedIterator","ns":"cljs.core","row":5495},{"arglist-strs":["[i base arr v start end]"],"end-row":5505,"filename":"cljs/core.cljs","fixed-arities":[6],"name":"->RangedIterator","ns":"cljs.core","row":5495},{"arglist-strs":["[v start end]"],"end-row":5512,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"ranged-iterator","ns":"cljs.core","row":5507},{"arglist-strs":["[pv f start end]","[pv f init start end]"],"end-row":5528,"filename":"cljs/core.cljs","fixed-arities":[4,5],"name":"pv-reduce","ns":"cljs.core","private":true,"row":5514},{"end-row":5531,"filename":"cljs/core.cljs","name":"tv-editable-root","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"tv-editable-tail","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"TransientVector","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"deref","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"pr-sequential-writer","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"pr-writer","ns":"cljs.core","row":5530},{"end-row":5531,"filename":"cljs/core.cljs","name":"chunked-seq","ns":"cljs.core","row":5530},{"doc":"Marker protocol","end-row":5534,"filename":"cljs/core.cljs","name":"APersistentVector","ns":"cljs.core","row":5533},{"end-row":5731,"filename":"cljs/core.cljs","name":"PersistentVector","ns":"cljs.core","row":5536},{"arglist-strs":["[meta cnt shift root tail __hash]"],"end-row":5731,"filename":"cljs/core.cljs","fixed-arities":[6],"name":"->PersistentVector","ns":"cljs.core","row":5536},{"end-row":5753,"filename":"cljs/core.cljs","name":"map-entry?","ns":"cljs.core","row":5753},{"arglist-strs":["[coll]"],"doc":"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.","end-row":5773,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"vec","ns":"cljs.core","row":5755},{"arglist-strs":["[& args]"],"doc":"Creates a new vector containing the args.","end-row":5780,"filename":"cljs/core.cljs","name":"vector","ns":"cljs.core","row":5775},{"end-row":5782,"filename":"cljs/core.cljs","name":"subvec","ns":"cljs.core","row":5782},{"end-row":5866,"filename":"cljs/core.cljs","name":"ChunkedSeq","ns":"cljs.core","row":5784},{"arglist-strs":["[vec node i off meta __hash]"],"end-row":5866,"filename":"cljs/core.cljs","fixed-arities":[6],"name":"->ChunkedSeq","ns":"cljs.core","row":5784},{"arglist-strs":["[vec i off]","[vec node i off]","[vec node i off meta]"],"end-row":5874,"filename":"cljs/core.cljs","fixed-arities":[4,3,5],"name":"chunked-seq","ns":"cljs.core","row":5870},{"end-row":5876,"filename":"cljs/core.cljs","name":"build-subvec","ns":"cljs.core","row":5876},{"end-row":6015,"filename":"cljs/core.cljs","name":"Subvec","ns":"cljs.core","row":5878},{"arglist-strs":["[meta v start end __hash]"],"end-row":6015,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->Subvec","ns":"cljs.core","row":5878},{"arglist-strs":["[meta v start end __hash]"],"end-row":6029,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"build-subvec","ns":"cljs.core","private":true,"row":6019},{"arglist-strs":["[v start]","[v start end]"],"doc":"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.","end-row":6041,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"subvec","ns":"cljs.core","row":6031},{"arglist-strs":["[edit node]"],"end-row":6046,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"tv-ensure-editable","ns":"cljs.core","private":true,"row":6043},{"arglist-strs":["[node]"],"end-row":6049,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"tv-editable-root","ns":"cljs.core","private":true,"row":6048},{"arglist-strs":["[tl]"],"end-row":6054,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"tv-editable-tail","ns":"cljs.core","private":true,"row":6051},{"arglist-strs":["[tv level parent tail-node]"],"end-row":6066,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"tv-push-tail","ns":"cljs.core","private":true,"row":6056},{"arglist-strs":["[tv level node]"],"end-row":6080,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"tv-pop-tail","ns":"cljs.core","private":true,"row":6068},{"arglist-strs":["[tv i]"],"end-row":6096,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"unchecked-editable-array-for","ns":"cljs.core","private":true,"row":6082},{"end-row":6229,"filename":"cljs/core.cljs","name":"TransientVector","ns":"cljs.core","row":6098},{"arglist-strs":["[cnt shift root tail]"],"end-row":6229,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->TransientVector","ns":"cljs.core","row":6098},{"end-row":6246,"filename":"cljs/core.cljs","name":"PersistentQueueIter","ns":"cljs.core","row":6233},{"arglist-strs":["[fseq riter]"],"end-row":6246,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->PersistentQueueIter","ns":"cljs.core","row":6233},{"end-row":6302,"filename":"cljs/core.cljs","name":"PersistentQueueSeq","ns":"cljs.core","row":6248},{"arglist-strs":["[meta front rear __hash]"],"end-row":6302,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->PersistentQueueSeq","ns":"cljs.core","row":6248},{"end-row":6373,"filename":"cljs/core.cljs","name":"PersistentQueue","ns":"cljs.core","row":6306},{"arglist-strs":["[meta count front rear __hash]"],"end-row":6373,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->PersistentQueue","ns":"cljs.core","row":6306},{"end-row":6384,"filename":"cljs/core.cljs","name":"NeverEquiv","ns":"cljs.core","row":6379},{"arglist-strs":["[]"],"end-row":6384,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"->NeverEquiv","ns":"cljs.core","row":6379},{"end-row":6386,"filename":"cljs/core.cljs","name":"never-equiv","ns":"cljs.core","private":true,"row":6386},{"arglist-strs":["[x y]"],"doc":"Test map equivalence. Returns true if x equals y, otherwise returns false.","end-row":6405,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"equiv-map","ns":"cljs.core","row":6388},{"arglist-strs":["[incr k array]"],"end-row":6414,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"scan-array","ns":"cljs.core","private":true,"row":6408},{"arglist-strs":["[a b]"],"end-row":6428,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"obj-map-compare-keys","ns":"cljs.core","private":true,"row":6422},{"arglist-strs":["[m k v]"],"end-row":6440,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"obj-map->hash-map","ns":"cljs.core","private":true,"row":6430},{"arglist-strs":["[obj ks]"],"end-row":6452,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"obj-clone","ns":"cljs.core","private":true,"row":6444},{"end-row":6565,"filename":"cljs/core.cljs","name":"ObjMap","ns":"cljs.core","row":6454},{"arglist-strs":["[meta keys strobj update-count __hash]"],"end-row":6565,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->ObjMap","ns":"cljs.core","row":6454},{"end-row":6584,"filename":"cljs/core.cljs","name":"RecordIter","ns":"cljs.core","row":6574},{"arglist-strs":["[i record base-count fields ext-map-iter]"],"end-row":6584,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->RecordIter","ns":"cljs.core","row":6574},{"end-row":6594,"filename":"cljs/core.cljs","name":"ES6EntriesIterator","ns":"cljs.core","row":6587},{"arglist-strs":["[s]"],"end-row":6594,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->ES6EntriesIterator","ns":"cljs.core","row":6587},{"arglist-strs":["[coll]"],"end-row":6597,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"es6-entries-iterator","ns":"cljs.core","row":6596},{"end-row":6607,"filename":"cljs/core.cljs","name":"ES6SetEntriesIterator","ns":"cljs.core","row":6600},{"arglist-strs":["[s]"],"end-row":6607,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->ES6SetEntriesIterator","ns":"cljs.core","row":6600},{"arglist-strs":["[coll]"],"end-row":6610,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"es6-set-entries-iterator","ns":"cljs.core","row":6609},{"arglist-strs":["[arr]"],"end-row":6620,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"array-index-of-nil?","ns":"cljs.core","private":true,"row":6614},{"arglist-strs":["[arr k]"],"end-row":6630,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-index-of-keyword?","ns":"cljs.core","private":true,"row":6622},{"arglist-strs":["[arr k]"],"end-row":6640,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-index-of-symbol?","ns":"cljs.core","private":true,"row":6632},{"arglist-strs":["[arr k]"],"end-row":6648,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-index-of-identical?","ns":"cljs.core","private":true,"row":6642},{"arglist-strs":["[arr k]"],"end-row":6656,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-index-of-equiv?","ns":"cljs.core","private":true,"row":6650},{"arglist-strs":["[arr k]"],"end-row":6670,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-index-of","ns":"cljs.core","row":6658},{"arglist-strs":["[m k]"],"end-row":6673,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array-map-index-of","ns":"cljs.core","private":true,"row":6672},{"arglist-strs":["[arr k v]"],"end-row":6684,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"array-extend-kv","ns":"cljs.core","private":true,"row":6675},{"arglist-strs":["[m k v]"],"end-row":6687,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"array-map-extend-kv","ns":"cljs.core","private":true,"row":6686},{"end-row":6689,"filename":"cljs/core.cljs","name":"TransientArrayMap","ns":"cljs.core","row":6689},{"end-row":6784,"filename":"cljs/core.cljs","name":"MapEntry","ns":"cljs.core","row":6691},{"arglist-strs":["[key val __hash]"],"end-row":6784,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->MapEntry","ns":"cljs.core","row":6691},{"arglist-strs":["[x]"],"doc":"Returns true if x satisfies IMapEntry","end-row":6789,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"map-entry?","ns":"cljs.core","row":6786},{"end-row":6852,"filename":"cljs/core.cljs","name":"PersistentArrayMapSeq","ns":"cljs.core","row":6791},{"arglist-strs":["[arr i _meta]"],"end-row":6852,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->PersistentArrayMapSeq","ns":"cljs.core","row":6791},{"arglist-strs":["[arr i _meta]"],"end-row":6858,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"persistent-array-map-seq","ns":"cljs.core","row":6856},{"end-row":6860,"filename":"cljs/core.cljs","name":"keys","ns":"cljs.core","row":6860},{"end-row":6860,"filename":"cljs/core.cljs","name":"vals","ns":"cljs.core","row":6860},{"end-row":6869,"filename":"cljs/core.cljs","name":"PersistentArrayMapIterator","ns":"cljs.core","row":6862},{"arglist-strs":["[arr i cnt]"],"end-row":6869,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->PersistentArrayMapIterator","ns":"cljs.core","row":6862},{"end-row":7036,"filename":"cljs/core.cljs","name":"PersistentArrayMap","ns":"cljs.core","row":6871},{"arglist-strs":["[meta cnt arr __hash]"],"end-row":7036,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->PersistentArrayMap","ns":"cljs.core","row":6871},{"arglist-strs":["[key other]"],"end-row":7080,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"key-test","ns":"cljs.core","row":7076},{"arglist-strs":["[arr]"],"end-row":7092,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pam-dupes?","ns":"cljs.core","private":true,"row":7082},{"arglist-strs":["[arr]"],"end-row":7104,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"pam-new-size","ns":"cljs.core","private":true,"row":7094},{"arglist-strs":["[seed trailing]"],"end-row":7117,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"pam-grow-seed-array","ns":"cljs.core","private":true,"row":7106},{"end-row":7164,"filename":"cljs/core.cljs","name":"array->transient-hash-map","ns":"cljs.core","row":7164},{"end-row":7244,"filename":"cljs/core.cljs","name":"TransientArrayMap","ns":"cljs.core","row":7166},{"arglist-strs":["[editable? len arr]"],"end-row":7244,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->TransientArrayMap","ns":"cljs.core","row":7166},{"end-row":7246,"filename":"cljs/core.cljs","name":"TransientHashMap","ns":"cljs.core","row":7246},{"arglist-strs":["[len arr]"],"end-row":7253,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"array->transient-hash-map","ns":"cljs.core","private":true,"row":7248},{"end-row":7257,"filename":"cljs/core.cljs","name":"Box","ns":"cljs.core","row":7257},{"arglist-strs":["[val]"],"end-row":7257,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->Box","ns":"cljs.core","row":7257},{"end-row":7259,"filename":"cljs/core.cljs","name":"create-inode-seq","ns":"cljs.core","row":7259},{"end-row":7259,"filename":"cljs/core.cljs","name":"create-array-node-seq","ns":"cljs.core","row":7259},{"end-row":7259,"filename":"cljs/core.cljs","name":"reset!","ns":"cljs.core","row":7259},{"end-row":7259,"filename":"cljs/core.cljs","name":"create-node","ns":"cljs.core","row":7259},{"end-row":7259,"filename":"cljs/core.cljs","name":"atom","ns":"cljs.core","row":7259},{"end-row":7259,"filename":"cljs/core.cljs","name":"deref","ns":"cljs.core","row":7259},{"arglist-strs":["[hash shift]"],"end-row":7262,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"mask","ns":"cljs.core","private":true,"row":7261},{"arglist-strs":["[arr i a]","[arr i a j b]"],"end-row":7271,"filename":"cljs/core.cljs","fixed-arities":[3,5],"name":"clone-and-set","ns":"cljs.core","private":true,"row":7264},{"arglist-strs":["[arr i]"],"end-row":7277,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"remove-pair","ns":"cljs.core","private":true,"row":7273},{"arglist-strs":["[bitmap bit]"],"end-row":7280,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bitmap-indexed-node-index","ns":"cljs.core","private":true,"row":7279},{"arglist-strs":["[hash shift]"],"end-row":7283,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"bitpos","ns":"cljs.core","private":true,"row":7282},{"arglist-strs":["[inode edit i a]","[inode edit i a j b]"],"end-row":7294,"filename":"cljs/core.cljs","fixed-arities":[4,6],"name":"edit-and-set","ns":"cljs.core","private":true,"row":7285},{"arglist-strs":["[arr f init]"],"end-row":7310,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"inode-kv-reduce","ns":"cljs.core","private":true,"row":7296},{"end-row":7312,"filename":"cljs/core.cljs","name":"ArrayNode","ns":"cljs.core","row":7312},{"end-row":7350,"filename":"cljs/core.cljs","name":"NodeIterator","ns":"cljs.core","row":7314},{"arglist-strs":["[arr i next-entry next-iter]"],"end-row":7350,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->NodeIterator","ns":"cljs.core","row":7314},{"end-row":7552,"filename":"cljs/core.cljs","name":"BitmapIndexedNode","ns":"cljs.core","row":7352},{"arglist-strs":["[edit bitmap arr]"],"end-row":7552,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->BitmapIndexedNode","ns":"cljs.core","row":7352},{"arglist-strs":["[array-node edit idx]"],"end-row":7567,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pack-array-node","ns":"cljs.core","private":true,"row":7556},{"end-row":7587,"filename":"cljs/core.cljs","name":"ArrayNodeIterator","ns":"cljs.core","row":7569},{"arglist-strs":["[arr i next-iter]"],"end-row":7587,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->ArrayNodeIterator","ns":"cljs.core","row":7569},{"end-row":7688,"filename":"cljs/core.cljs","name":"ArrayNode","ns":"cljs.core","row":7589},{"arglist-strs":["[edit cnt arr]"],"end-row":7688,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->ArrayNode","ns":"cljs.core","row":7589},{"arglist-strs":["[arr cnt key]"],"end-row":7697,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"hash-collision-node-find-index","ns":"cljs.core","private":true,"row":7690},{"end-row":7799,"filename":"cljs/core.cljs","name":"HashCollisionNode","ns":"cljs.core","row":7699},{"arglist-strs":["[edit collision-hash cnt arr]"],"end-row":7799,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"->HashCollisionNode","ns":"cljs.core","row":7699},{"arglist-strs":["[shift key1 val1 key2hash key2 val2]","[edit shift key1 val1 key2hash key2 val2]"],"end-row":7817,"filename":"cljs/core.cljs","fixed-arities":[7,6],"name":"create-node","ns":"cljs.core","private":true,"row":7801},{"end-row":7879,"filename":"cljs/core.cljs","name":"NodeSeq","ns":"cljs.core","row":7819},{"arglist-strs":["[meta nodes i s __hash]"],"end-row":7879,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->NodeSeq","ns":"cljs.core","row":7819},{"arglist-strs":["[nodes]","[nodes i s]"],"end-row":7898,"filename":"cljs/core.cljs","fixed-arities":[1,3],"name":"create-inode-seq","ns":"cljs.core","private":true,"row":7883},{"end-row":7952,"filename":"cljs/core.cljs","name":"ArrayNodeSeq","ns":"cljs.core","row":7900},{"arglist-strs":["[meta nodes i s __hash]"],"end-row":7952,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->ArrayNodeSeq","ns":"cljs.core","row":7900},{"arglist-strs":["[nodes]","[nodes i s]"],"end-row":7968,"filename":"cljs/core.cljs","fixed-arities":[1,3],"name":"create-array-node-seq","ns":"cljs.core","private":true,"row":7956},{"end-row":7980,"filename":"cljs/core.cljs","name":"HashMapIter","ns":"cljs.core","row":7970},{"arglist-strs":["[nil-val root-iter seen]"],"end-row":7980,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->HashMapIter","ns":"cljs.core","row":7970},{"end-row":8124,"filename":"cljs/core.cljs","name":"PersistentHashMap","ns":"cljs.core","row":7982},{"arglist-strs":["[meta cnt root has-nil? nil-val __hash]"],"end-row":8124,"filename":"cljs/core.cljs","fixed-arities":[6],"name":"->PersistentHashMap","ns":"cljs.core","row":7982},{"end-row":8275,"filename":"cljs/core.cljs","name":"TransientHashMap","ns":"cljs.core","row":8162},{"arglist-strs":["[edit root count has-nil? nil-val]"],"end-row":8275,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->TransientHashMap","ns":"cljs.core","row":8162},{"arglist-strs":["[node stack ascending?]"],"end-row":8284,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"tree-map-seq-push","ns":"cljs.core","private":true,"row":8279},{"end-row":8353,"filename":"cljs/core.cljs","name":"PersistentTreeMapSeq","ns":"cljs.core","row":8286},{"arglist-strs":["[meta stack ascending? cnt __hash]"],"end-row":8353,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->PersistentTreeMapSeq","ns":"cljs.core","row":8286},{"arglist-strs":["[tree ascending? cnt]"],"end-row":8358,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"create-tree-map-seq","ns":"cljs.core","private":true,"row":8357},{"end-row":8360,"filename":"cljs/core.cljs","name":"RedNode","ns":"cljs.core","row":8360},{"end-row":8360,"filename":"cljs/core.cljs","name":"BlackNode","ns":"cljs.core","row":8360},{"arglist-strs":["[key val ins right]"],"end-row":8385,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"balance-left","ns":"cljs.core","private":true,"row":8362},{"arglist-strs":["[key val left ins]"],"end-row":8407,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"balance-right","ns":"cljs.core","private":true,"row":8387},{"arglist-strs":["[key val del right]"],"end-row":8426,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"balance-left-del","ns":"cljs.core","private":true,"row":8409},{"arglist-strs":["[key val left del]"],"end-row":8445,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"balance-right-del","ns":"cljs.core","private":true,"row":8428},{"arglist-strs":["[node f init]"],"end-row":8458,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"tree-map-kv-reduce","ns":"cljs.core","private":true,"row":8447},{"end-row":8581,"filename":"cljs/core.cljs","name":"BlackNode","ns":"cljs.core","row":8460},{"arglist-strs":["[key val left right __hash]"],"end-row":8581,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->BlackNode","ns":"cljs.core","row":8460},{"end-row":8745,"filename":"cljs/core.cljs","name":"RedNode","ns":"cljs.core","row":8585},{"arglist-strs":["[key val left right __hash]"],"end-row":8745,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->RedNode","ns":"cljs.core","row":8585},{"arglist-strs":["[comp tree k v found]"],"end-row":8766,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"tree-map-add","ns":"cljs.core","private":true,"row":8749},{"arglist-strs":["[left right]"],"end-row":8823,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"tree-map-append","ns":"cljs.core","private":true,"row":8768},{"arglist-strs":["[comp tree k found]"],"end-row":8845,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"tree-map-remove","ns":"cljs.core","private":true,"row":8825},{"arglist-strs":["[comp tree k v]"],"end-row":8852,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"tree-map-replace","ns":"cljs.core","private":true,"row":8847},{"end-row":8854,"filename":"cljs/core.cljs","name":"key","ns":"cljs.core","row":8854},{"end-row":9007,"filename":"cljs/core.cljs","name":"PersistentTreeMap","ns":"cljs.core","row":8856},{"arglist-strs":["[comp tree cnt meta __hash]"],"end-row":9007,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"->PersistentTreeMap","ns":"cljs.core","row":8856},{"arglist-strs":["[& keyvals]"],"doc":"keyval => key val\n  Returns a new hash map with supplied mappings.","end-row":9023,"filename":"cljs/core.cljs","name":"hash-map","ns":"cljs.core","row":9013},{"arglist-strs":["[& keyvals]"],"doc":"keyval => key val\n  Returns a new array map with supplied mappings.","end-row":9034,"filename":"cljs/core.cljs","name":"array-map","ns":"cljs.core","row":9025},{"arglist-strs":["[s]"],"doc":"Builds a map from a seq as described in\n  https://clojure.org/reference/special_forms#keyword-arguments","end-row":9042,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"seq-to-map-for-destructuring","ns":"cljs.core","row":9036},{"arglist-strs":["[& keyvals]"],"doc":"keyval => key val\n  Returns a new object map with supplied mappings.","end-row":9055,"filename":"cljs/core.cljs","name":"obj-map","ns":"cljs.core","row":9044},{"arglist-strs":["[& keyvals]"],"doc":"keyval => key val\n  Returns a new sorted map with supplied mappings.","end-row":9064,"filename":"cljs/core.cljs","name":"sorted-map","ns":"cljs.core","row":9057},{"arglist-strs":["[comparator & keyvals]"],"doc":"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.","end-row":9074,"filename":"cljs/core.cljs","name":"sorted-map-by","ns":"cljs.core","row":9066},{"end-row":9140,"filename":"cljs/core.cljs","name":"KeySeq","ns":"cljs.core","row":9076},{"arglist-strs":["[mseq _meta]"],"end-row":9140,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->KeySeq","ns":"cljs.core","row":9076},{"arglist-strs":["[map]"],"doc":"Returns a sequence of the map's keys, in the same order as (seq map).","end-row":9148,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"keys","ns":"cljs.core","row":9144},{"arglist-strs":["[map-entry]"],"doc":"Returns the key of the map entry.","end-row":9153,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"key","ns":"cljs.core","row":9150},{"end-row":9219,"filename":"cljs/core.cljs","name":"ValSeq","ns":"cljs.core","row":9155},{"arglist-strs":["[mseq _meta]"],"end-row":9219,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->ValSeq","ns":"cljs.core","row":9155},{"arglist-strs":["[map]"],"doc":"Returns a sequence of the map's values, in the same order as (seq map).","end-row":9227,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"vals","ns":"cljs.core","row":9223},{"arglist-strs":["[map-entry]"],"doc":"Returns the value in the map entry.","end-row":9232,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"val","ns":"cljs.core","row":9229},{"arglist-strs":["[& maps]"],"doc":"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.","end-row":9240,"filename":"cljs/core.cljs","name":"merge","ns":"cljs.core","row":9234},{"arglist-strs":["[f & maps]"],"doc":"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).","end-row":9256,"filename":"cljs/core.cljs","name":"merge-with","ns":"cljs.core","row":9242},{"arglist-strs":["[map keyseq]"],"doc":"Returns a map containing only those entries in map whose key is in keys","end-row":9270,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"select-keys","ns":"cljs.core","row":9258},{"end-row":9274,"filename":"cljs/core.cljs","name":"TransientHashSet","ns":"cljs.core","row":9274},{"end-row":9284,"filename":"cljs/core.cljs","name":"HashSetIter","ns":"cljs.core","row":9276},{"arglist-strs":["[iter]"],"end-row":9284,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->HashSetIter","ns":"cljs.core","row":9276},{"end-row":9370,"filename":"cljs/core.cljs","name":"PersistentHashSet","ns":"cljs.core","row":9286},{"arglist-strs":["[meta hash-map __hash]"],"end-row":9370,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->PersistentHashSet","ns":"cljs.core","row":9286},{"end-row":9445,"filename":"cljs/core.cljs","name":"TransientHashSet","ns":"cljs.core","row":9410},{"arglist-strs":["[transient-map]"],"end-row":9445,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->TransientHashSet","ns":"cljs.core","row":9410},{"end-row":9541,"filename":"cljs/core.cljs","name":"PersistentTreeSet","ns":"cljs.core","row":9447},{"arglist-strs":["[meta tree-map __hash]"],"end-row":9541,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->PersistentTreeSet","ns":"cljs.core","row":9447},{"arglist-strs":["[iseq]"],"end-row":9552,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"set-from-indexed-seq","ns":"cljs.core","row":9548},{"arglist-strs":["[coll]"],"doc":"Returns a set of the distinct elements of coll.","end-row":9571,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"set","ns":"cljs.core","row":9554},{"arglist-strs":["[]","[& keys]"],"doc":"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.","end-row":9577,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"hash-set","ns":"cljs.core","row":9573},{"arglist-strs":["[& keys]"],"doc":"Returns a new sorted set with supplied keys.","end-row":9582,"filename":"cljs/core.cljs","name":"sorted-set","ns":"cljs.core","row":9579},{"arglist-strs":["[comparator & keys]"],"doc":"Returns a new sorted set with supplied keys, using the supplied comparator.","end-row":9589,"filename":"cljs/core.cljs","name":"sorted-set-by","ns":"cljs.core","row":9584},{"arglist-strs":["[smap]","[smap coll]"],"doc":"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.","end-row":9606,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"replace","ns":"cljs.core","row":9591},{"arglist-strs":["[]","[coll]"],"doc":"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.","end-row":9631,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"distinct","ns":"cljs.core","row":9608},{"arglist-strs":["[s]"],"doc":"Return a seq of all but the last item in coll, in linear time","end-row":9640,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"butlast","ns":"cljs.core","row":9634},{"arglist-strs":["[x]"],"doc":"Returns the name String of a string, symbol or keyword.","end-row":9649,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"name","ns":"cljs.core","row":9642},{"arglist-strs":["[keys vals]"],"doc":"Returns a map with the keys mapped to the corresponding vals.","end-row":9661,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"zipmap","ns":"cljs.core","row":9651},{"arglist-strs":["[k x]","[k x y]","[k x y & more]"],"doc":"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.","end-row":9670,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"max-key","ns":"cljs.core","row":9663},{"arglist-strs":["[k x]","[k x y]","[k x y & more]"],"doc":"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.","end-row":9679,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"min-key","ns":"cljs.core","row":9672},{"end-row":9687,"filename":"cljs/core.cljs","name":"ArrayList","ns":"cljs.core","row":9681},{"arglist-strs":["[arr]"],"end-row":9687,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"->ArrayList","ns":"cljs.core","row":9681},{"arglist-strs":["[]"],"end-row":9690,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"array-list","ns":"cljs.core","row":9689},{"arglist-strs":["[n]","[n coll]","[n step coll]"],"doc":"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.","end-row":9721,"filename":"cljs/core.cljs","fixed-arities":[1,3,2],"name":"partition-all","ns":"cljs.core","row":9692},{"arglist-strs":["[pred]","[pred coll]"],"doc":"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.","end-row":9740,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"take-while","ns":"cljs.core","row":9723},{"arglist-strs":["[sc test key]"],"end-row":9746,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"mk-bound-fn","ns":"cljs.core","row":9742},{"arglist-strs":["[sc test key]","[sc start-test start-key end-test end-key]"],"doc":"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true","end-row":9761,"filename":"cljs/core.cljs","fixed-arities":[3,5],"name":"subseq","ns":"cljs.core","row":9748},{"arglist-strs":["[sc test key]","[sc start-test start-key end-test end-key]"],"doc":"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true","end-row":9776,"filename":"cljs/core.cljs","fixed-arities":[3,5],"name":"rsubseq","ns":"cljs.core","row":9763},{"end-row":9797,"filename":"cljs/core.cljs","name":"IntegerRangeChunk","ns":"cljs.core","row":9778},{"arglist-strs":["[start step count]"],"end-row":9797,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->IntegerRangeChunk","ns":"cljs.core","row":9778},{"end-row":9808,"filename":"cljs/core.cljs","name":"RangeIterator","ns":"cljs.core","row":9799},{"arglist-strs":["[i end step]"],"end-row":9808,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"->RangeIterator","ns":"cljs.core","row":9799},{"end-row":9922,"filename":"cljs/core.cljs","name":"IntegerRange","ns":"cljs.core","row":9810},{"arglist-strs":["[meta start end step chunk chunk-next __hash]"],"end-row":9922,"filename":"cljs/core.cljs","fixed-arities":[7],"name":"->IntegerRange","ns":"cljs.core","row":9810},{"end-row":10029,"filename":"cljs/core.cljs","name":"Range","ns":"cljs.core","row":9926},{"arglist-strs":["[meta start end step chunk chunk-next __hash]"],"end-row":10029,"filename":"cljs/core.cljs","fixed-arities":[7],"name":"->Range","ns":"cljs.core","row":9926},{"arglist-strs":["[]","[end]","[start end]","[start end step]"],"doc":"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.","end-row":10059,"filename":"cljs/core.cljs","fixed-arities":[0,1,3,2],"name":"range","ns":"cljs.core","row":10033},{"arglist-strs":["[n]","[n coll]"],"doc":"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.","end-row":10080,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"take-nth","ns":"cljs.core","row":10061},{"arglist-strs":["[pred coll]"],"doc":"Returns a vector of [(take-while pred coll) (drop-while pred coll)]","end-row":10085,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"split-with","ns":"cljs.core","row":10082},{"arglist-strs":["[f]","[f coll]"],"doc":"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.","end-row":10126,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"partition-by","ns":"cljs.core","row":10087},{"arglist-strs":["[coll]"],"doc":"Returns a map from distinct items in coll to the number of times\n  they appear.","end-row":10135,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"frequencies","ns":"cljs.core","row":10128},{"arglist-strs":["[f coll]","[f init coll]"],"doc":"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.","end-row":10151,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"reductions","ns":"cljs.core","row":10137},{"arglist-strs":["[f]","[f g]","[f g h]","[f g h & fs]"],"doc":"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]","end-row":10187,"filename":"cljs/core.cljs","fixed-arities":[1,3,2],"name":"juxt","ns":"cljs.core","row":10153},{"arglist-strs":["[coll]","[n coll]"],"doc":"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.","end-row":10200,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"dorun","ns":"cljs.core","row":10189},{"arglist-strs":["[coll]","[n coll]"],"doc":"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.","end-row":10214,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"doall","ns":"cljs.core","row":10202},{"arglist-strs":["[x]"],"doc":"Returns true if x is a JavaScript RegExp instance.","end-row":10221,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"regexp?","ns":"cljs.core","row":10218},{"arglist-strs":["[re s]"],"doc":"Returns the result of (re-find re s) if re fully matches s.","end-row":10233,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"re-matches","ns":"cljs.core","row":10223},{"arglist-strs":["[re s]"],"doc":"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.","end-row":10248,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"re-find","ns":"cljs.core","row":10236},{"arglist-strs":["[re s]"],"end-row":10261,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"re-seq*","ns":"cljs.core","private":true,"row":10250},{"arglist-strs":["[re s]"],"doc":"Returns a lazy sequence of successive matches of re in s.","end-row":10268,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"re-seq","ns":"cljs.core","row":10263},{"arglist-strs":["[s]"],"doc":"Returns an instance of RegExp which has compiled the provided string.","end-row":10279,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"re-pattern","ns":"cljs.core","row":10270},{"arglist-strs":["[writer print-one begin sep end opts coll]"],"end-row":10304,"filename":"cljs/core.cljs","fixed-arities":[7],"name":"pr-sequential-writer","ns":"cljs.core","row":10283},{"arglist-strs":["[writer & ss]"],"end-row":10308,"filename":"cljs/core.cljs","name":"write-all","ns":"cljs.core","row":10306},{"arglist-strs":["[x]"],"end-row":10314,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"string-print","ns":"cljs.core","row":10310},{"arglist-strs":["[]"],"end-row":10317,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"flush","ns":"cljs.core","row":10316},{"end-row":10327,"filename":"cljs/core.cljs","name":"char-escapes","ns":"cljs.core","private":true,"row":10319},{"arglist-strs":["[s]"],"end-row":10334,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"quote-string","ns":"cljs.core","private":true,"row":10329},{"end-row":10336,"filename":"cljs/core.cljs","name":"print-map","ns":"cljs.core","row":10336},{"arglist-strs":["[opts obj]"],"end-row":10341,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"print-meta?","ns":"cljs.core","row":10338},{"arglist-strs":["[obj writer opts]"],"end-row":10433,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pr-writer-impl","ns":"cljs.core","private":true,"row":10343},{"fixed-arities":[3],"end-row":10442,"private":true,"ns":"cljs.core","name":"pr-writer","filename":"cljs/core.cljs","arglist-strs":["[obj writer opts]"],"doc":"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.","row":10435},{"arglist-strs":["[objs writer opts]"],"end-row":10448,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pr-seq-writer","ns":"cljs.core","row":10444},{"arglist-strs":["[objs opts]"],"end-row":10455,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"pr-sb-with-opts","ns":"cljs.core","private":true,"row":10450},{"arglist-strs":["[objs opts]"],"doc":"Prints a sequence of objects to a string, observing all the\n  options given in opts","end-row":10463,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"pr-str-with-opts","ns":"cljs.core","row":10457},{"arglist-strs":["[objs opts]"],"doc":"Same as pr-str-with-opts followed by (newline)","end-row":10472,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"prn-str-with-opts","ns":"cljs.core","row":10465},{"fixed-arities":[2],"end-row":10478,"private":true,"ns":"cljs.core","name":"pr-with-opts","filename":"cljs/core.cljs","arglist-strs":["[objs opts]"],"doc":"Prints a sequence of objects using string-print, observing all\n  the options given in opts","row":10474},{"arglist-strs":["[]","[opts]"],"doc":"Prints a newline using *print-fn*","end-row":10486,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"newline","ns":"cljs.core","row":10480},{"arglist-strs":["[& objs]"],"doc":"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.","end-row":10491,"filename":"cljs/core.cljs","name":"pr-str","ns":"cljs.core","row":10488},{"arglist-strs":["[& objs]"],"doc":"Same as pr-str followed by (newline)","end-row":10496,"filename":"cljs/core.cljs","name":"prn-str","ns":"cljs.core","row":10493},{"arglist-strs":["[& objs]"],"doc":"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader","end-row":10504,"filename":"cljs/core.cljs","name":"pr","ns":"cljs.core","row":10498},{"arglist-strs":["[& objs]"],"doc":"Prints the object(s) using string-print.\n  print and println produce output for human consumption.","end-row":10511,"filename":"cljs/core.cljs","fixed-arities":[],"name":"print","ns":"cljs.core","row":10506},{"arglist-strs":["[& objs]"],"doc":"print to a string, returning it","end-row":10516,"filename":"cljs/core.cljs","name":"print-str","ns":"cljs.core","row":10513},{"arglist-strs":["[& objs]"],"doc":"Same as print followed by (newline)","end-row":10523,"filename":"cljs/core.cljs","name":"println","ns":"cljs.core","row":10518},{"arglist-strs":["[& objs]"],"doc":"println to a string, returning it","end-row":10528,"filename":"cljs/core.cljs","name":"println-str","ns":"cljs.core","row":10525},{"arglist-strs":["[& objs]"],"doc":"Same as pr followed by (newline).","end-row":10535,"filename":"cljs/core.cljs","name":"prn","ns":"cljs.core","row":10530},{"arglist-strs":["[named]"],"end-row":10541,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"strip-ns","ns":"cljs.core","private":true,"row":10537},{"fixed-arities":[1],"end-row":10557,"private":true,"ns":"cljs.core","name":"lift-ns","filename":"cljs/core.cljs","arglist-strs":["[m]"],"doc":"Returns [lifted-ns lifted-map] or nil if m can't be lifted.","row":10543},{"arglist-strs":["[prefix m print-one writer opts]"],"end-row":10567,"filename":"cljs/core.cljs","fixed-arities":[5],"name":"print-prefix-map","ns":"cljs.core","row":10559},{"arglist-strs":["[m print-one writer opts]"],"end-row":10574,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"print-map","ns":"cljs.core","row":10569},{"arglist-strs":["[iref f & args]"],"doc":"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects","end-row":10753,"filename":"cljs/core.cljs","name":"alter-meta!","ns":"cljs.core","row":10746},{"arglist-strs":["[iref m]"],"doc":"Atomically resets the metadata for an atom","end-row":10758,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"reset-meta!","ns":"cljs.core","row":10755},{"arglist-strs":["[iref key f]"],"doc":"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1","end-row":10781,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"add-watch","ns":"cljs.core","row":10760},{"arglist-strs":["[iref key]"],"doc":"Removes a watch (set by add-watch) from a reference","end-row":10787,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"remove-watch","ns":"cljs.core","row":10783},{"end-row":10793,"filename":"cljs/core.cljs","name":"gensym_counter","ns":"cljs.core","row":10791},{"arglist-strs":["[]","[prefix-string]"],"doc":"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.","end-row":10803,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"gensym","ns":"cljs.core","row":10795},{"end-row":10823,"filename":"cljs/core.cljs","name":"Delay","ns":"cljs.core","row":10807},{"arglist-strs":["[f value]"],"end-row":10823,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->Delay","ns":"cljs.core","row":10807},{"arglist-strs":["[x]"],"doc":"returns true if x is a Delay created with delay","end-row":10827,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"delay?","ns":"cljs.core","row":10825},{"arglist-strs":["[x]"],"doc":"If x is a Delay, returns the (possibly cached) value of its expression, else returns x","end-row":10834,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"force","ns":"cljs.core","row":10829},{"arglist-strs":["[x]"],"doc":"Returns true if a value has been produced for a delay or lazy sequence.","end-row":10839,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"realized?","ns":"cljs.core","row":10836},{"arglist-strs":["[rf]"],"end-row":10846,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"preserving-reduced","ns":"cljs.core","private":true,"row":10841},{"arglist-strs":["[rf]"],"doc":"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.","end-row":10858,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"cat","ns":"cljs.core","row":10848},{"arglist-strs":["[pred]","[pred retf]"],"doc":"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.","end-row":10882,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"halt-when","ns":"cljs.core","row":10860},{"arglist-strs":["[]","[coll]"],"doc":"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.","end-row":10899,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"dedupe","ns":"cljs.core","row":10884},{"end-row":10901,"filename":"cljs/core.cljs","name":"rand","ns":"cljs.core","row":10901},{"arglist-strs":["[prob]","[prob coll]"],"doc":"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.","end-row":10909,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"random-sample","ns":"cljs.core","row":10903},{"end-row":10937,"filename":"cljs/core.cljs","name":"Eduction","ns":"cljs.core","row":10911},{"arglist-strs":["[xform coll]"],"end-row":10937,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->Eduction","ns":"cljs.core","row":10911},{"arglist-strs":["[& xforms]"],"doc":"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.","end-row":10948,"filename":"cljs/core.cljs","name":"eduction","ns":"cljs.core","row":10941},{"arglist-strs":["[proc coll]"],"doc":"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil","end-row":10955,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"run!","ns":"cljs.core","row":10950},{"arglist-strs":["[step & {:keys [somef vf kf initk] :or {vf identity kf identity somef some? initk nil}}]"],"doc":"Creates a seqable/reducible via repeated calls to step,\n  a function of some (continuation token) 'k'. The first call to step\n  will be passed initk, returning 'ret'. Iff (somef ret) is true,\n  (vf ret) will be included in the iteration, else iteration will\n  terminate and vf/kf will not be called. If (kf ret) is non-nil it\n  will be passed to the next step call, else iteration will terminate.\n  This can be used e.g. to consume APIs that return paginated or batched data.\n   step - (possibly impure) fn of 'k' -> 'ret'\n   :somef - fn of 'ret' -> logical true/false, default 'some?'\n   :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n   :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n   :initk - the first value passed to step, default 'nil'\n  It is presumed that step with non-initk is unreproducible/non-idempotent.\n  If step with initk is unreproducible it is on the consumer to not consume twice.","end-row":10998,"filename":"cljs/core.cljs","name":"iteration","ns":"cljs.core","row":10957},{"end-row":11003,"filename":"cljs/core.cljs","name":"IEncodeJS","ns":"cljs.core","row":11000},{"arglist-strs":["[x]"],"doc":"Recursively transforms clj values to JavaScript","end-row":11001,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-clj->js","ns":"cljs.core","row":11001},{"arglist-strs":["[x]"],"doc":"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)","end-row":11003,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-key->js","ns":"cljs.core","row":11002},{"end-row":11005,"filename":"cljs/core.cljs","name":"clj->js","ns":"cljs.core","row":11005},{"arglist-strs":["[k]","[k primitive-fn]"],"end-row":11016,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"key->js","ns":"cljs.core","row":11007},{"arglist-strs":["[x & {:keys [keyword-fn] :or {keyword-fn name} :as options}]"],"doc":"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.","end-row":11043,"filename":"cljs/core.cljs","name":"clj->js","ns":"cljs.core","row":11018},{"end-row":11047,"filename":"cljs/core.cljs","name":"IEncodeClojure","ns":"cljs.core","row":11046},{"arglist-strs":["[x options]"],"doc":"Transforms JavaScript values to Clojure","end-row":11047,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-js->clj","ns":"cljs.core","row":11047},{"arglist-strs":["[x]","[x & opts]"],"doc":"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.","end-row":11082,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"js->clj","ns":"cljs.core","row":11049},{"arglist-strs":["[f]"],"doc":"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.","end-row":11097,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"memoize","ns":"cljs.core","row":11084},{"arglist-strs":["[f]","[f & args]"],"doc":"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.","end-row":11113,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"trampoline","ns":"cljs.core","row":11099},{"arglist-strs":["[]","[n]"],"doc":"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).","end-row":11119,"filename":"cljs/core.cljs","fixed-arities":[0,1],"name":"rand","ns":"cljs.core","row":11115},{"arglist-strs":["[n]"],"doc":"Returns a random integer between 0 (inclusive) and n (exclusive).","end-row":11123,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"rand-int","ns":"cljs.core","row":11121},{"arglist-strs":["[coll]"],"doc":"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.","end-row":11130,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"rand-nth","ns":"cljs.core","row":11125},{"arglist-strs":["[f coll]"],"doc":"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.","end-row":11142,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"group-by","ns":"cljs.core","row":11132},{"arglist-strs":["[]"],"doc":"Creates a hierarchy object for use with derive, isa? etc.","end-row":11146,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"make-hierarchy","ns":"cljs.core","row":11144},{"end-row":11151,"filename":"cljs/core.cljs","name":"-global-hierarchy","ns":"cljs.core","private":true,"row":11148},{"arglist-strs":["[]"],"end-row":11156,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"get-global-hierarchy","ns":"cljs.core","private":true,"row":11153},{"arglist-strs":["[f & args]"],"end-row":11159,"filename":"cljs/core.cljs","name":"swap-global-hierarchy!","ns":"cljs.core","private":true,"row":11158},{"arglist-strs":["[child parent]","[h child parent]"],"doc":"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy","end-row":11179,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"isa?","ns":"cljs.core","row":11161},{"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy","end-row":11187,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"parents","ns":"cljs.core","row":11181},{"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy","end-row":11195,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"ancestors","ns":"cljs.core","row":11189},{"arglist-strs":["[tag]","[h tag]"],"doc":"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.","end-row":11204,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"descendants","ns":"cljs.core","row":11197},{"arglist-strs":["[tag parent]","[h tag parent]"],"doc":"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.","end-row":11238,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"derive","ns":"cljs.core","row":11206},{"arglist-strs":["[tag parent]","[h tag parent]"],"doc":"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.","end-row":11259,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"underive","ns":"cljs.core","row":11240},{"arglist-strs":["[method-cache method-table cached-hierarchy hierarchy]"],"end-row":11264,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"reset-cache","ns":"cljs.core","private":true,"row":11261},{"arglist-strs":["[x y prefer-table]"],"end-row":11282,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"prefers*","ns":"cljs.core","private":true,"row":11266},{"arglist-strs":["[x y prefer-table hierarchy]"],"end-row":11286,"filename":"cljs/core.cljs","fixed-arities":[4],"name":"dominates","ns":"cljs.core","private":true,"row":11284},{"arglist-strs":["[name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val]"],"end-row":11314,"filename":"cljs/core.cljs","fixed-arities":[8],"name":"find-and-cache-best-method","ns":"cljs.core","private":true,"row":11288},{"end-row":11325,"filename":"cljs/core.cljs","name":"IMultiFn","ns":"cljs.core","row":11316},{"arglist-strs":["[mf]"],"end-row":11317,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-reset","ns":"cljs.core","row":11317},{"arglist-strs":["[mf dispatch-val method]"],"end-row":11318,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-add-method","ns":"cljs.core","row":11318},{"arglist-strs":["[mf dispatch-val]"],"end-row":11319,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-remove-method","ns":"cljs.core","row":11319},{"arglist-strs":["[mf dispatch-val dispatch-val-y]"],"end-row":11320,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"-prefer-method","ns":"cljs.core","row":11320},{"arglist-strs":["[mf dispatch-val]"],"end-row":11321,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"-get-method","ns":"cljs.core","row":11321},{"arglist-strs":["[mf]"],"end-row":11322,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-methods","ns":"cljs.core","row":11322},{"arglist-strs":["[mf]"],"end-row":11323,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-prefers","ns":"cljs.core","row":11323},{"arglist-strs":["[mf]"],"end-row":11324,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-default-dispatch-val","ns":"cljs.core","row":11324},{"arglist-strs":["[mf]"],"end-row":11325,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"-dispatch-fn","ns":"cljs.core","row":11325},{"arglist-strs":["[name dispatch-val]"],"end-row":11328,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"throw-no-method-error","ns":"cljs.core","private":true,"row":11327},{"end-row":11513,"filename":"cljs/core.cljs","name":"MultiFn","ns":"cljs.core","row":11330},{"arglist-strs":["[name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]"],"end-row":11513,"filename":"cljs/core.cljs","fixed-arities":[8],"name":"->MultiFn","ns":"cljs.core","row":11330},{"arglist-strs":["[multifn]"],"doc":"Removes all of the methods of multimethod.","end-row":11518,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"remove-all-methods","ns":"cljs.core","row":11515},{"arglist-strs":["[multifn dispatch-val]"],"doc":"Removes the method of multimethod associated with dispatch-value.","end-row":11523,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"remove-method","ns":"cljs.core","row":11520},{"arglist-strs":["[multifn dispatch-val-x dispatch-val-y]"],"doc":"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict","end-row":11529,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"prefer-method","ns":"cljs.core","row":11525},{"arglist-strs":["[multifn]"],"doc":"Given a multimethod, returns a map of dispatch values -> dispatch fns","end-row":11533,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"methods","ns":"cljs.core","row":11531},{"arglist-strs":["[multifn dispatch-val]"],"doc":"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default","end-row":11538,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"get-method","ns":"cljs.core","row":11535},{"arglist-strs":["[multifn]"],"doc":"Given a multimethod, returns a map of preferred value -> set of other values","end-row":11542,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"prefers","ns":"cljs.core","row":11540},{"arglist-strs":["[multifn]"],"doc":"Given a multimethod, return its default-dispatch-val.","end-row":11546,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"default-dispatch-val","ns":"cljs.core","row":11544},{"arglist-strs":["[multifn]"],"doc":"Given a multimethod, return its dispatch-fn.","end-row":11550,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"dispatch-fn","ns":"cljs.core","row":11548},{"doc":"A marker protocol for UUIDs","end-row":11553,"filename":"cljs/core.cljs","name":"IUUID","ns":"cljs.core","row":11553},{"end-row":11581,"filename":"cljs/core.cljs","name":"UUID","ns":"cljs.core","row":11555},{"arglist-strs":["[uuid __hash]"],"end-row":11581,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->UUID","ns":"cljs.core","row":11555},{"arglist-strs":["[s]"],"doc":"Returns a UUID consistent with the string s.","end-row":11587,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"uuid","ns":"cljs.core","row":11583},{"arglist-strs":["[]"],"doc":"Returns a pseudo-randomly generated UUID instance (i.e. type 4).","end-row":11602,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"random-uuid","ns":"cljs.core","row":11589},{"arglist-strs":["[x]"],"doc":"Return true if x is a UUID.","end-row":11606,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"uuid?","ns":"cljs.core","row":11604},{"arglist-strs":["[obj writer opts]"],"end-row":11619,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"pr-writer-ex-info","ns":"cljs.core","private":true,"row":11610},{"arglist-strs":["[message data cause]"],"end-row":11637,"filename":"cljs/core.cljs","fixed-arities":[3],"name":"ExceptionInfo","ns":"cljs.core","row":11621},{"arglist-strs":["[msg data]","[msg data cause]"],"doc":"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.","end-row":11655,"filename":"cljs/core.cljs","fixed-arities":[3,2],"name":"ex-info","ns":"cljs.core","row":11650},{"arglist-strs":["[ex]"],"doc":"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.","end-row":11662,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ex-data","ns":"cljs.core","row":11657},{"arglist-strs":["[ex]"],"doc":"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.","end-row":11669,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ex-message","ns":"cljs.core","row":11664},{"arglist-strs":["[ex]"],"doc":"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.","end-row":11677,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ex-cause","ns":"cljs.core","row":11671},{"arglist-strs":["[pred]"],"doc":"Returns an JavaScript compatible comparator based upon pred.","end-row":11683,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"comparator","ns":"cljs.core","row":11679},{"arglist-strs":["[x]"],"doc":"Returns true if x names a special form","end-row":11691,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"special-symbol?","ns":"cljs.core","row":11685},{"arglist-strs":["[v]"],"doc":"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception","end-row":11700,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"test","ns":"cljs.core","row":11693},{"end-row":11731,"filename":"cljs/core.cljs","name":"TaggedLiteral","ns":"cljs.core","row":11703},{"arglist-strs":["[tag form]"],"end-row":11731,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->TaggedLiteral","ns":"cljs.core","row":11703},{"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a tagged literal","end-row":11736,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"tagged-literal?","ns":"cljs.core","row":11733},{"arglist-strs":["[tag form]"],"doc":"Construct a data representation of a tagged literal from a\n  tag symbol and a form.","end-row":11743,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"tagged-literal","ns":"cljs.core","row":11738},{"end-row":11761,"filename":"cljs/core.cljs","name":"js-reserved-arr","ns":"cljs.core","private":true,"row":11745},{"end-row":11765,"filename":"cljs/core.cljs","name":"js-reserved","ns":"cljs.core","row":11763},{"arglist-strs":["[x]"],"end-row":11772,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"js-reserved?","ns":"cljs.core","private":true,"row":11767},{"arglist-strs":["[]"],"end-row":11788,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"demunge-pattern","ns":"cljs.core","private":true,"row":11774},{"arglist-strs":["[name]"],"end-row":11800,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"munge-str","ns":"cljs.core","private":true,"row":11790},{"arglist-strs":["[name]"],"end-row":11810,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"munge","ns":"cljs.core","row":11802},{"arglist-strs":["[munged-name]"],"end-row":11827,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"demunge-str","ns":"cljs.core","private":true,"row":11812},{"arglist-strs":["[name]"],"end-row":11834,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"demunge","ns":"cljs.core","row":11829},{"end-row":11837,"filename":"cljs/core.cljs","name":"tapset","ns":"cljs.core","private":true,"row":11836},{"arglist-strs":["[]"],"end-row":11841,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"maybe-init-tapset","ns":"cljs.core","private":true,"row":11839},{"arglist-strs":["[f]"],"doc":"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap","end-row":11849,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"add-tap","ns":"cljs.core","row":11843},{"arglist-strs":["[f]"],"doc":"Remove f from the tap set.","end-row":11856,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"remove-tap","ns":"cljs.core","row":11851},{"arglist-strs":["[x]"],"doc":"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.","end-row":11867,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"tap>","ns":"cljs.core","row":11858},{"arglist-strs":["[m f]"],"doc":"m f => {k (f v) ...}\n  Given a map m and a function f of 1-argument, returns a new map where the keys of m\n  are mapped to result of applying f to the corresponding values of m.","end-row":11882,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"update-vals","ns":"cljs.core","row":11869},{"arglist-strs":["[m f]"],"doc":"m f => {(f k) v ...}\n  Given a map m and a function f of 1-argument, returns a new map whose\n  keys are the result of applying f to the keys of m, mapped to the\n  corresponding values of m.\n  f must return a unique key for each key of m, else the behavior is undefined.","end-row":11896,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"update-keys","ns":"cljs.core","row":11884},{"fixed-arities":[2],"end-row":11904,"private":true,"ns":"cljs.core","name":"ns-lookup","filename":"cljs/core.cljs","arglist-strs":["[ns-obj k]"],"doc":"Bootstrap only.","row":11901},{"end-row":11925,"filename":"cljs/core.cljs","name":"Namespace","ns":"cljs.core","row":11907},{"arglist-strs":["[obj name]"],"end-row":11925,"filename":"cljs/core.cljs","fixed-arities":[2],"name":"->Namespace","ns":"cljs.core","row":11907},{"doc":"Bootstrap only.","end-row":11929,"filename":"cljs/core.cljs","name":"NS_CACHE","ns":"cljs.core","row":11927},{"fixed-arities":[2],"end-row":11937,"private":true,"ns":"cljs.core","name":"find-ns-obj*","filename":"cljs/core.cljs","arglist-strs":["[ctxt xs]"],"doc":"Bootstrap only.","row":11931},{"arglist-strs":["[ns]"],"doc":"Bootstrap only.","end-row":11960,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"find-ns-obj","ns":"cljs.core","row":11939},{"arglist-strs":["[sym]"],"doc":"Returns a map of the intern mappings for the namespace.\n  Bootstrap only.","end-row":11973,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ns-interns*","ns":"cljs.core","row":11962},{"arglist-strs":["[sym]","[sym ns-obj]"],"doc":"Create a new namespace named by the symbol. Bootstrap only.","end-row":11980,"filename":"cljs/core.cljs","fixed-arities":[1,2],"name":"create-ns","ns":"cljs.core","row":11975},{"arglist-strs":["[ns]"],"doc":"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.","end-row":11995,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"find-ns","ns":"cljs.core","row":11982},{"arglist-strs":["[ns]"],"doc":"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.","end-row":12014,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"find-macros-ns","ns":"cljs.core","row":11997},{"arglist-strs":["[ns-obj]"],"doc":"Returns the name of the namespace, a Namespace object.\n  Bootstrap only.","end-row":12020,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"ns-name","ns":"cljs.core","row":12016},{"arglist-strs":["[x]"],"doc":"Returns true x is a goog.Uri instance.","end-row":12026,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"uri?","ns":"cljs.core","row":12022},{"arglist-strs":["[val]"],"doc":"Returns true if num is NaN, else false","end-row":12031,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"NaN?","ns":"cljs.core","row":12028},{"fixed-arities":[1],"end-row":12036,"private":true,"ns":"cljs.core","name":"parsing-err","filename":"cljs/core.cljs","arglist-strs":["[val]"],"doc":"Construct message for parsing for non-string parsing error","row":12033},{"arglist-strs":["[s]"],"doc":"Parse string of decimal digits with optional leading -/+ and return an\n  integer value, or nil if parse fails","end-row":12048,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"parse-long","ns":"cljs.core","row":12038},{"arglist-strs":["[s]"],"doc":"Parse string with floating point components and return a floating point value,\n  or nil if parse fails.\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-","end-row":12062,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"parse-double","ns":"cljs.core","row":12050},{"end-row":12065,"filename":"cljs/core.cljs","name":"uuid-regex","ns":"cljs.core","private":true,"row":12064},{"arglist-strs":["[s]"],"doc":"Parse a string representing a UUID and return a UUID instance,\n  or nil if parse fails.\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--","end-row":12075,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"parse-uuid","ns":"cljs.core","row":12067},{"arglist-strs":["[s]"],"doc":"Parse strings \"true\" or \"false\" and return a boolean, or nil if invalid. Note that this explicitly\n  excludes strings with different cases, or space characters.","end-row":12086,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"parse-boolean","ns":"cljs.core","row":12077},{"arglist-strs":["[]"],"end-row":12106,"filename":"cljs/core.cljs","fixed-arities":[0],"name":"maybe-enable-print!","ns":"cljs.core","private":true,"row":12088},{"doc":"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.","end-row":12116,"filename":"cljs/core.cljs","name":"*eval*","ns":"cljs.core","row":12110},{"arglist-strs":["[form]"],"doc":"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core/*eval* for that environment.","end-row":12123,"filename":"cljs/core.cljs","fixed-arities":[1],"name":"eval","ns":"cljs.core","row":12118}]