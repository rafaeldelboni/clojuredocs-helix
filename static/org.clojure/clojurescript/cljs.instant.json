[{"end-row":20,"meta":{"private":true,"tag":"java.time.format.DateTimeFormatter"},"name-end-col":62,"name-end-row":17,"private":true,"name-row":17,"ns":"cljs.instant","name":"utc-format","defined-by":"clojure.core/def","filename":"cljs/instant.clj","col":1,"name-col":52,"end-col":64,"row":17},{"fixed-arities":[1],"end-row":23,"meta":null,"name-end-col":24,"name-end-row":22,"private":true,"name-row":22,"ns":"cljs.instant","name":"remove-last-char","defined-by":"clojure.core/defn-","filename":"cljs/instant.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[s]"],"row":22},{"fixed-arities":[2],"end-row":30,"meta":null,"name-end-col":21,"name-end-row":25,"private":true,"name-row":25,"ns":"cljs.instant","name":"print-instant","defined-by":"clojure.core/defn-","filename":"cljs/instant.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[instant w]"],"doc":"Print a java.time.Instant as RFC3339 timestamp, always in UTC.","row":25},{"fixed-arities":[10],"end-row":46,"meta":null,"name-end-col":25,"name-end-row":40,"private":true,"name-row":40,"ns":"cljs.instant","name":"construct-instant","defined-by":"clojure.core/defn-","filename":"cljs/instant.clj","col":1,"name-col":8,"end-col":97,"arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.time.Instant, which has nanosecond precision.","row":40},{"fixed-arities":[1],"end-row":54,"meta":null,"name-end-col":27,"name-end-row":48,"name-row":48,"ns":"cljs.instant","name":"read-instant-instant","defined-by":"clojure.core/defn","filename":"cljs/instant.clj","col":1,"name-col":7,"end-col":64,"arglist-strs":["[cs]"],"doc":"To read an instant as a java.time.Instant, bind *data-readers* to a\n  map with this var as the value for the 'inst key. Instant preserves\n  fractional seconds with nanosecond precision. The timezone offset will\n  be used to convert into UTC.","row":48}]