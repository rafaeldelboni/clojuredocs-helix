[{"end-row":17,"filename":"cljs/spec/test/alpha.cljc","lang":"clj","name":"instrumented-vars","ns":"cljs.spec.test.alpha","private":true,"row":17},{"fixed-arities":[1],"end-row":23,"private":true,"ns":"cljs.spec.test.alpha","name":"collectionize","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[x]"],"row":19},{"fixed-arities":[1],"end-row":34,"private":true,"ns":"cljs.spec.test.alpha","name":"enumerate-namespace*","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"row":25},{"fixed-arities":[1],"end-row":40,"ns":"cljs.spec.test.alpha","name":"enumerate-namespace","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[ns-sym-or-syms]"],"doc":"Given a symbol naming an ns, or a collection of such symbols,\nreturns the set of all symbols naming vars in those nses.","row":36},{"fixed-arities":[1],"end-row":44,"private":true,"ns":"cljs.spec.test.alpha","name":"fn-spec-name?","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[s]"],"row":42},{"end-row":58,"ns":"cljs.spec.test.alpha","name":"with-instrument-disabled","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Disables instrument's checking of calls, within a scope.","row":46},{"fixed-arities":[2],"end-row":72,"ns":"cljs.spec.test.alpha","name":"instrument-1","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s] opts]"],"row":60},{"fixed-arities":[1],"end-row":81,"ns":"cljs.spec.test.alpha","name":"unstrument-1","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s]]"],"row":74},{"fixed-arities":[1],"end-row":96,"private":true,"ns":"cljs.spec.test.alpha","name":"sym-or-syms->syms","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"row":83},{"fixed-arities":[1],"end-row":107,"private":true,"ns":"cljs.spec.test.alpha","name":"form->sym-or-syms","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"doc":"Helper for extracting a symbol or symbols from a (potentially\n  user-supplied) quoted form. In the case that the form has ::no-eval meta, we\n  know it was generated by us and we directly extract the result, assuming the\n  shape of the form. This avoids applying eval to extremely large forms in the\n  latter case.","row":98},{"fixed-arities":[0,1,2],"end-row":167,"ns":"cljs.spec.test.alpha","name":"instrument","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[xs]","[sym-or-syms opts]"],"doc":"Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n  :spec     a map from var-name symbols to override specs\n  :stub     a set of var-name symbols to be replaced by stubs\n  :gen      a map from spec names to generator overrides\n  :replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.","row":109},{"fixed-arities":[0,1],"end-row":188,"ns":"cljs.spec.test.alpha","name":"unstrument","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[sym-or-syms]"],"doc":"Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.","row":169},{"fixed-arities":[4],"end-row":222,"ns":"cljs.spec.test.alpha","name":"check-1","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s :as qs] f spec opts]"],"row":192},{"fixed-arities":[3,2],"end-row":232,"ns":"cljs.spec.test.alpha","name":"check-fn","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f spec]","[f spec opts]"],"doc":"Runs generative tests for fn f using spec and opts. See\n'check' for options and return.","row":224},{"fixed-arities":[0],"end-row":236,"private":true,"ns":"cljs.spec.test.alpha","name":"registry-ref","lang":"clj","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[]"],"row":234},{"arglist-strs":["[]","[opts]"],"end-row":244,"filename":"cljs/spec/test/alpha.cljc","fixed-arities":[0,1],"lang":"clj","name":"checkable-syms*","ns":"cljs.spec.test.alpha","row":238},{"fixed-arities":[0,1],"end-row":256,"ns":"cljs.spec.test.alpha","name":"checkable-syms","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[opts]"],"doc":"Given an opts map as per check, returns the set of syms that\ncan be checked.","row":246},{"fixed-arities":[0,1,2],"end-row":309,"ns":"cljs.spec.test.alpha","name":"check","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[sym-or-syms]","[sym-or-syms opts]"],"doc":"Run generative tests for spec conformance on vars named by\nsym-or-syms, a symbol or collection of symbols. If sym-or-syms\nis not specified, check all checkable vars. If a symbol identifies a\nnamespace then all symbols in that namespace will be enumerated.\n\nThe opts map includes the following optional keys, where stc\naliases clojure.spec.test.check:\n\n::stc/opts  opts to flow through test.check/quick-check\n:gen        map from spec names to generator overrides\n\nThe ::stc/opts include :num-tests in addition to the keys\ndocumented by test.check. Generator overrides are passed to\nspec/gen when generating function args.\n\nReturns a lazy sequence of check result maps with the following\nkeys\n\n:spec       the spec tested\n:sym        optional symbol naming the var tested\n:failure    optional test failure\n::stc/ret   optional value returned by test.check/quick-check\n\nThe value for :failure can be any exception. Exceptions thrown by\nspec itself will have an ::s/failure value in ex-data:\n\n:check-failed   at least one checked return did not conform\n:no-args-spec   no :args spec provided\n:no-fn          no fn provided\n:no-fspec       no fspec provided\n:no-gen         unable to generate :args\n:instrument     invalid args detected by instrument\n","row":258},{"fixed-arities":[4],"end-row":322,"private":true,"ns":"cljs.spec.test.alpha","name":"maybe-setup-static-dispatch","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f ret conform! arity]"],"row":311},{"fixed-arities":[4],"end-row":329,"private":true,"ns":"cljs.spec.test.alpha","name":"setup-static-dispatches","lang":"clj","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f ret conform! max-arity]"],"row":324},{"end-row":17,"filename":"cljs/spec/test/alpha.cljc","lang":"cljs","name":"instrumented-vars","ns":"cljs.spec.test.alpha","private":true,"row":17},{"fixed-arities":[1],"end-row":23,"private":true,"ns":"cljs.spec.test.alpha","name":"collectionize","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[x]"],"row":19},{"fixed-arities":[1],"end-row":34,"private":true,"ns":"cljs.spec.test.alpha","name":"enumerate-namespace*","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"row":25},{"fixed-arities":[1],"end-row":40,"ns":"cljs.spec.test.alpha","name":"enumerate-namespace","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[ns-sym-or-syms]"],"doc":"Given a symbol naming an ns, or a collection of such symbols,\nreturns the set of all symbols naming vars in those nses.","row":36},{"fixed-arities":[1],"end-row":44,"private":true,"ns":"cljs.spec.test.alpha","name":"fn-spec-name?","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[s]"],"row":42},{"end-row":58,"ns":"cljs.spec.test.alpha","name":"with-instrument-disabled","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[& body]"],"doc":"Disables instrument's checking of calls, within a scope.","row":46},{"fixed-arities":[2],"end-row":72,"ns":"cljs.spec.test.alpha","name":"instrument-1","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s] opts]"],"row":60},{"fixed-arities":[1],"end-row":81,"ns":"cljs.spec.test.alpha","name":"unstrument-1","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s]]"],"row":74},{"fixed-arities":[1],"end-row":96,"private":true,"ns":"cljs.spec.test.alpha","name":"sym-or-syms->syms","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"row":83},{"fixed-arities":[1],"end-row":107,"private":true,"ns":"cljs.spec.test.alpha","name":"form->sym-or-syms","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[sym-or-syms]"],"doc":"Helper for extracting a symbol or symbols from a (potentially\n  user-supplied) quoted form. In the case that the form has ::no-eval meta, we\n  know it was generated by us and we directly extract the result, assuming the\n  shape of the form. This avoids applying eval to extremely large forms in the\n  latter case.","row":98},{"fixed-arities":[0,1,2],"end-row":167,"ns":"cljs.spec.test.alpha","name":"instrument","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[xs]","[sym-or-syms opts]"],"doc":"Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n  :spec     a map from var-name symbols to override specs\n  :stub     a set of var-name symbols to be replaced by stubs\n  :gen      a map from spec names to generator overrides\n  :replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.","row":109},{"fixed-arities":[0,1],"end-row":188,"ns":"cljs.spec.test.alpha","name":"unstrument","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[sym-or-syms]"],"doc":"Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.","row":169},{"fixed-arities":[4],"end-row":222,"ns":"cljs.spec.test.alpha","name":"check-1","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[[quote s :as qs] f spec opts]"],"row":192},{"fixed-arities":[3,2],"end-row":232,"ns":"cljs.spec.test.alpha","name":"check-fn","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f spec]","[f spec opts]"],"doc":"Runs generative tests for fn f using spec and opts. See\n'check' for options and return.","row":224},{"fixed-arities":[0],"end-row":236,"private":true,"ns":"cljs.spec.test.alpha","name":"registry-ref","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","arglist-strs":["[]"],"row":234},{"arglist-strs":["[]","[opts]"],"end-row":244,"filename":"cljs/spec/test/alpha.cljc","fixed-arities":[0,1],"lang":"cljs","name":"checkable-syms*","ns":"cljs.spec.test.alpha","row":238},{"fixed-arities":[0,1],"end-row":256,"ns":"cljs.spec.test.alpha","name":"checkable-syms","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[opts]"],"doc":"Given an opts map as per check, returns the set of syms that\ncan be checked.","row":246},{"fixed-arities":[0,1,2],"end-row":309,"ns":"cljs.spec.test.alpha","name":"check","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[]","[sym-or-syms]","[sym-or-syms opts]"],"doc":"Run generative tests for spec conformance on vars named by\nsym-or-syms, a symbol or collection of symbols. If sym-or-syms\nis not specified, check all checkable vars. If a symbol identifies a\nnamespace then all symbols in that namespace will be enumerated.\n\nThe opts map includes the following optional keys, where stc\naliases clojure.spec.test.check:\n\n::stc/opts  opts to flow through test.check/quick-check\n:gen        map from spec names to generator overrides\n\nThe ::stc/opts include :num-tests in addition to the keys\ndocumented by test.check. Generator overrides are passed to\nspec/gen when generating function args.\n\nReturns a lazy sequence of check result maps with the following\nkeys\n\n:spec       the spec tested\n:sym        optional symbol naming the var tested\n:failure    optional test failure\n::stc/ret   optional value returned by test.check/quick-check\n\nThe value for :failure can be any exception. Exceptions thrown by\nspec itself will have an ::s/failure value in ex-data:\n\n:check-failed   at least one checked return did not conform\n:no-args-spec   no :args spec provided\n:no-fn          no fn provided\n:no-fspec       no fspec provided\n:no-gen         unable to generate :args\n:instrument     invalid args detected by instrument\n","row":258},{"fixed-arities":[4],"end-row":322,"private":true,"ns":"cljs.spec.test.alpha","name":"maybe-setup-static-dispatch","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f ret conform! arity]"],"row":311},{"fixed-arities":[4],"end-row":329,"private":true,"ns":"cljs.spec.test.alpha","name":"setup-static-dispatches","lang":"cljs","filename":"cljs/spec/test/alpha.cljc","macro":true,"arglist-strs":["[f ret conform! max-arity]"],"row":324},{"arglist-strs":["[f coll]"],"end-row":31,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[2],"name":"distinct-by","ns":"cljs.spec.test.alpha","row":20},{"arglist-strs":["[x]"],"end-row":35,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"->sym","ns":"cljs.spec.test.alpha","row":33},{"doc":"if false, instrumented fns call straight through","end-row":41,"filename":"cljs/spec/test/alpha.cljs","name":"*instrument-enabled*","ns":"cljs.spec.test.alpha","private":true,"row":39},{"arglist-strs":["[]"],"end-row":47,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[0],"name":"get-host-port","ns":"cljs.spec.test.alpha","row":43},{"arglist-strs":["[]"],"end-row":56,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[0],"name":"get-ua-product","ns":"cljs.spec.test.alpha","row":49},{"arglist-strs":["[]"],"end-row":59,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[0],"name":"get-env","ns":"cljs.spec.test.alpha","row":58},{"fixed-arities":[1],"end-row":64,"private":true,"ns":"cljs.spec.test.alpha","name":"fn-spec?","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[m]"],"doc":"Fn-spec must include at least :args or :ret specs.","row":61},{"arglist-strs":["[spec v]"],"end-row":70,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[2],"name":"explain-data*","ns":"cljs.spec.test.alpha","private":true,"row":67},{"arglist-strs":["[st]"],"end-row":81,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"find-caller","ns":"cljs.spec.test.alpha","private":true,"row":72},{"arglist-strs":["[v f fn-spec]"],"end-row":135,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[3],"name":"spec-checking-fn","ns":"cljs.spec.test.alpha","private":true,"row":85},{"arglist-strs":["[v spec]"],"end-row":140,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[2],"name":"no-fspec","ns":"cljs.spec.test.alpha","private":true,"row":137},{"end-row":142,"filename":"cljs/spec/test/alpha.cljs","name":"instrumented-vars","ns":"cljs.spec.test.alpha","private":true,"row":142},{"fixed-arities":[4],"end-row":149,"private":true,"ns":"cljs.spec.test.alpha","name":"instrument-choose-fn","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[f spec sym {over :gen :keys [stub replace]}]"],"doc":"Helper for instrument.","row":144},{"fixed-arities":[3],"end-row":154,"private":true,"ns":"cljs.spec.test.alpha","name":"instrument-choose-spec","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[spec sym {overrides :spec}]"],"doc":"Helper for instrument","row":151},{"arglist-strs":["[s v opts]"],"end-row":167,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[3],"name":"instrument-1*","ns":"cljs.spec.test.alpha","private":true,"row":156},{"arglist-strs":["[s v]"],"end-row":176,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[2],"name":"unstrument-1*","ns":"cljs.spec.test.alpha","private":true,"row":169},{"arglist-strs":["[s]"],"end-row":180,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"fn-spec-name?","ns":"cljs.spec.test.alpha","private":true,"row":178},{"arglist-strs":["[x]"],"end-row":186,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"collectionize","ns":"cljs.spec.test.alpha","private":true,"row":182},{"arglist-strs":["[]","[opts]"],"doc":"Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.","end-row":197,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[0,1],"name":"instrumentable-syms","ns":"cljs.spec.test.alpha","row":188},{"arglist-strs":["[args spec v role]"],"end-row":209,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[4],"name":"explain-check","ns":"cljs.spec.test.alpha","private":true,"row":201},{"fixed-arities":[3],"end-row":226,"private":true,"ns":"cljs.spec.test.alpha","name":"check-call","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[f specs args]"],"doc":"Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure.","row":211},{"arglist-strs":["[f specs {gen :gen opts :clojure.spec.test.check/opts}]"],"end-row":235,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[3],"name":"quick-check","ns":"cljs.spec.test.alpha","private":true,"row":228},{"fixed-arities":[4],"end-row":247,"private":true,"ns":"cljs.spec.test.alpha","name":"make-check-result","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[check-sym spec test-check-ret tc-ret-key]"],"doc":"Builds spec result map.","row":237},{"arglist-strs":["[opts]"],"end-row":251,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"validate-check-opts","ns":"cljs.spec.test.alpha","row":249},{"arglist-strs":["[x]"],"end-row":257,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"failure-type","ns":"cljs.spec.test.alpha","private":true,"row":255},{"arglist-strs":["[x]"],"end-row":263,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"unwrap-failure","ns":"cljs.spec.test.alpha","private":true,"row":259},{"fixed-arities":[1],"end-row":276,"private":true,"ns":"cljs.spec.test.alpha","name":"result-type","filename":"cljs/spec/test/alpha.cljs","arglist-strs":["[ret]"],"doc":"Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception","row":265},{"arglist-strs":["[x]"],"doc":"Given a check result, returns an abbreviated version\nsuitable for summary use.","end-row":286,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1],"name":"abbrev-result","ns":"cljs.spec.test.alpha","row":278},{"arglist-strs":["[check-results]","[check-results summary-result]"],"doc":"Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.","end-row":303,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1,2],"name":"summarize-results","ns":"cljs.spec.test.alpha","row":288},{"arglist-strs":["[start end]"],"doc":"Returns random int in range start <= rand < end","end-row":335,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[2],"name":"ranged-rand","ns":"cljs.spec.test.alpha","row":332},{"arglist-strs":["[a]","[a b]"],"end-row":361,"filename":"cljs/spec/test/alpha.cljs","fixed-arities":[1,2],"name":"foo","ns":"cljs.spec.test.alpha","row":358}]