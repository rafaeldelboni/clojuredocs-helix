[{"arglist-strs":["[x]"],"end-row":14,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"char","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":12},{"end-row":24,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","name":"<=clojure-1-7-alpha5","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":16},{"arglist-strs":["[cond & then]"],"end-row":28,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","macro":true,"name":"compile-when","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":26},{"arglist-strs":["[ex]"],"end-row":31,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"ex-info?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":30},{"end-row":34,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","name":"TaggedLiteral","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":34},{"arglist-strs":["[tag form]"],"end-row":34,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[2],"name":"->TaggedLiteral","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":34},{"arglist-strs":["[m]"],"end-row":34,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"map->TaggedLiteral","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":34},{"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a tagged literal","end-row":39,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"tagged-literal?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":36},{"arglist-strs":["[tag form]"],"doc":"Construct a data representation of a tagged literal from a\n       tag symbol and a form.","end-row":45,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[2],"name":"tagged-literal","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":41},{"end-row":56,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","name":"ReaderConditional","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":56},{"arglist-strs":["[splicing? form]"],"end-row":56,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[2],"name":"->ReaderConditional","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":56},{"arglist-strs":["[m]"],"end-row":56,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"map->ReaderConditional","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":56},{"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a reader conditional","end-row":63,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"reader-conditional?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":60},{"arglist-strs":["[form splicing?]"],"doc":"Construct a data representation of a reader conditional.\n       If true, splicing? indicates read-cond-splicing.","end-row":69,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[2],"name":"reader-conditional","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":65},{"arglist-strs":["[ch]"],"doc":"Checks whether a given character is whitespace","end-row":81,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"whitespace?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":76},{"arglist-strs":["[ch]"],"doc":"Checks whether a given character is numeric","end-row":87,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"numeric?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":83},{"arglist-strs":["[c]"],"doc":"Checks whether the character is a newline","end-row":93,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"newline?","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":89},{"arglist-strs":["[f]"],"doc":"Resolves syntactical sugar in metadata","end-row":102,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"desugar-meta","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":95},{"arglist-strs":["[]"],"doc":"Returns an anonymous unbound Var","end-row":107,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[0],"name":"make-var","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":104},{"arglist-strs":["[ns keys]"],"end-row":124,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[2],"name":"namespace-keys","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":109},{"arglist-strs":["[[a b]]"],"end-row":127,"filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","fixed-arities":[1],"name":"second'","ns":"cljs.vendor.clojure.tools.reader.impl.utils","row":126}]