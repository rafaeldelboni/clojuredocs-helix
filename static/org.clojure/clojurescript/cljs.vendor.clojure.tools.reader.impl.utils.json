[{"fixed-arities":[1],"end-row":14,"name-end-col":11,"name-end-row":12,"name-row":12,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"char","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":28,"arglist-strs":["[x]"],"row":12},{"end-row":24,"name-end-col":26,"name-end-row":16,"name-row":16,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"<=clojure-1-7-alpha5","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":6,"end-col":23,"row":16},{"end-row":28,"name-end-col":23,"name-end-row":26,"name-row":26,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"compile-when","defined-by":"clojure.core/defmacro","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","macro":true,"col":1,"name-col":11,"end-col":19,"arglist-strs":["[cond & then]"],"varargs-min-arity":1,"row":26},{"fixed-arities":[1],"end-row":31,"name-end-col":15,"name-end-row":30,"name-row":30,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"ex-info?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":45,"arglist-strs":["[ex]"],"row":30},{"end-row":34,"name-end-col":27,"name-end-row":34,"name-row":34,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"TaggedLiteral","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":39,"row":34},{"fixed-arities":[2],"end-row":34,"name-end-col":27,"name-end-row":34,"name-row":34,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"->TaggedLiteral","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":39,"arglist-strs":["[tag form]"],"row":34},{"fixed-arities":[1],"end-row":34,"name-end-col":27,"name-end-row":34,"name-row":34,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"map->TaggedLiteral","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":39,"arglist-strs":["[m]"],"row":34},{"fixed-arities":[1],"end-row":39,"name-end-col":24,"name-end-row":36,"name-row":36,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"tagged-literal?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":9,"end-col":81,"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a tagged literal","row":36},{"fixed-arities":[2],"end-row":45,"name-end-col":23,"name-end-row":41,"name-row":41,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"tagged-literal","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":9,"end-col":75,"arglist-strs":["[tag form]"],"doc":"Construct a data representation of a tagged literal from a\n       tag symbol and a form.","row":41},{"end-row":56,"name-end-col":31,"name-end-row":56,"name-row":56,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"ReaderConditional","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":49,"row":56},{"fixed-arities":[2],"end-row":56,"name-end-col":31,"name-end-row":56,"name-row":56,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"->ReaderConditional","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":49,"arglist-strs":["[splicing? form]"],"row":56},{"fixed-arities":[1],"end-row":56,"name-end-col":31,"name-end-row":56,"name-row":56,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"map->ReaderConditional","defined-by":"clojure.core/defrecord","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":14,"end-col":49,"arglist-strs":["[m]"],"row":56},{"fixed-arities":[1],"end-row":63,"name-end-col":28,"name-end-row":60,"name-row":60,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"reader-conditional?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":9,"end-col":85,"arglist-strs":["[value]"],"doc":"Return true if the value is the data representation of a reader conditional","row":60},{"fixed-arities":[2],"end-row":69,"name-end-col":27,"name-end-row":65,"name-row":65,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"reader-conditional","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":3,"name-col":9,"end-col":85,"arglist-strs":["[form splicing?]"],"doc":"Construct a data representation of a reader conditional.\n       If true, splicing? indicates read-cond-splicing.","row":65},{"fixed-arities":[1],"end-row":81,"name-end-col":18,"name-end-row":76,"name-row":76,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"whitespace?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[ch]"],"doc":"Checks whether a given character is whitespace","row":76},{"fixed-arities":[1],"end-row":87,"name-end-col":15,"name-end-row":83,"name-row":83,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"numeric?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":29,"arglist-strs":["[ch]"],"doc":"Checks whether a given character is numeric","row":83},{"fixed-arities":[1],"end-row":93,"name-end-col":15,"name-end-row":89,"name-row":89,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"newline?","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":17,"arglist-strs":["[c]"],"doc":"Checks whether the character is a newline","row":89},{"fixed-arities":[1],"end-row":102,"name-end-col":19,"name-end-row":95,"name-row":95,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"desugar-meta","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":21,"arglist-strs":["[f]"],"doc":"Resolves syntactical sugar in metadata","row":95},{"fixed-arities":[0],"end-row":107,"name-end-col":15,"name-end-row":104,"name-row":104,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"make-var","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":31,"arglist-strs":["[]"],"doc":"Returns an anonymous unbound Var","row":104},{"fixed-arities":[2],"end-row":124,"name-end-col":21,"name-end-row":109,"name-row":109,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"namespace-keys","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":13,"arglist-strs":["[ns keys]"],"row":109},{"fixed-arities":[1],"end-row":127,"name-end-col":14,"name-end-row":126,"name-row":126,"ns":"cljs.vendor.clojure.tools.reader.impl.utils","name":"second'","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/impl/utils.clj","col":1,"name-col":7,"end-col":18,"arglist-strs":["[[a b]]"],"row":126}]