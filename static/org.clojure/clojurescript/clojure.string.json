[{"fixed-arities":[1],"end-row":205,"meta":{},"name-end-col":20,"name-end-row":202,"name-row":202,"ns":"clojure.string","name":"triml","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L202","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":24,"arglist-strs":["[s]"],"doc":"Removes whitespace from the left side of string.","row":202},{"fixed-arities":[2],"end-row":247,"meta":{},"name-end-col":21,"name-end-row":230,"name-row":230,"ns":"clojure.string","name":"escape","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L230","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":35,"arglist-strs":["[s cmap]"],"doc":"Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.","row":230},{"fixed-arities":[1],"end-row":42,"meta":{},"name-end-col":20,"name-end-row":36,"private":true,"name-row":36,"ns":"clojure.string","name":"replace-with","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L36","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":30,"arglist-strs":["[f]"],"row":36},{"end-row":19,"meta":{},"name-end-col":33,"name-end-row":18,"private":true,"name-row":18,"ns":"clojure.string","name":"re-surrogate-pair","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L18","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":16,"end-col":61,"row":18},{"fixed-arities":[2],"end-row":285,"meta":{},"name-end-col":26,"name-end-row":282,"name-row":282,"ns":"clojure.string","name":"ends-with?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L282","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":16,"end-col":31,"arglist-strs":["[s substr]"],"doc":"True if s ends with substr.","row":282},{"fixed-arities":[2],"end-row":290,"meta":{},"name-end-col":25,"name-end-row":287,"name-row":287,"ns":"clojure.string","name":"includes?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L287","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":16,"end-col":31,"arglist-strs":["[s substr]"],"doc":"True if s includes substr.","row":287},{"fixed-arities":[1],"end-row":200,"meta":{},"name-end-col":19,"name-end-row":197,"name-row":197,"ns":"clojure.string","name":"trim","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L197","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[s]"],"doc":"Removes whitespace from both ends of string.","row":197},{"fixed-arities":[1],"end-row":127,"meta":{},"name-end-col":25,"name-end-row":124,"name-row":124,"ns":"clojure.string","name":"lower-case","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L124","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[s]"],"doc":"Converts string to all lower-case.","row":124},{"fixed-arities":[1],"end-row":25,"meta":{},"name-end-col":22,"name-end-row":21,"name-row":21,"ns":"clojure.string","name":"reverse","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L21","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":44,"arglist-strs":["[s]"],"doc":"Returns s with its characters reversed.","row":21},{"fixed-arities":[1],"end-row":195,"meta":{},"name-end-col":18,"name-end-row":192,"name-row":192,"ns":"clojure.string","name":"split-lines","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L192","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":7,"end-col":24,"arglist-strs":["[s]"],"doc":"Splits s on \\n or \\r\\n. Trailing empty lines are not returned.","row":192},{"fixed-arities":[1],"end-row":16,"meta":{},"name-end-col":19,"name-end-row":14,"private":true,"name-row":14,"ns":"clojure.string","name":"seq-reverse","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L14","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":25,"arglist-strs":["[coll]"],"row":14},{"fixed-arities":[1],"end-row":228,"meta":{},"name-end-col":22,"name-end-row":225,"name-row":225,"ns":"clojure.string","name":"blank?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L225","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":16,"end-col":54,"arglist-strs":["[s]"],"doc":"True is s is nil, empty, or contains only whitespace.","row":225},{"fixed-arities":[3],"end-row":34,"meta":{},"name-end-col":19,"name-end-row":27,"private":true,"name-row":27,"ns":"clojure.string","name":"replace-all","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L27","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":33,"arglist-strs":["[s re replacement]"],"row":27},{"fixed-arities":[3,2],"end-row":261,"meta":{},"name-end-col":15,"name-end-row":249,"name-row":249,"ns":"clojure.string","name":"index-of","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L249","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":7,"end-col":18,"arglist-strs":["[s value]","[s value from-index]"],"doc":"Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.","row":249},{"fixed-arities":[2],"end-row":165,"meta":{},"name-end-col":30,"name-end-row":157,"private":true,"name-row":157,"ns":"clojure.string","name":"split-with-empty-regex","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L157","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":83,"arglist-strs":["[s limit]"],"row":157},{"fixed-arities":[1],"end-row":223,"meta":{},"name-end-col":27,"name-end-row":212,"name-row":212,"ns":"clojure.string","name":"trim-newline","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L212","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":38,"arglist-strs":["[s]"],"doc":"Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp.","row":212},{"fixed-arities":[1],"end-row":149,"meta":{},"name-end-col":28,"name-end-row":144,"private":true,"name-row":144,"ns":"clojure.string","name":"pop-last-while-empty","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L144","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":11,"arglist-strs":["[v]"],"row":144},{"fixed-arities":[3,2],"end-row":190,"meta":{},"name-end-col":12,"name-end-row":167,"name-row":167,"ns":"clojure.string","name":"split","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L167","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":7,"end-col":43,"arglist-strs":["[s re]","[s re limit]"],"doc":"Splits string on a regular expression. Optional argument limit is\n  the maximum number of parts. Not lazy. Returns vector of the parts.\n  Trailing empty strings are not returned - pass limit of -1 to return all.","row":167},{"fixed-arities":[3],"end-row":74,"meta":{},"name-end-col":22,"name-end-row":44,"name-row":44,"ns":"clojure.string","name":"replace","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L44","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":54,"arglist-strs":["[s match replacement]"],"doc":"Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\"","row":44},{"fixed-arities":[1,2],"end-row":117,"meta":{},"name-end-col":11,"name-end-row":100,"name-row":100,"ns":"clojure.string","name":"join","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L100","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":7,"end-col":34,"arglist-strs":["[coll]","[separator coll]"],"doc":"Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.","row":100},{"fixed-arities":[1],"end-row":210,"meta":{},"name-end-col":20,"name-end-row":207,"name-row":207,"ns":"clojure.string","name":"trimr","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L207","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":25,"arglist-strs":["[s]"],"doc":"Removes whitespace from the right side of string.","row":207},{"fixed-arities":[3],"end-row":98,"meta":{},"name-end-col":28,"name-end-row":76,"name-row":76,"ns":"clojure.string","name":"replace-first","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L76","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":34,"arglist-strs":["[s match replacement]"],"doc":"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\"","row":76},{"fixed-arities":[3,2],"end-row":275,"meta":{},"name-end-col":20,"name-end-row":263,"name-row":263,"ns":"clojure.string","name":"last-index-of","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L263","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":7,"end-col":18,"arglist-strs":["[s value]","[s value from-index]"],"doc":"Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.","row":263},{"fixed-arities":[2],"end-row":155,"meta":{},"name-end-col":34,"name-end-row":151,"private":true,"name-row":151,"ns":"clojure.string","name":"discard-trailing-if-needed","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L151","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":8,"end-col":8,"arglist-strs":["[limit v]"],"row":151},{"fixed-arities":[2],"end-row":280,"meta":{},"name-end-col":28,"name-end-row":277,"name-row":277,"ns":"clojure.string","name":"starts-with?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L277","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":16,"end-col":33,"arglist-strs":["[s substr]"],"doc":"True if s starts with substr.","row":277},{"fixed-arities":[1],"end-row":122,"meta":{},"name-end-col":25,"name-end-row":119,"name-row":119,"ns":"clojure.string","name":"upper-case","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L119","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[s]"],"doc":"Converts string to all upper-case.","row":119},{"fixed-arities":[1],"end-row":133,"meta":{},"name-end-col":25,"name-end-row":129,"name-row":129,"ns":"clojure.string","name":"capitalize","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/string.cljs#L129","lang":[],"filename":"/src/main/cljs/clojure/string.cljs","col":1,"name-col":15,"end-col":26,"arglist-strs":["[s]"],"doc":"Converts first character of the string to upper-case, all other\n  characters to lower-case.","row":129}]