[{"end-row":34,"filename":"cljs/repl.cljc","lang":"clj","name":"*cljs-verbose*","ns":"cljs.repl","row":34},{"end-row":35,"filename":"cljs/repl.cljc","lang":"clj","name":"*repl-opts*","ns":"cljs.repl","row":35},{"end-row":36,"filename":"cljs/repl.cljc","lang":"clj","name":"*repl-env*","ns":"cljs.repl","row":36},{"doc":"Set of all known REPL options.","end-row":43,"filename":"cljs/repl.cljc","lang":"clj","name":"known-repl-opts","ns":"cljs.repl","row":38},{"end-row":47,"private":true,"ns":"cljs.repl","name":"err-out","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[& body]"],"row":45},{"fixed-arities":[1],"end-row":64,"ns":"cljs.repl","name":"skip-if-eol","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[s]"],"doc":"If the next character on stream s is a newline, skips it, otherwise\n  leaves the stream untouched. Returns :line-start, :stream-end, or :body\n  to indicate the relative location of the next character on s. The stream\n  must either be an instance of LineNumberingPushbackReader or duplicate\n  its behavior of both supporting .unread and collapsing all of CR, LF, and\n  CRLF to a single \\newline.","row":52},{"fixed-arities":[1],"end-row":83,"ns":"cljs.repl","name":"skip-whitespace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[s]"],"doc":"Skips whitespace characters on stream s. Returns :line-start, :stream-end,\n  or :body to indicate the relative location of the next character on s.\n  Interprets comma as whitespace and semicolon as comment to end of line.\n  Does not interpret #! as comment to end of line because only one\n  character of lookahead is available. The stream must either be an\n  instance of LineNumberingPushbackReader or duplicate its behavior of both\n  supporting .unread and collapsing all of CR, LF, and CRLF to a single\n  \\newline.","row":66},{"fixed-arities":[3,2],"end-row":110,"ns":"cljs.repl","name":"repl-read","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[request-prompt request-exit]","[request-prompt request-exit opts]"],"doc":"Default :read hook for repl. Reads from *in* which must either be an\n  instance of LineNumberingPushbackReader or duplicate its behavior of both\n  supporting .unread and collapsing all of CR, LF, and CRLF into a single\n  \\newline. repl-read:\n    - skips whitespace, then\n      - returns request-prompt on start of line, or\n      - returns request-exit on end of stream, or\n      - reads an object from the input stream, then\n        - skips the next input character if it's end of line, then\n        - returns the object.","row":85},{"end-row":116,"filename":"cljs/repl.cljc","lang":"clj","name":"IReplEnvOptions","ns":"cljs.repl","row":115},{"fixed-arities":[1],"end-row":116,"ns":"cljs.repl","name":"-repl-options","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]"],"doc":"Return default REPL options for a REPL Env","row":116},{"arglist-strs":["[repl-env]"],"end-row":119,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"repl-options","ns":"cljs.repl","row":118},{"end-row":125,"filename":"cljs/repl.cljc","lang":"clj","name":"IJavaScriptEnv","ns":"cljs.repl","row":121},{"fixed-arities":[2],"end-row":122,"ns":"cljs.repl","name":"-setup","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env opts]"],"doc":"initialize the environment","row":122},{"fixed-arities":[4],"end-row":123,"ns":"cljs.repl","name":"-evaluate","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env filename line js]"],"doc":"evaluate a javascript string","row":123},{"fixed-arities":[3],"end-row":124,"ns":"cljs.repl","name":"-load","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env provides url]"],"doc":"load code at url into the environment","row":124},{"fixed-arities":[1],"end-row":125,"ns":"cljs.repl","name":"-tear-down","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]"],"doc":"dispose of the environment","row":125},{"arglist-strs":["[repl-env opts]"],"end-row":128,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"setup","ns":"cljs.repl","row":127},{"arglist-strs":["[repl-env filename line js]"],"end-row":131,"filename":"cljs/repl.cljc","fixed-arities":[4],"lang":"clj","name":"evaluate","ns":"cljs.repl","row":130},{"arglist-strs":["[repl-env provides url]"],"end-row":134,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"clj","name":"load","ns":"cljs.repl","row":133},{"arglist-strs":["[repl-env]"],"end-row":137,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"tear-down","ns":"cljs.repl","row":136},{"end-row":147,"filename":"cljs/repl.cljc","lang":"clj","name":"IParseError","ns":"cljs.repl","row":144},{"fixed-arities":[3],"end-row":147,"ns":"cljs.repl","name":"-parse-error","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env error build-options]"],"doc":"Given the original JavaScript error return the error to actually\n     use.","row":145},{"end-row":159,"filename":"cljs/repl.cljc","lang":"clj","name":"IGetError","ns":"cljs.repl","row":149},{"fixed-arities":[4],"end-row":159,"ns":"cljs.repl","name":"-get-error","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env name env build-options]"],"doc":"Given a symbol representing a var holding an error, an analysis\n     environment, and the REPL/compiler options return the canonical error\n     representation:\n\n     {:value <string>\n      :stacktrace <string>}\n\n    :value should be the host environment JavaScript error message string.\n    :stacktrace should be the host JavaScript environment stacktrace string.","row":150},{"end-row":174,"filename":"cljs/repl.cljc","lang":"clj","name":"IParseStacktrace","ns":"cljs.repl","row":161},{"fixed-arities":[4],"end-row":174,"ns":"cljs.repl","name":"-parse-stacktrace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env stacktrace error build-options]"],"doc":"Given the original JavaScript stacktrace string, the entire original error\n     value and current compiler build options, parse the stacktrace into the\n     canonical form:\n\n     [{:file <string>\n       :function <string>\n       :line <integer>\n       :column <integer>}*]\n\n     :file must be a URL path (without protocol) relative to :output-dir. If\n     no source file can be supplied (such as REPL defs), :file may be a custom\n     identifier string surrounded by angle brackets, i.e. \"<cljs repl>\".","row":162},{"end-row":179,"filename":"cljs/repl.cljc","lang":"clj","name":"IPrintStacktrace","ns":"cljs.repl","row":176},{"fixed-arities":[4],"end-row":179,"ns":"cljs.repl","name":"-print-stacktrace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env stacktrace error build-options]"],"doc":"Implementing REPL evaluation environments are given the opportunity to\n     print the mapped stacktrace themselves. This permits further processing.","row":177},{"fixed-arities":[1,2],"end-row":191,"private":true,"ns":"cljs.repl","name":"env->opts","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]","[repl-env opts]"],"doc":"Returns a hash-map containing all of the entries in [repl-env], translating\n:working-dir to :output-dir.","row":181},{"arglist-strs":["[ijs]"],"end-row":196,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"add-url","ns":"cljs.repl","row":193},{"arglist-strs":["[ns opts]"],"end-row":204,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"ns->input","ns":"cljs.repl","row":198},{"arglist-strs":["[input]"],"end-row":207,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"compilable?","ns":"cljs.repl","row":206},{"fixed-arities":[3],"end-row":224,"private":true,"ns":"cljs.repl","name":"load-sources","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env sources opts]"],"doc":"Load the compiled `sources` into the REPL.","row":209},{"fixed-arities":[3],"end-row":231,"private":true,"ns":"cljs.repl","name":"load-cljs-loader","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env sources opts]"],"doc":"Compile and load the cljs.loader namespace if it's present in `sources`.","row":226},{"fixed-arities":[3,2],"end-row":252,"ns":"cljs.repl","name":"load-namespace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env ns]","[repl-env ns opts]"],"doc":"Load a namespace and all of its dependencies into the evaluation environment.\n  The environment is responsible for ensuring that each namespace is\n  loaded once and only once. Returns the compiled sources.","row":233},{"fixed-arities":[3,2],"end-row":259,"private":true,"ns":"cljs.repl","name":"load-dependencies","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env requires]","[repl-env requires opts]"],"doc":"Compile and load the given `requires` and return the compiled sources.","row":254},{"fixed-arities":[1],"end-row":273,"ns":"cljs.repl","name":"js-src->cljs-src","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Map a JavaScript output file back to the original ClojureScript source\n   file (.cljs or .cljc).","row":261},{"fixed-arities":[1],"end-row":293,"ns":"cljs.repl","name":"read-source-map","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Return the source map for the JavaScript source file.","row":275},{"fixed-arities":[1],"end-row":301,"ns":"cljs.repl","name":"ns-info","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Given a path to a js source file return the ns info for the corresponding\n   ClojureScript file if it exists.","row":295},{"fixed-arities":[3],"end-row":322,"private":true,"ns":"cljs.repl","name":"mapped-line-column-call","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[source-map line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":303},{"fixed-arities":[2],"end-row":362,"private":true,"ns":"cljs.repl","name":"mapped-frame","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[{:keys [function file line column]} opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":324},{"fixed-arities":[1,2],"end-row":392,"ns":"cljs.repl","name":"mapped-stacktrace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[stacktrace]","[stacktrace opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":364},{"arglist-strs":["[file {:keys [output-dir temp-output-dir?]}]"],"end-row":403,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"file-display","ns":"cljs.repl","row":394},{"fixed-arities":[1,2],"end-row":415,"ns":"cljs.repl","name":"print-mapped-stacktrace","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[stacktrace]","[stacktrace opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   print the ClojureScript stacktrace. See mapped-stacktrace.","row":405},{"end-row":418,"filename":"cljs/repl.cljc","lang":"clj","name":"st","ns":"cljs.repl","row":418},{"fixed-arities":[4,5],"end-row":491,"private":true,"ns":"cljs.repl","name":"display-error","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env ret form opts]","[repl-env ret form f opts]"],"row":469},{"fixed-arities":[1],"end-row":496,"private":true,"ns":"cljs.repl","name":"bytes-to-base64-str","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[bytes]"],"doc":"Convert a byte array into a base-64 encoded string.","row":493},{"fixed-arities":[4,6,5],"end-row":583,"ns":"cljs.repl","name":"evaluate-form","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env env filename form]","[repl-env env filename form wrap]","[repl-env env filename form wrap opts]"],"doc":"Evaluate a ClojureScript form in the JavaScript environment. Returns a\n  string which is the ClojureScript return value. This string may or may\n  not be readable by the Clojure reader.","row":498},{"arglist-strs":["[repl-env filename res]"],"end-row":590,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"clj","name":"load-stream","ns":"cljs.repl","row":585},{"arglist-strs":["[repl-env f]","[repl-env f opts]"],"end-row":626,"filename":"cljs/repl.cljc","fixed-arities":[3,2],"lang":"clj","name":"load-file","ns":"cljs.repl","row":592},{"fixed-arities":[1],"end-row":635,"private":true,"ns":"cljs.repl","name":"root-resource","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[lib]"],"doc":"Returns the root directory path for a lib","row":628},{"fixed-arities":[1],"end-row":641,"private":true,"ns":"cljs.repl","name":"root-directory","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[lib]"],"doc":"Returns the root resource path for a lib","row":637},{"fixed-arities":[1],"end-row":650,"private":true,"ns":"cljs.repl","name":"load-path->cp-path","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[path]"],"row":643},{"fixed-arities":[1],"end-row":671,"private":true,"ns":"cljs.repl","name":"wrap-fn","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[form]"],"row":652},{"fixed-arities":[1],"end-row":683,"private":true,"ns":"cljs.repl","name":"init-wrap-fn","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[form]"],"row":673},{"fixed-arities":[4,3],"end-row":699,"ns":"cljs.repl","name":"eval-cljs","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[repl-env env form]","[repl-env env form opts]"],"doc":"Given a REPL evaluation environment, an analysis environment, and a\n   form, evaluate the form and return the result. The result is always the value\n   represented as a string.","row":685},{"arglist-strs":["[specs]"],"end-row":704,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"decorate-specs","ns":"cljs.repl","row":701},{"fixed-arities":[1],"end-row":747,"private":true,"ns":"cljs.repl","name":"wrap-self","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Takes a self-ish fn and returns it wrapped with exception handling.\n  Compiler state is restored if self-ish fn fails.","row":734},{"fixed-arities":[2],"end-row":752,"private":true,"ns":"cljs.repl","name":"wrap-special-fns","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[wfn fns]"],"row":749},{"end-row":793,"filename":"cljs/repl.cljc","lang":"clj","name":"default-special-fns","ns":"cljs.repl","row":754},{"fixed-arities":[1,2],"end-row":803,"ns":"cljs.repl","name":"analyze-source","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[src-dir]","[src-dir opts]"],"doc":"Given a source directory, analyzes all .cljs files. Used to populate\n  (:cljs.analyzer/namespaces compiler-env) so as to support code reflection.","row":795},{"arglist-strs":["[]"],"end-row":806,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"clj","name":"repl-title","ns":"cljs.repl","row":805},{"arglist-strs":["[]"],"end-row":809,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"clj","name":"repl-quit-prompt","ns":"cljs.repl","row":808},{"arglist-strs":["[]"],"end-row":812,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"clj","name":"repl-prompt","ns":"cljs.repl","row":811},{"fixed-arities":[1],"end-row":818,"ns":"cljs.repl","name":"demunge","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[fn-name]"],"doc":"Given a string representation of a fn class,\n  as in a stack trace element, returns a readable version.","row":814},{"end-row":824,"filename":"cljs/repl.cljc","lang":"clj","name":"core-namespaces","ns":"cljs.repl","private":true,"row":820},{"fixed-arities":[1],"end-row":830,"private":true,"ns":"cljs.repl","name":"core-class?","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[class-name]"],"row":826},{"fixed-arities":[1],"end-row":838,"private":true,"ns":"cljs.repl","name":"file-name","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[full-path]"],"doc":"Helper to get just the file name part of a path or nil","row":832},{"fixed-arities":[2],"end-row":848,"private":true,"ns":"cljs.repl","name":"java-loc->source","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[clazz method]"],"doc":"Convert Java class name and method symbol to source symbol, either a\n  Clojure function or Java class and method.","row":840},{"fixed-arities":[1],"end-row":905,"ns":"cljs.repl","name":"ex-triage","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[datafied-throwable]"],"doc":"Returns an analysis of the phase, error, cause, and location of an error that occurred\n  based on Throwable data, as returned by Throwable->map. All attributes other than phase\n  are optional:\n    :clojure.error/phase - keyword phase indicator, one of:\n      :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion\n      :execution :read-eval-result :print-eval-result\n    :clojure.error/source - file name (no path)\n    :clojure.error/line - integer line number\n    :clojure.error/column - integer column number\n    :clojure.error/symbol - symbol being expanded/compiled/invoked\n    :clojure.error/class - cause exception class symbol\n    :clojure.error/cause - cause exception message\n    :clojure.error/spec - explain-data for spec error","row":850},{"fixed-arities":[1],"end-row":980,"ns":"cljs.repl","name":"ex-str","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[{:keys [:clojure.error/phase :clojure.error/source :clojure.error/line :clojure.error/column :clojure.error/symbol :clojure.error/class :clojure.error/cause :clojure.error/spec] :as triage-data}]"],"doc":"Returns a string from exception data, as produced by ex-triage.\n  The first line summarizes the exception phase and location.\n  The subsequent lines describe the cause.","row":907},{"arglist-strs":["[e repl-env opts]"],"end-row":998,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"clj","name":"repl-caught","ns":"cljs.repl","row":982},{"arglist-strs":["[x]"],"end-row":1001,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"repl-nil?","ns":"cljs.repl","row":1000},{"arglist-strs":["[renv inits]"],"end-row":1017,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"run-inits","ns":"cljs.repl","row":1003},{"arglist-strs":["[opts]"],"end-row":1026,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"clj","name":"maybe-install-npm-deps","ns":"cljs.repl","row":1019},{"arglist-strs":["[quit-prompt prompt]"],"end-row":1031,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"initial-prompt","ns":"cljs.repl","row":1028},{"arglist-strs":["[repl-env {:keys [init inits need-prompt quit-prompt prompt flush read eval print caught reader print-no-newline source-map-inline wrap repl-requires ::fast-initial-prompt? compiler-env bind-err] :or {need-prompt #(if (readers/indexing-reader? *in*) (== (readers/get-column-number *in*) 1) (identity true)) fast-initial-prompt? false quit-prompt repl-title prompt repl-prompt flush flush read repl-read eval eval-cljs print println caught repl-caught reader #(readers/source-logging-push-back-reader *in* 1 \"<NO_SOURCE_FILE>\") print-no-newline print source-map-inline true repl-requires '[[cljs.repl :refer-macros [source doc find-doc apropos dir pst]] [cljs.pprint :refer [pprint] :refer-macros [pp]]] bind-err true} :as opts}]"],"end-row":1226,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"clj","name":"repl*","ns":"cljs.repl","row":1033},{"arglist-strs":["[repl-env & opts]"],"doc":"Generic, reusable, read-eval-print loop. By default, reads from *in* using\n  a c.t.r.reader-types/source-logging-push-back-reader,\n  writes to *out*, and prints exception summaries to *err*. If you use the\n  default :read hook, *in* must either be an instance of\n  c.t.r.reader-types/PushbackReader or duplicate its behavior of both supporting\n  unread and collapsing CR, LF, and CRLF into a single \\newline. Options\n  are sequential keyword-value pairs. The first argument is the JavaScript\n  evaluation environment, the second argument is an extended version of the\n  standard ClojureScript compiler options. In addition to ClojureScript compiler\n  build options it also take a set of options similar to clojure.main/repl with\n  adjustments for ClojureScript evalution and compilation model:\n\n  Available clojure.main/repl style options and their defaults:\n\n     - :init, function of no arguments, initialization hook called with\n       bindings for set!-able vars in place.\n       default: #()\n\n     - :need-prompt, function of no arguments, called before each\n       read-eval-print except the first, the user will be prompted if it\n       returns true.\n       default: #(if (c.t.r.readers-types/indexing-reader? *in*)\n                   (== (c.t.r.reader-types/get-column-number *in*) 1)\n                   (identity true))\n\n     - :prompt, function of no arguments, prompts for more input.\n       default: repl-prompt\n\n     - :flush, function of no arguments, flushes output\n       default: flush\n\n     - :read, function of two arguments, reads from *in*:\n         - returns its first argument to request a fresh prompt\n           - depending on need-prompt, this may cause the repl to prompt\n             before reading again\n         - returns its second argument to request an exit from the repl\n         - else returns the next object read from the input stream\n       default: repl-read\n\n     - :eval, function of one argument, returns the evaluation of its\n       argument. The eval function must take repl-env, the JavaScript evaluation\n       environment, env, the ClojureScript analysis environment, the form\n       and opts, the standard ClojureScript REPL/compiler options.\n       default: eval\n\n     - :print, function of one argument, prints its argument to the output\n       default: println\n\n     - :caught, function of three arguments, a throwable, called when\n       read, eval, or print throws an exception or error default. The second\n       argument is the JavaScript evaluation environment this permits context\n       sensitive handling if necessary. The third argument is opts, the standard\n       ClojureScript REPL/compiler options. In the case of errors or exception\n       in the JavaScript target, these will be thrown as\n       clojure.lang.IExceptionInfo instances.\n       default: repl-caught\n\n     - :reader, the c.t.r reader to use.\n       default: c.t.r.reader-types/source-logging-push-back-reader\n\n     - :print-no-newline, print without a newline.\n       default: print\n\n     - :source-map-inline, whether inline source maps should be enabled. Most\n       useful in browser context. Implies using a fresh reader for each form.\n       default: true","end-row":1298,"filename":"cljs/repl.cljc","lang":"clj","name":"repl","ns":"cljs.repl","row":1228},{"end-row":1409,"filename":"cljs/repl.cljc","lang":"clj","name":"special-doc-map","ns":"cljs.repl","row":1303},{"fixed-arities":[1],"end-row":1414,"private":true,"ns":"cljs.repl","name":"special-doc","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[name-symbol]"],"row":1411},{"end-row":1424,"filename":"cljs/repl.cljc","lang":"clj","name":"repl-special-doc-map","ns":"cljs.repl","row":1416},{"fixed-arities":[1],"end-row":1429,"private":true,"ns":"cljs.repl","name":"repl-special-doc","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[name-symbol]"],"row":1426},{"fixed-arities":[1],"end-row":1469,"ns":"cljs.repl","name":"doc","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[name]"],"doc":"Prints documentation for a var or special form given its name,\n  or for a spec if given a keyword","row":1431},{"fixed-arities":[1],"end-row":1493,"ns":"cljs.repl","name":"find-doc","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[re-string-or-pattern]"],"doc":"Prints documentation for any var whose documentation or name\n contains a match for re-string-or-pattern","row":1471},{"fixed-arities":[2],"end-row":1518,"ns":"cljs.repl","name":"source-fn","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[env x]"],"doc":"Returns a string of the source code for the given symbol, if it can\n  find it.  This requires that the symbol resolve to a Var defined in\n  a namespace for which the .clj is in the classpath.  Returns nil if\n  it can't find the source.  For most REPL usage, 'source' is more\n  convenient.\n\n  Example: (source-fn 'filter)","row":1495},{"end-row":1521,"filename":"cljs/repl.cljc","lang":"clj","name":"cenv","ns":"cljs.repl","row":1521},{"end-row":1522,"filename":"cljs/repl.cljc","lang":"clj","name":"aenv","ns":"cljs.repl","row":1522},{"fixed-arities":[1],"end-row":1538,"ns":"cljs.repl","name":"source","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[n]"],"doc":"Prints the source code for the given symbol, if it can find it.\n  This requires that the symbol resolve to a Var defined in a\n  namespace for which the .cljs is in the classpath.\n\n  Example: (source filter)","row":1531},{"fixed-arities":[1],"end-row":1545,"private":true,"ns":"cljs.repl","name":"named-publics-vars","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[ns]"],"doc":"Gets the public vars in a namespace that are not anonymous.","row":1540},{"fixed-arities":[1],"end-row":1562,"ns":"cljs.repl","name":"apropos","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[str-or-pattern]"],"doc":"Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.","row":1547},{"fixed-arities":[1],"end-row":1570,"private":true,"ns":"cljs.repl","name":"resolve-ns","lang":"clj","filename":"cljs/repl.cljc","arglist-strs":["[ns-sym]"],"doc":"Resolves a namespace symbol to a namespace by first checking to see if it\n  is a namespace alias.","row":1564},{"fixed-arities":[1],"end-row":1576,"ns":"cljs.repl","name":"dir","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[ns]"],"doc":"Prints a sorted directory of public vars in a namespace","row":1572},{"fixed-arities":[0,1],"end-row":1595,"ns":"cljs.repl","name":"pst","lang":"clj","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[]","[e]"],"row":1578},{"end-row":34,"filename":"cljs/repl.cljc","lang":"cljs","name":"*cljs-verbose*","ns":"cljs.repl","row":34},{"end-row":35,"filename":"cljs/repl.cljc","lang":"cljs","name":"*repl-opts*","ns":"cljs.repl","row":35},{"end-row":36,"filename":"cljs/repl.cljc","lang":"cljs","name":"*repl-env*","ns":"cljs.repl","row":36},{"doc":"Set of all known REPL options.","end-row":43,"filename":"cljs/repl.cljc","lang":"cljs","name":"known-repl-opts","ns":"cljs.repl","row":38},{"end-row":47,"private":true,"ns":"cljs.repl","name":"err-out","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[& body]"],"row":45},{"fixed-arities":[1],"end-row":64,"ns":"cljs.repl","name":"skip-if-eol","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[s]"],"doc":"If the next character on stream s is a newline, skips it, otherwise\n  leaves the stream untouched. Returns :line-start, :stream-end, or :body\n  to indicate the relative location of the next character on s. The stream\n  must either be an instance of LineNumberingPushbackReader or duplicate\n  its behavior of both supporting .unread and collapsing all of CR, LF, and\n  CRLF to a single \\newline.","row":52},{"fixed-arities":[1],"end-row":83,"ns":"cljs.repl","name":"skip-whitespace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[s]"],"doc":"Skips whitespace characters on stream s. Returns :line-start, :stream-end,\n  or :body to indicate the relative location of the next character on s.\n  Interprets comma as whitespace and semicolon as comment to end of line.\n  Does not interpret #! as comment to end of line because only one\n  character of lookahead is available. The stream must either be an\n  instance of LineNumberingPushbackReader or duplicate its behavior of both\n  supporting .unread and collapsing all of CR, LF, and CRLF to a single\n  \\newline.","row":66},{"fixed-arities":[3,2],"end-row":110,"ns":"cljs.repl","name":"repl-read","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[request-prompt request-exit]","[request-prompt request-exit opts]"],"doc":"Default :read hook for repl. Reads from *in* which must either be an\n  instance of LineNumberingPushbackReader or duplicate its behavior of both\n  supporting .unread and collapsing all of CR, LF, and CRLF into a single\n  \\newline. repl-read:\n    - skips whitespace, then\n      - returns request-prompt on start of line, or\n      - returns request-exit on end of stream, or\n      - reads an object from the input stream, then\n        - skips the next input character if it's end of line, then\n        - returns the object.","row":85},{"end-row":116,"filename":"cljs/repl.cljc","lang":"cljs","name":"IReplEnvOptions","ns":"cljs.repl","row":115},{"fixed-arities":[1],"end-row":116,"ns":"cljs.repl","name":"-repl-options","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]"],"doc":"Return default REPL options for a REPL Env","row":116},{"arglist-strs":["[repl-env]"],"end-row":119,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"repl-options","ns":"cljs.repl","row":118},{"end-row":125,"filename":"cljs/repl.cljc","lang":"cljs","name":"IJavaScriptEnv","ns":"cljs.repl","row":121},{"fixed-arities":[2],"end-row":122,"ns":"cljs.repl","name":"-setup","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env opts]"],"doc":"initialize the environment","row":122},{"fixed-arities":[4],"end-row":123,"ns":"cljs.repl","name":"-evaluate","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env filename line js]"],"doc":"evaluate a javascript string","row":123},{"fixed-arities":[3],"end-row":124,"ns":"cljs.repl","name":"-load","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env provides url]"],"doc":"load code at url into the environment","row":124},{"fixed-arities":[1],"end-row":125,"ns":"cljs.repl","name":"-tear-down","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]"],"doc":"dispose of the environment","row":125},{"arglist-strs":["[repl-env opts]"],"end-row":128,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"setup","ns":"cljs.repl","row":127},{"arglist-strs":["[repl-env filename line js]"],"end-row":131,"filename":"cljs/repl.cljc","fixed-arities":[4],"lang":"cljs","name":"evaluate","ns":"cljs.repl","row":130},{"arglist-strs":["[repl-env provides url]"],"end-row":134,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"cljs","name":"load","ns":"cljs.repl","row":133},{"arglist-strs":["[repl-env]"],"end-row":137,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"tear-down","ns":"cljs.repl","row":136},{"end-row":147,"filename":"cljs/repl.cljc","lang":"cljs","name":"IParseError","ns":"cljs.repl","row":144},{"fixed-arities":[3],"end-row":147,"ns":"cljs.repl","name":"-parse-error","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env error build-options]"],"doc":"Given the original JavaScript error return the error to actually\n     use.","row":145},{"end-row":159,"filename":"cljs/repl.cljc","lang":"cljs","name":"IGetError","ns":"cljs.repl","row":149},{"fixed-arities":[4],"end-row":159,"ns":"cljs.repl","name":"-get-error","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env name env build-options]"],"doc":"Given a symbol representing a var holding an error, an analysis\n     environment, and the REPL/compiler options return the canonical error\n     representation:\n\n     {:value <string>\n      :stacktrace <string>}\n\n    :value should be the host environment JavaScript error message string.\n    :stacktrace should be the host JavaScript environment stacktrace string.","row":150},{"end-row":174,"filename":"cljs/repl.cljc","lang":"cljs","name":"IParseStacktrace","ns":"cljs.repl","row":161},{"fixed-arities":[4],"end-row":174,"ns":"cljs.repl","name":"-parse-stacktrace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env stacktrace error build-options]"],"doc":"Given the original JavaScript stacktrace string, the entire original error\n     value and current compiler build options, parse the stacktrace into the\n     canonical form:\n\n     [{:file <string>\n       :function <string>\n       :line <integer>\n       :column <integer>}*]\n\n     :file must be a URL path (without protocol) relative to :output-dir. If\n     no source file can be supplied (such as REPL defs), :file may be a custom\n     identifier string surrounded by angle brackets, i.e. \"<cljs repl>\".","row":162},{"end-row":179,"filename":"cljs/repl.cljc","lang":"cljs","name":"IPrintStacktrace","ns":"cljs.repl","row":176},{"fixed-arities":[4],"end-row":179,"ns":"cljs.repl","name":"-print-stacktrace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env stacktrace error build-options]"],"doc":"Implementing REPL evaluation environments are given the opportunity to\n     print the mapped stacktrace themselves. This permits further processing.","row":177},{"fixed-arities":[1,2],"end-row":191,"private":true,"ns":"cljs.repl","name":"env->opts","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env]","[repl-env opts]"],"doc":"Returns a hash-map containing all of the entries in [repl-env], translating\n:working-dir to :output-dir.","row":181},{"arglist-strs":["[ijs]"],"end-row":196,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"add-url","ns":"cljs.repl","row":193},{"arglist-strs":["[ns opts]"],"end-row":204,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"ns->input","ns":"cljs.repl","row":198},{"arglist-strs":["[input]"],"end-row":207,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"compilable?","ns":"cljs.repl","row":206},{"fixed-arities":[3],"end-row":224,"private":true,"ns":"cljs.repl","name":"load-sources","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env sources opts]"],"doc":"Load the compiled `sources` into the REPL.","row":209},{"fixed-arities":[3],"end-row":231,"private":true,"ns":"cljs.repl","name":"load-cljs-loader","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env sources opts]"],"doc":"Compile and load the cljs.loader namespace if it's present in `sources`.","row":226},{"fixed-arities":[3,2],"end-row":252,"ns":"cljs.repl","name":"load-namespace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env ns]","[repl-env ns opts]"],"doc":"Load a namespace and all of its dependencies into the evaluation environment.\n  The environment is responsible for ensuring that each namespace is\n  loaded once and only once. Returns the compiled sources.","row":233},{"fixed-arities":[3,2],"end-row":259,"private":true,"ns":"cljs.repl","name":"load-dependencies","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env requires]","[repl-env requires opts]"],"doc":"Compile and load the given `requires` and return the compiled sources.","row":254},{"fixed-arities":[1],"end-row":273,"ns":"cljs.repl","name":"js-src->cljs-src","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Map a JavaScript output file back to the original ClojureScript source\n   file (.cljs or .cljc).","row":261},{"fixed-arities":[1],"end-row":293,"ns":"cljs.repl","name":"read-source-map","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Return the source map for the JavaScript source file.","row":275},{"fixed-arities":[1],"end-row":301,"ns":"cljs.repl","name":"ns-info","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Given a path to a js source file return the ns info for the corresponding\n   ClojureScript file if it exists.","row":295},{"fixed-arities":[3],"end-row":322,"private":true,"ns":"cljs.repl","name":"mapped-line-column-call","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[source-map line column]"],"doc":"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.","row":303},{"fixed-arities":[2],"end-row":362,"private":true,"ns":"cljs.repl","name":"mapped-frame","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[{:keys [function file line column]} opts]"],"doc":"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.","row":324},{"fixed-arities":[1,2],"end-row":392,"ns":"cljs.repl","name":"mapped-stacktrace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[stacktrace]","[stacktrace opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","row":364},{"arglist-strs":["[file {:keys [output-dir temp-output-dir?]}]"],"end-row":403,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"file-display","ns":"cljs.repl","row":394},{"fixed-arities":[1,2],"end-row":415,"ns":"cljs.repl","name":"print-mapped-stacktrace","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[stacktrace]","[stacktrace opts]"],"doc":"Given a vector representing the canonicalized JavaScript stacktrace\n   print the ClojureScript stacktrace. See mapped-stacktrace.","row":405},{"end-row":418,"filename":"cljs/repl.cljc","lang":"cljs","name":"st","ns":"cljs.repl","row":418},{"fixed-arities":[4,5],"end-row":491,"private":true,"ns":"cljs.repl","name":"display-error","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env ret form opts]","[repl-env ret form f opts]"],"row":469},{"fixed-arities":[1],"end-row":496,"private":true,"ns":"cljs.repl","name":"bytes-to-base64-str","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[bytes]"],"doc":"Convert a byte array into a base-64 encoded string.","row":493},{"fixed-arities":[4,6,5],"end-row":583,"ns":"cljs.repl","name":"evaluate-form","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env env filename form]","[repl-env env filename form wrap]","[repl-env env filename form wrap opts]"],"doc":"Evaluate a ClojureScript form in the JavaScript environment. Returns a\n  string which is the ClojureScript return value. This string may or may\n  not be readable by the Clojure reader.","row":498},{"arglist-strs":["[repl-env filename res]"],"end-row":590,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"cljs","name":"load-stream","ns":"cljs.repl","row":585},{"arglist-strs":["[repl-env f]","[repl-env f opts]"],"end-row":626,"filename":"cljs/repl.cljc","fixed-arities":[3,2],"lang":"cljs","name":"load-file","ns":"cljs.repl","row":592},{"fixed-arities":[1],"end-row":635,"private":true,"ns":"cljs.repl","name":"root-resource","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[lib]"],"doc":"Returns the root directory path for a lib","row":628},{"fixed-arities":[1],"end-row":641,"private":true,"ns":"cljs.repl","name":"root-directory","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[lib]"],"doc":"Returns the root resource path for a lib","row":637},{"fixed-arities":[1],"end-row":650,"private":true,"ns":"cljs.repl","name":"load-path->cp-path","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[path]"],"row":643},{"fixed-arities":[1],"end-row":671,"private":true,"ns":"cljs.repl","name":"wrap-fn","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[form]"],"row":652},{"fixed-arities":[1],"end-row":683,"private":true,"ns":"cljs.repl","name":"init-wrap-fn","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[form]"],"row":673},{"fixed-arities":[4,3],"end-row":699,"ns":"cljs.repl","name":"eval-cljs","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[repl-env env form]","[repl-env env form opts]"],"doc":"Given a REPL evaluation environment, an analysis environment, and a\n   form, evaluate the form and return the result. The result is always the value\n   represented as a string.","row":685},{"arglist-strs":["[specs]"],"end-row":704,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"decorate-specs","ns":"cljs.repl","row":701},{"fixed-arities":[1],"end-row":747,"private":true,"ns":"cljs.repl","name":"wrap-self","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[f]"],"doc":"Takes a self-ish fn and returns it wrapped with exception handling.\n  Compiler state is restored if self-ish fn fails.","row":734},{"fixed-arities":[2],"end-row":752,"private":true,"ns":"cljs.repl","name":"wrap-special-fns","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[wfn fns]"],"row":749},{"end-row":793,"filename":"cljs/repl.cljc","lang":"cljs","name":"default-special-fns","ns":"cljs.repl","row":754},{"fixed-arities":[1,2],"end-row":803,"ns":"cljs.repl","name":"analyze-source","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[src-dir]","[src-dir opts]"],"doc":"Given a source directory, analyzes all .cljs files. Used to populate\n  (:cljs.analyzer/namespaces compiler-env) so as to support code reflection.","row":795},{"arglist-strs":["[]"],"end-row":806,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"cljs","name":"repl-title","ns":"cljs.repl","row":805},{"arglist-strs":["[]"],"end-row":809,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"cljs","name":"repl-quit-prompt","ns":"cljs.repl","row":808},{"arglist-strs":["[]"],"end-row":812,"filename":"cljs/repl.cljc","fixed-arities":[0],"lang":"cljs","name":"repl-prompt","ns":"cljs.repl","row":811},{"fixed-arities":[1],"end-row":818,"ns":"cljs.repl","name":"demunge","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[fn-name]"],"doc":"Given a string representation of a fn class,\n  as in a stack trace element, returns a readable version.","row":814},{"end-row":824,"filename":"cljs/repl.cljc","lang":"cljs","name":"core-namespaces","ns":"cljs.repl","private":true,"row":820},{"fixed-arities":[1],"end-row":830,"private":true,"ns":"cljs.repl","name":"core-class?","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[class-name]"],"row":826},{"fixed-arities":[1],"end-row":838,"private":true,"ns":"cljs.repl","name":"file-name","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[full-path]"],"doc":"Helper to get just the file name part of a path or nil","row":832},{"fixed-arities":[2],"end-row":848,"private":true,"ns":"cljs.repl","name":"java-loc->source","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[clazz method]"],"doc":"Convert Java class name and method symbol to source symbol, either a\n  Clojure function or Java class and method.","row":840},{"fixed-arities":[1],"end-row":905,"ns":"cljs.repl","name":"ex-triage","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[datafied-throwable]"],"doc":"Returns an analysis of the phase, error, cause, and location of an error that occurred\n  based on Throwable data, as returned by Throwable->map. All attributes other than phase\n  are optional:\n    :clojure.error/phase - keyword phase indicator, one of:\n      :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion\n      :execution :read-eval-result :print-eval-result\n    :clojure.error/source - file name (no path)\n    :clojure.error/line - integer line number\n    :clojure.error/column - integer column number\n    :clojure.error/symbol - symbol being expanded/compiled/invoked\n    :clojure.error/class - cause exception class symbol\n    :clojure.error/cause - cause exception message\n    :clojure.error/spec - explain-data for spec error","row":850},{"fixed-arities":[1],"end-row":980,"ns":"cljs.repl","name":"ex-str","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[{:keys [:clojure.error/phase :clojure.error/source :clojure.error/line :clojure.error/column :clojure.error/symbol :clojure.error/class :clojure.error/cause :clojure.error/spec] :as triage-data}]"],"doc":"Returns a string from exception data, as produced by ex-triage.\n  The first line summarizes the exception phase and location.\n  The subsequent lines describe the cause.","row":907},{"arglist-strs":["[e repl-env opts]"],"end-row":998,"filename":"cljs/repl.cljc","fixed-arities":[3],"lang":"cljs","name":"repl-caught","ns":"cljs.repl","row":982},{"arglist-strs":["[x]"],"end-row":1001,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"repl-nil?","ns":"cljs.repl","row":1000},{"arglist-strs":["[renv inits]"],"end-row":1017,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"run-inits","ns":"cljs.repl","row":1003},{"arglist-strs":["[opts]"],"end-row":1026,"filename":"cljs/repl.cljc","fixed-arities":[1],"lang":"cljs","name":"maybe-install-npm-deps","ns":"cljs.repl","row":1019},{"arglist-strs":["[quit-prompt prompt]"],"end-row":1031,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"initial-prompt","ns":"cljs.repl","row":1028},{"arglist-strs":["[repl-env {:keys [init inits need-prompt quit-prompt prompt flush read eval print caught reader print-no-newline source-map-inline wrap repl-requires ::fast-initial-prompt? compiler-env bind-err] :or {need-prompt #(if (readers/indexing-reader? *in*) (== (readers/get-column-number *in*) 1) (identity true)) fast-initial-prompt? false quit-prompt repl-title prompt repl-prompt flush flush read repl-read eval eval-cljs print println caught repl-caught reader #(readers/source-logging-push-back-reader *in* 1 \"<NO_SOURCE_FILE>\") print-no-newline print source-map-inline true repl-requires '[[cljs.repl :refer-macros [source doc find-doc apropos dir pst]] [cljs.pprint :refer [pprint] :refer-macros [pp]]] bind-err true} :as opts}]"],"end-row":1226,"filename":"cljs/repl.cljc","fixed-arities":[2],"lang":"cljs","name":"repl*","ns":"cljs.repl","row":1033},{"arglist-strs":["[repl-env & opts]"],"doc":"Generic, reusable, read-eval-print loop. By default, reads from *in* using\n  a c.t.r.reader-types/source-logging-push-back-reader,\n  writes to *out*, and prints exception summaries to *err*. If you use the\n  default :read hook, *in* must either be an instance of\n  c.t.r.reader-types/PushbackReader or duplicate its behavior of both supporting\n  unread and collapsing CR, LF, and CRLF into a single \\newline. Options\n  are sequential keyword-value pairs. The first argument is the JavaScript\n  evaluation environment, the second argument is an extended version of the\n  standard ClojureScript compiler options. In addition to ClojureScript compiler\n  build options it also take a set of options similar to clojure.main/repl with\n  adjustments for ClojureScript evalution and compilation model:\n\n  Available clojure.main/repl style options and their defaults:\n\n     - :init, function of no arguments, initialization hook called with\n       bindings for set!-able vars in place.\n       default: #()\n\n     - :need-prompt, function of no arguments, called before each\n       read-eval-print except the first, the user will be prompted if it\n       returns true.\n       default: #(if (c.t.r.readers-types/indexing-reader? *in*)\n                   (== (c.t.r.reader-types/get-column-number *in*) 1)\n                   (identity true))\n\n     - :prompt, function of no arguments, prompts for more input.\n       default: repl-prompt\n\n     - :flush, function of no arguments, flushes output\n       default: flush\n\n     - :read, function of two arguments, reads from *in*:\n         - returns its first argument to request a fresh prompt\n           - depending on need-prompt, this may cause the repl to prompt\n             before reading again\n         - returns its second argument to request an exit from the repl\n         - else returns the next object read from the input stream\n       default: repl-read\n\n     - :eval, function of one argument, returns the evaluation of its\n       argument. The eval function must take repl-env, the JavaScript evaluation\n       environment, env, the ClojureScript analysis environment, the form\n       and opts, the standard ClojureScript REPL/compiler options.\n       default: eval\n\n     - :print, function of one argument, prints its argument to the output\n       default: println\n\n     - :caught, function of three arguments, a throwable, called when\n       read, eval, or print throws an exception or error default. The second\n       argument is the JavaScript evaluation environment this permits context\n       sensitive handling if necessary. The third argument is opts, the standard\n       ClojureScript REPL/compiler options. In the case of errors or exception\n       in the JavaScript target, these will be thrown as\n       clojure.lang.IExceptionInfo instances.\n       default: repl-caught\n\n     - :reader, the c.t.r reader to use.\n       default: c.t.r.reader-types/source-logging-push-back-reader\n\n     - :print-no-newline, print without a newline.\n       default: print\n\n     - :source-map-inline, whether inline source maps should be enabled. Most\n       useful in browser context. Implies using a fresh reader for each form.\n       default: true","end-row":1298,"filename":"cljs/repl.cljc","lang":"cljs","name":"repl","ns":"cljs.repl","row":1228},{"end-row":1409,"filename":"cljs/repl.cljc","lang":"cljs","name":"special-doc-map","ns":"cljs.repl","row":1303},{"fixed-arities":[1],"end-row":1414,"private":true,"ns":"cljs.repl","name":"special-doc","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[name-symbol]"],"row":1411},{"end-row":1424,"filename":"cljs/repl.cljc","lang":"cljs","name":"repl-special-doc-map","ns":"cljs.repl","row":1416},{"fixed-arities":[1],"end-row":1429,"private":true,"ns":"cljs.repl","name":"repl-special-doc","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[name-symbol]"],"row":1426},{"fixed-arities":[1],"end-row":1469,"ns":"cljs.repl","name":"doc","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[name]"],"doc":"Prints documentation for a var or special form given its name,\n  or for a spec if given a keyword","row":1431},{"fixed-arities":[1],"end-row":1493,"ns":"cljs.repl","name":"find-doc","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[re-string-or-pattern]"],"doc":"Prints documentation for any var whose documentation or name\n contains a match for re-string-or-pattern","row":1471},{"fixed-arities":[2],"end-row":1518,"ns":"cljs.repl","name":"source-fn","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[env x]"],"doc":"Returns a string of the source code for the given symbol, if it can\n  find it.  This requires that the symbol resolve to a Var defined in\n  a namespace for which the .clj is in the classpath.  Returns nil if\n  it can't find the source.  For most REPL usage, 'source' is more\n  convenient.\n\n  Example: (source-fn 'filter)","row":1495},{"end-row":1521,"filename":"cljs/repl.cljc","lang":"cljs","name":"cenv","ns":"cljs.repl","row":1521},{"end-row":1522,"filename":"cljs/repl.cljc","lang":"cljs","name":"aenv","ns":"cljs.repl","row":1522},{"fixed-arities":[1],"end-row":1538,"ns":"cljs.repl","name":"source","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[n]"],"doc":"Prints the source code for the given symbol, if it can find it.\n  This requires that the symbol resolve to a Var defined in a\n  namespace for which the .cljs is in the classpath.\n\n  Example: (source filter)","row":1531},{"fixed-arities":[1],"end-row":1545,"private":true,"ns":"cljs.repl","name":"named-publics-vars","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[ns]"],"doc":"Gets the public vars in a namespace that are not anonymous.","row":1540},{"fixed-arities":[1],"end-row":1562,"ns":"cljs.repl","name":"apropos","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[str-or-pattern]"],"doc":"Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.","row":1547},{"fixed-arities":[1],"end-row":1570,"private":true,"ns":"cljs.repl","name":"resolve-ns","lang":"cljs","filename":"cljs/repl.cljc","arglist-strs":["[ns-sym]"],"doc":"Resolves a namespace symbol to a namespace by first checking to see if it\n  is a namespace alias.","row":1564},{"fixed-arities":[1],"end-row":1576,"ns":"cljs.repl","name":"dir","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[ns]"],"doc":"Prints a sorted directory of public vars in a namespace","row":1572},{"fixed-arities":[0,1],"end-row":1595,"ns":"cljs.repl","name":"pst","lang":"cljs","filename":"cljs/repl.cljc","macro":true,"arglist-strs":["[]","[e]"],"row":1578},{"arglist-strs":["[{n :ns nm :name :as m}]"],"end-row":60,"filename":"cljs/repl.cljs","fixed-arities":[1],"name":"print-doc","ns":"cljs.repl","row":15},{"arglist-strs":["[o]"],"doc":"Constructs a data representation for a Error with keys:\n    :cause - root cause message\n    :phase - error phase\n    :via - cause chain, with cause keys:\n             :type - exception class symbol\n             :message - exception message\n             :data - ex-data\n             :at - top stack element\n    :trace - root cause stack elements","end-row":97,"filename":"cljs/repl.cljs","fixed-arities":[1],"name":"Error->map","ns":"cljs.repl","row":62},{"arglist-strs":["[datafied-throwable]"],"doc":"Returns an analysis of the phase, error, cause, and location of an error that occurred\n  based on Throwable data, as returned by Throwable->map. All attributes other than phase\n  are optional:\n    :clojure.error/phase - keyword phase indicator, one of:\n      :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion\n      :execution :read-eval-result :print-eval-result\n    :clojure.error/source - file name (no path)\n    :clojure.error/line - integer line number\n    :clojure.error/column - integer column number\n    :clojure.error/symbol - symbol being expanded/compiled/invoked\n    :clojure.error/class - cause exception class symbol\n    :clojure.error/cause - cause exception message\n    :clojure.error/spec - explain-data for spec error","end-row":154,"filename":"cljs/repl.cljs","fixed-arities":[1],"name":"ex-triage","ns":"cljs.repl","row":99},{"arglist-strs":["[{:clojure.error/keys [phase source line column symbol class cause spec] :as triage-data}]"],"doc":"Returns a string from exception data, as produced by ex-triage.\n  The first line summarizes the exception phase and location.\n  The subsequent lines describe the cause.","end-row":227,"filename":"cljs/repl.cljs","fixed-arities":[1],"name":"ex-str","ns":"cljs.repl","row":156},{"arglist-strs":["[error]"],"end-row":230,"filename":"cljs/repl.cljs","fixed-arities":[1],"name":"error->str","ns":"cljs.repl","row":229}]