[{"fixed-arities":[4],"end-row":32,"meta":{},"name-end-col":13,"name-end-row":18,"name-row":18,"ns":"clojure.zip","name":"zipper","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L18","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":16,"arglist-strs":["[branch? children make-node root]"],"doc":"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.","row":18},{"fixed-arities":[1],"end-row":40,"meta":{},"name-end-col":14,"name-end-row":34,"name-row":34,"ns":"clojure.zip","name":"seq-zip","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L34","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for nested sequences, given a root sequence","row":34},{"fixed-arities":[1],"end-row":48,"meta":{},"name-end-col":17,"name-end-row":42,"name-row":42,"ns":"clojure.zip","name":"vector-zip","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L42","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for nested vectors, given a root vector","row":42},{"fixed-arities":[1],"end-row":58,"meta":{},"name-end-col":14,"name-end-row":50,"name-row":50,"ns":"clojure.zip","name":"xml-zip","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L50","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":19,"arglist-strs":["[root]"],"doc":"Returns a zipper for xml elements (as from xml/parse),\n  given a root element","row":50},{"fixed-arities":[1],"end-row":62,"meta":{},"name-end-col":11,"name-end-row":60,"name-row":60,"ns":"clojure.zip","name":"node","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L60","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":17,"arglist-strs":["[loc]"],"doc":"Returns the node at loc","row":60},{"fixed-arities":[1],"end-row":67,"meta":{},"name-end-col":14,"name-end-row":64,"name-row":64,"ns":"clojure.zip","name":"branch?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L64","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":44,"arglist-strs":["[loc]"],"doc":"Returns true if the node at loc is a branch","row":64},{"fixed-arities":[1],"end-row":74,"meta":{},"name-end-col":15,"name-end-row":69,"name-row":69,"ns":"clojure.zip","name":"children","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L69","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":49,"arglist-strs":["[loc]"],"doc":"Returns a seq of the children of node at loc, which must be a branch","row":69},{"fixed-arities":[3],"end-row":80,"meta":{},"name-end-col":16,"name-end-row":76,"name-row":76,"ns":"clojure.zip","name":"make-node","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L76","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":49,"arglist-strs":["[loc node children]"],"doc":"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.","row":76},{"fixed-arities":[1],"end-row":85,"meta":{},"name-end-col":11,"name-end-row":82,"name-row":82,"ns":"clojure.zip","name":"path","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L82","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":23,"arglist-strs":["[loc]"],"doc":"Returns a seq of nodes leading to this loc","row":82},{"fixed-arities":[1],"end-row":90,"meta":{},"name-end-col":12,"name-end-row":87,"name-row":87,"ns":"clojure.zip","name":"lefts","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L87","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":24,"arglist-strs":["[loc]"],"doc":"Returns a seq of the left siblings of this loc","row":87},{"fixed-arities":[1],"end-row":95,"meta":{},"name-end-col":13,"name-end-row":92,"name-row":92,"ns":"clojure.zip","name":"rights","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L92","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":18,"arglist-strs":["[loc]"],"doc":"Returns a seq of the right siblings of this loc","row":92},{"fixed-arities":[1],"end-row":109,"meta":{},"name-end-col":11,"name-end-row":98,"name-row":98,"ns":"clojure.zip","name":"down","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L98","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":52,"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children","row":98},{"fixed-arities":[1],"end-row":122,"meta":{},"name-end-col":9,"name-end-row":111,"name-row":111,"ns":"clojure.zip","name":"up","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L111","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":37,"arglist-strs":["[loc]"],"doc":"Returns the loc of the parent of the node at this loc, or nil if at\n  the top","row":111},{"fixed-arities":[1],"end-row":133,"meta":{},"name-end-col":11,"name-end-row":124,"name-row":124,"ns":"clojure.zip","name":"root","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L124","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":25,"arglist-strs":["[loc]"],"doc":"zips all the way up and returns the root node, reflecting any\n changes.","row":124},{"fixed-arities":[1],"end-row":140,"meta":{},"name-end-col":12,"name-end-row":135,"name-row":135,"ns":"clojure.zip","name":"right","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L135","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":77,"arglist-strs":["[loc]"],"doc":"Returns the loc of the right sibling of the node at this loc, or nil","row":135},{"fixed-arities":[1],"end-row":148,"meta":{},"name-end-col":16,"name-end-row":142,"name-row":142,"ns":"clojure.zip","name":"rightmost","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L142","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":15,"arglist-strs":["[loc]"],"doc":"Returns the loc of the rightmost sibling of the node at this loc, or self","row":142},{"fixed-arities":[1],"end-row":155,"meta":{},"name-end-col":11,"name-end-row":150,"name-row":150,"ns":"clojure.zip","name":"left","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L150","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc]"],"doc":"Returns the loc of the left sibling of the node at this loc, or nil","row":150},{"fixed-arities":[1],"end-row":163,"meta":{},"name-end-col":15,"name-end-row":157,"name-row":157,"ns":"clojure.zip","name":"leftmost","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L157","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":15,"arglist-strs":["[loc]"],"doc":"Returns the loc of the leftmost sibling of the node at this loc, or self","row":157},{"fixed-arities":[2],"end-row":172,"meta":{},"name-end-col":18,"name-end-row":165,"name-row":165,"ns":"clojure.zip","name":"insert-left","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L165","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the left sibling of the node at this loc,\n without moving","row":165},{"fixed-arities":[2],"end-row":181,"meta":{},"name-end-col":19,"name-end-row":174,"name-row":174,"ns":"clojure.zip","name":"insert-right","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L174","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":86,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the right sibling of the node at this loc,\n  without moving","row":174},{"fixed-arities":[2],"end-row":187,"meta":{},"name-end-col":14,"name-end-row":183,"name-row":183,"ns":"clojure.zip","name":"replace","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L183","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":66,"arglist-strs":["[loc node]"],"doc":"Replaces the node at this loc, without moving","row":183},{"end-row":192,"meta":{},"name-end-col":11,"name-end-row":189,"name-row":189,"ns":"clojure.zip","name":"edit","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L189","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":45,"arglist-strs":["[loc f & args]"],"varargs-min-arity":2,"doc":"Replaces the node at this loc with the value of (f node args)","row":189},{"fixed-arities":[2],"end-row":198,"meta":{},"name-end-col":19,"name-end-row":194,"name-row":194,"ns":"clojure.zip","name":"insert-child","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L194","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":73,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the leftmost child of the node at this loc,\n  without moving","row":194},{"fixed-arities":[2],"end-row":204,"meta":{},"name-end-col":19,"name-end-row":200,"name-row":200,"ns":"clojure.zip","name":"append-child","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L200","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":77,"arglist-strs":["[loc item]"],"doc":"Inserts the item as the rightmost child of the node at this loc,\n  without moving","row":200},{"fixed-arities":[1],"end-row":219,"meta":{},"name-end-col":11,"name-end-row":206,"name-row":206,"ns":"clojure.zip","name":"next","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L206","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":32,"arglist-strs":["[loc]"],"doc":"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.","row":206},{"fixed-arities":[1],"end-row":230,"meta":{},"name-end-col":11,"name-end-row":221,"name-row":221,"ns":"clojure.zip","name":"prev","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L221","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":17,"arglist-strs":["[loc]"],"doc":"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.","row":221},{"fixed-arities":[1],"end-row":235,"meta":{},"name-end-col":11,"name-end-row":232,"name-row":232,"ns":"clojure.zip","name":"end?","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L232","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":22,"arglist-strs":["[loc]"],"doc":"Returns true if loc represents the end of a depth-first walk","row":232},{"fixed-arities":[1],"end-row":251,"meta":{},"name-end-col":13,"name-end-row":237,"name-row":237,"ns":"clojure.zip","name":"remove","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L237","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":7,"end-col":37,"arglist-strs":["[loc]"],"doc":"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.","row":237},{"end-row":257,"meta":{},"name-end-col":10,"name-end-row":257,"name-row":257,"ns":"clojure.zip","name":"data","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L257","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":6,"end-col":32,"row":257},{"end-row":258,"meta":{},"name-end-col":8,"name-end-row":258,"name-row":258,"ns":"clojure.zip","name":"dz","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/clojure/zip.cljs#L258","filename":"/src/main/cljs/clojure/zip.cljs","col":1,"name-col":6,"end-col":27,"row":258}]