[{"fixed-arities":[2],"end-row":18,"private":true,"ns":"cljs.vendor.clojure.tools.reader.reader-types","name":"update!","filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","macro":true,"arglist-strs":["[what f]"],"row":17},{"end-row":28,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"Reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":24},{"arglist-strs":["[reader]"],"doc":"Returns the next char from the Reader, nil if the end of stream has been reached","end-row":26,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"read-char","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":25},{"arglist-strs":["[reader]"],"doc":"Returns the next char from the Reader without removing it from the reader stream","end-row":28,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"peek-char","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":27},{"end-row":32,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"IPushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":30},{"arglist-strs":["[reader ch]"],"doc":"Pushes back a single character on to the stream","end-row":32,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[2],"name":"unread","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":31},{"end-row":40,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"IndexingReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":34},{"arglist-strs":["[reader]"],"doc":"Returns the line number of the next character to be read from the stream","end-row":36,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"get-line-number","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":35},{"arglist-strs":["[reader]"],"doc":"Returns the column number of the next character to be read from the stream","end-row":38,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"get-column-number","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":37},{"arglist-strs":["[reader]"],"doc":"Returns the file name the reader is reading from, or nil","end-row":40,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"get-file-name","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":39},{"end-row":56,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"StringReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":46},{"arglist-strs":["[s s-len s-pos]"],"end-row":56,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[3],"name":"->StringReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":46},{"end-row":77,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"InputStreamReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":58},{"arglist-strs":["[is buf]"],"end-row":77,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[2],"name":"->InputStreamReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":58},{"end-row":103,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"PushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":79},{"arglist-strs":["[rdr buf buf-len buf-pos]"],"end-row":103,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[4],"name":"->PushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":79},{"end-row":169,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"IndexingPushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":105},{"arglist-strs":["[rdr line column line-start? prev prev-column file-name normalize?]"],"end-row":169,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[8],"name":"->IndexingPushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":105},{"end-row":198,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"ReaderCoercer","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":197},{"arglist-strs":["[rdr]"],"end-row":198,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"to-rdr","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":198},{"end-row":200,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"string-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":200},{"end-row":200,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":200},{"end-row":216,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"PushbackReaderCoercer","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":215},{"arglist-strs":["[rdr buf-len]"],"end-row":216,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[2],"name":"to-pbr","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":216},{"arglist-strs":["[obj m]"],"doc":"Returns an object of the same type and value as `obj`, with its\n  metadata merged over `m`.","end-row":241,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[2],"name":"merge-meta","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":236},{"fixed-arities":[1],"end-row":248,"private":true,"ns":"cljs.vendor.clojure.tools.reader.reader-types","name":"peek-source-log","filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","arglist-strs":["[source-log-frames]"],"doc":"Returns a string containing the contents of the top most source\n  logging frame.","row":243},{"fixed-arities":[2],"end-row":254,"private":true,"ns":"cljs.vendor.clojure.tools.reader.reader-types","name":"log-source-char","filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","arglist-strs":["[source-log-frames char]"],"doc":"Logs `char` to all currently active source logging frames.","row":250},{"fixed-arities":[1],"end-row":261,"private":true,"ns":"cljs.vendor.clojure.tools.reader.reader-types","name":"drop-last-logged-char","filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","arglist-strs":["[source-log-frames]"],"doc":"Removes the last logged character from all currently active source\n  logging frames. Called when pushing a character back.","row":256},{"end-row":314,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","name":"SourceLoggingPushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":263},{"arglist-strs":["[rdr line column line-start? prev prev-column file-name source-log-frames normalize?]"],"end-row":314,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[9],"name":"->SourceLoggingPushbackReader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":263},{"arglist-strs":["[reader f]"],"end-row":325,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[2],"name":"log-source*","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":316},{"arglist-strs":["[rdr]"],"doc":"Returns true if the reader satisfies IndexingReader","end-row":340,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"indexing-reader?","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":332},{"arglist-strs":["[s]"],"doc":"Creates a StringReader from a given string","end-row":345,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"string-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":342},{"arglist-strs":["[rdr]","[rdr buf-len]"],"doc":"Creates a PushbackReader from a given reader or string","end-row":350,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1,2],"name":"push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":347},{"arglist-strs":["[s]","[s buf-len]"],"doc":"Creates a PushbackReader from a given string","end-row":357,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1,2],"name":"string-push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":352},{"arglist-strs":["[is]"],"doc":"Creates an InputStreamReader from an InputStream","end-row":362,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"input-stream-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":359},{"arglist-strs":["[is]","[is buf-len]"],"doc":"Creates a PushbackReader from a given InputStream","end-row":369,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1,2],"name":"input-stream-push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":364},{"arglist-strs":["[s-or-rdr]","[s-or-rdr buf-len]","[s-or-rdr buf-len file-name]"],"doc":"Creates an IndexingPushbackReader from a given string or PushbackReader","end-row":379,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1,3,2],"name":"indexing-push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":371},{"arglist-strs":["[s-or-rdr]","[s-or-rdr buf-len]","[s-or-rdr buf-len file-name]"],"doc":"Creates a SourceLoggingPushbackReader from a given string or PushbackReader","end-row":399,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1,3,2],"name":"source-logging-push-back-reader","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":381},{"arglist-strs":["[]","[rdr]"],"doc":"Reads a line from the reader or from *in* if no reader is specified","end-row":412,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[0,1],"name":"read-line","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":401},{"arglist-strs":["[rdr]"],"end-row":416,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"source-logging-reader?","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":414},{"arglist-strs":["[reader & body]"],"doc":"If reader is a SourceLoggingPushbackReader, execute body in a source\n  logging context. Otherwise, execute body, returning the result.","end-row":425,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","macro":true,"name":"log-source","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":418},{"arglist-strs":["[rdr]"],"doc":"Returns true if rdr is an IndexingReader and the current char starts a new line","end-row":431,"filename":"cljs/vendor/clojure/tools/reader/reader_types.clj","fixed-arities":[1],"name":"line-start?","ns":"cljs.vendor.clojure.tools.reader.reader-types","row":427}]