[{"fixed-arities":[1],"end-row":22,"name-end-col":25,"name-end-row":20,"private":true,"name-row":20,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"fail","defined-by":"clojure.core/defmacro","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","macro":true,"col":1,"name-col":21,"end-col":37,"arglist-strs":["[msg]"],"row":20},{"fixed-arities":[1,2],"end-row":26,"name-end-col":27,"name-end-row":24,"private":true,"name-row":24,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"verify","defined-by":"clojure.core/defmacro","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","macro":true,"col":1,"name-col":21,"end-col":60,"arglist-strs":["[test msg]","[test]"],"row":24},{"fixed-arities":[2],"end-row":30,"name-end-col":18,"name-end-row":28,"private":true,"name-row":28,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"divisible?","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":25,"arglist-strs":["[num div]"],"row":28},{"fixed-arities":[2],"end-row":34,"name-end-col":20,"name-end-row":32,"private":true,"name-row":32,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"indivisible?","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[num div]"],"row":32},{"fixed-arities":[1],"end-row":41,"name-end-col":17,"name-end-row":40,"private":true,"name-row":40,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"parse-int","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[s]"],"row":40},{"fixed-arities":[2],"end-row":49,"name-end-col":23,"name-end-row":43,"private":true,"name-row":43,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"zero-fill-right","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[s width]"],"row":43},{"end-row":121,"name-end-col":21,"name-end-row":51,"name-row":51,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"parse-timestamp","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":6,"end-col":65,"doc":"Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n","row":51},{"fixed-arities":[1],"end-row":131,"name-end-col":18,"name-end-row":127,"private":true,"name-row":127,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"leap-year?","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":36,"arglist-strs":["[year]"],"row":127},{"end-row":137,"name-end-col":29,"name-end-row":133,"private":true,"name-row":133,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"days-in-month","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":16,"end-col":54,"row":133},{"fixed-arities":[1],"end-row":157,"name-end-col":16,"name-end-row":139,"name-row":139,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"validated","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":7,"end-col":61,"arglist-strs":["[new-instance]"],"doc":"Return a function which constructs and instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.","row":139},{"end-row":170,"name-end-col":57,"name-end-row":163,"private":true,"name-row":163,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"thread-local-utc-date-format","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":29,"end-col":66,"row":163},{"fixed-arities":[2],"end-row":178,"name-end-col":18,"name-end-row":172,"private":true,"name-row":172,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-date","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[d w]"],"doc":"Print a java.util.Date as RFC3339 timestamp, always in UTC.","row":172},{"fixed-arities":[2],"end-row":198,"name-end-col":22,"name-end-row":188,"private":true,"name-row":188,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-calendar","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[c w]"],"doc":"Print a java.util.Calendar as RFC3339 timestamp, preserving timezone.","row":188},{"end-row":215,"name-end-col":62,"name-end-row":209,"private":true,"name-row":209,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"thread-local-utc-timestamp-format","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":29,"end-col":66,"row":209},{"fixed-arities":[2],"end-row":226,"name-end-col":23,"name-end-row":217,"private":true,"name-row":217,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-timestamp","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":22,"arglist-strs":["[ts w]"],"doc":"Print a java.sql.Timestamp as RFC3339 timestamp, always in UTC.","row":217},{"fixed-arities":[10],"end-row":251,"name-end-col":26,"name-end-row":240,"private":true,"name-row":240,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-calendar","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":60,"arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.util.Calendar, preserving the timezone\noffset, but truncating the subsecond fraction to milliseconds.","row":240},{"fixed-arities":[10],"end-row":260,"name-end-col":22,"name-end-row":253,"private":true,"name-row":253,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-date","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":75,"arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.util.Date, which expresses the original instant as\nmilliseconds since the epoch, UTC.","row":253},{"fixed-arities":[10],"end-row":272,"name-end-col":27,"name-end-row":262,"private":true,"name-row":262,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-timestamp","defined-by":"clojure.core/defn-","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":8,"end-col":30,"arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.sql.Timestamp, which has nanosecond precision.","row":262},{"end-row":278,"name-end-col":23,"name-end-row":274,"name-row":274,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"read-instant-date","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":6,"end-col":56,"doc":"To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.","row":274},{"end-row":284,"name-end-col":27,"name-end-row":280,"name-row":280,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"read-instant-calendar","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":6,"end-col":60,"doc":"To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.","row":280},{"end-row":291,"name-end-col":28,"name-end-row":286,"name-row":286,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"read-instant-timestamp","defined-by":"clojure.core/def","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":6,"end-col":61,"doc":"To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.","row":286},{"fixed-arities":[1],"end-row":297,"name-end-col":26,"name-end-row":295,"name-row":295,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"default-uuid-reader","defined-by":"clojure.core/defn","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","col":1,"name-col":7,"end-col":36,"arglist-strs":["[form]"],"row":295}]