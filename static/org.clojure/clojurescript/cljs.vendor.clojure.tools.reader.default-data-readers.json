[{"fixed-arities":[1],"end-row":22,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"fail","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","macro":true,"arglist-strs":["[msg]"],"row":20},{"fixed-arities":[1,2],"end-row":26,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"verify","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","macro":true,"arglist-strs":["[test msg]","[test]"],"row":24},{"arglist-strs":["[num div]"],"end-row":30,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[2],"name":"divisible?","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":28},{"arglist-strs":["[num div]"],"end-row":34,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[2],"name":"indivisible?","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":32},{"arglist-strs":["[s]"],"end-row":41,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[1],"name":"parse-int","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":40},{"arglist-strs":["[s width]"],"end-row":49,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[2],"name":"zero-fill-right","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":43},{"doc":"Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n","end-row":121,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"parse-timestamp","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":51},{"arglist-strs":["[year]"],"end-row":131,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[1],"name":"leap-year?","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":127},{"end-row":137,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"days-in-month","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":133},{"arglist-strs":["[new-instance]"],"doc":"Return a function which constructs and instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.","end-row":157,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[1],"name":"validated","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":139},{"end-row":170,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"thread-local-utc-date-format","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":163},{"fixed-arities":[2],"end-row":178,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-date","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[d w]"],"doc":"Print a java.util.Date as RFC3339 timestamp, always in UTC.","row":172},{"fixed-arities":[2],"end-row":198,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-calendar","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[c w]"],"doc":"Print a java.util.Calendar as RFC3339 timestamp, preserving timezone.","row":188},{"end-row":215,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"thread-local-utc-timestamp-format","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","private":true,"row":209},{"fixed-arities":[2],"end-row":226,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"print-timestamp","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[ts w]"],"doc":"Print a java.sql.Timestamp as RFC3339 timestamp, always in UTC.","row":217},{"fixed-arities":[10],"end-row":251,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-calendar","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.util.Calendar, preserving the timezone\noffset, but truncating the subsecond fraction to milliseconds.","row":240},{"fixed-arities":[10],"end-row":260,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-date","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.util.Date, which expresses the original instant as\nmilliseconds since the epoch, UTC.","row":253},{"fixed-arities":[10],"end-row":272,"private":true,"ns":"cljs.vendor.clojure.tools.reader.default-data-readers","name":"construct-timestamp","filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","arglist-strs":["[years months days hours minutes seconds nanoseconds offset-sign offset-hours offset-minutes]"],"doc":"Construct a java.sql.Timestamp, which has nanosecond precision.","row":262},{"doc":"To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.","end-row":278,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"read-instant-date","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":274},{"doc":"To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.","end-row":284,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"read-instant-calendar","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":280},{"doc":"To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.","end-row":291,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","name":"read-instant-timestamp","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":286},{"arglist-strs":["[form]"],"end-row":297,"filename":"cljs/vendor/clojure/tools/reader/default_data_readers.clj","fixed-arities":[1],"name":"default-uuid-reader","ns":"cljs.vendor.clojure.tools.reader.default-data-readers","row":295}]