[{"end-row":31,"meta":null,"name-end-col":17,"name-end-row":28,"private":true,"name-row":28,"ns":"cljs.js","name":"debug-prn","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":27,"arglist-strs":["[& args]"],"varargs-min-arity":0,"row":28},{"fixed-arities":[1],"end-row":36,"meta":null,"name-end-col":18,"name-end-row":33,"name-row":33,"ns":"cljs.js","name":"ns->relpath","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":50,"arglist-strs":["[ns-sym]"],"doc":"Given a namespace as a symbol return the relative path sans extension","row":33},{"fixed-arities":[1],"end-row":42,"meta":null,"name-end-col":15,"name-end-row":38,"name-row":38,"ns":"cljs.js","name":"file->ns","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":34,"arglist-strs":["[file]"],"row":38},{"fixed-arities":[1],"end-row":49,"meta":null,"name-end-col":26,"name-end-row":44,"private":true,"name-row":44,"ns":"cljs.js","name":"drop-macros-suffix","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":17,"arglist-strs":["[ns-name]"],"row":44},{"fixed-arities":[1],"end-row":53,"meta":null,"name-end-col":27,"name-end-row":51,"private":true,"name-row":51,"ns":"cljs.js","name":"elide-macros-suffix","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":60,"arglist-strs":["[sym]"],"row":51},{"fixed-arities":[1],"end-row":59,"meta":null,"name-end-col":22,"name-end-row":55,"private":true,"name-row":55,"ns":"cljs.js","name":"resolve-symbol","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":53,"arglist-strs":["[sym]"],"row":55},{"fixed-arities":[2],"end-row":63,"meta":null,"name-end-col":12,"name-end-row":61,"private":true,"name-row":61,"ns":"cljs.js","name":"read","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":67,"arglist-strs":["[eof rdr]"],"row":61},{"fixed-arities":[1],"end-row":66,"meta":null,"name-end-col":13,"name-end-row":65,"private":true,"name-row":65,"ns":"cljs.js","name":"atom?","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":22,"arglist-strs":["[x]"],"row":65},{"fixed-arities":[1],"end-row":69,"meta":null,"name-end-col":19,"name-end-row":68,"private":true,"name-row":68,"ns":"cljs.js","name":"valid-name?","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":41,"arglist-strs":["[x]"],"row":68},{"fixed-arities":[1],"end-row":72,"meta":null,"name-end-col":19,"name-end-row":71,"private":true,"name-row":71,"ns":"cljs.js","name":"valid-opts?","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":26,"arglist-strs":["[x]"],"row":71},{"end-row":103,"meta":{"dynamic":true,"doc":"Each runtime environment provides a different way to load a library.\n  Whatever function *load-fn* is bound to will be passed two arguments - a\n  map and a callback function: The map will have the following keys:\n\n  :name   - the name of the library (a symbol)\n  :macros - modifier signaling a macros namespace load\n  :path   - munged relative library path (a string)\n\n  It is up to the implementor to correctly resolve the corresponding .cljs,\n  .cljc, or .js resource (the order must be respected). If :macros is true\n  resolution should only consider .clj or .cljc resources (the order must be\n  respected). Upon resolution the callback should be invoked with a map\n  containing the following keys:\n\n  :lang       - the language, :clj or :js\n  :source     - the source of the library (a string)\n  :file       - optional, the file path, it will be added to AST's :file keyword\n                (but not in :meta)\n  :cache      - optional, if a :clj namespace has been precompiled to :js, can\n                give an analysis cache for faster loads.\n  :source-map - optional, if a :clj namespace has been precompiled to :js, can\n                give a V3 source map JSON\n\n  If the resource could not be resolved, the callback should be invoked with\n  nil."},"name-end-col":12,"name-end-row":101,"name-row":101,"ns":"cljs.js","name":"*load-fn*","defined-by":"cljs.core/defonce","filename":"cljs/js.cljs","col":1,"name-col":3,"end-col":45,"doc":"Each runtime environment provides a different way to load a library.\n  Whatever function *load-fn* is bound to will be passed two arguments - a\n  map and a callback function: The map will have the following keys:\n\n  :name   - the name of the library (a symbol)\n  :macros - modifier signaling a macros namespace load\n  :path   - munged relative library path (a string)\n\n  It is up to the implementor to correctly resolve the corresponding .cljs,\n  .cljc, or .js resource (the order must be respected). If :macros is true\n  resolution should only consider .clj or .cljc resources (the order must be\n  respected). Upon resolution the callback should be invoked with a map\n  containing the following keys:\n\n  :lang       - the language, :clj or :js\n  :source     - the source of the library (a string)\n  :file       - optional, the file path, it will be added to AST's :file keyword\n                (but not in :meta)\n  :cache      - optional, if a :clj namespace has been precompiled to :js, can\n                give an analysis cache for faster loads.\n  :source-map - optional, if a :clj namespace has been precompiled to :js, can\n                give a V3 source map JSON\n\n  If the resource could not be resolved, the callback should be invoked with\n  nil.","row":74},{"end-row":119,"meta":{"dynamic":true,"doc":"Each runtime environment provides various ways to eval JavaScript\n  source. Whatever function *eval-fn* is bound to will be passed a map\n  containing the following keys:\n\n  :source - the source of the library (string)\n  :name   - used to unique identify the script (symbol)\n  :cache  - if the source was originally ClojureScript, will be given the\n            analysis cache.\n\n  The result of evaluation should be the return value."},"name-end-col":12,"name-end-row":117,"name-row":117,"ns":"cljs.js","name":"*eval-fn*","defined-by":"cljs.core/defonce","filename":"cljs/js.cljs","col":1,"name-col":3,"end-col":45,"doc":"Each runtime environment provides various ways to eval JavaScript\n  source. Whatever function *eval-fn* is bound to will be passed a map\n  containing the following keys:\n\n  :source - the source of the library (string)\n  :name   - used to unique identify the script (symbol)\n  :cache  - if the source was originally ClojureScript, will be given the\n            analysis cache.\n\n  The result of evaluation should be the return value.","row":105},{"fixed-arities":[1],"end-row":124,"meta":null,"name-end-col":14,"name-end-row":121,"name-row":121,"ns":"cljs.js","name":"js-eval","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":20,"arglist-strs":["[{:keys [source] :as resource}]"],"doc":"A default JavaScript evaluation function.","row":121},{"fixed-arities":[1],"end-row":127,"meta":null,"name-end-col":18,"name-end-row":126,"private":true,"name-row":126,"ns":"cljs.js","name":"wrap-error","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":15,"arglist-strs":["[ex]"],"row":126},{"fixed-arities":[0,1],"end-row":139,"meta":null,"name-end-col":18,"name-end-row":129,"name-row":129,"ns":"cljs.js","name":"empty-state","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":39,"arglist-strs":["[]","[init]"],"doc":"Construct an empty compiler state. Required to invoke analyze, compile,\n   eval and eval-str.","row":129},{"fixed-arities":[3],"end-row":142,"meta":null,"name-end-col":27,"name-end-row":141,"name-row":141,"ns":"cljs.js","name":"load-analysis-cache!","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":54,"arglist-strs":["[state ns cache]"],"row":141},{"fixed-arities":[3],"end-row":146,"meta":null,"name-end-col":23,"name-end-row":144,"name-row":144,"ns":"cljs.js","name":"load-source-map!","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":50,"arglist-strs":["[state ns sm-json]"],"row":144},{"fixed-arities":[0],"end-row":152,"meta":null,"name-end-col":15,"name-end-row":148,"private":true,"name-row":148,"ns":"cljs.js","name":"sm-data","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":22,"arglist-strs":["[]"],"row":148},{"fixed-arities":[2],"end-row":155,"meta":null,"name-end-col":14,"name-end-row":154,"private":true,"name-row":154,"ns":"cljs.js","name":"prefix","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":15,"arglist-strs":["[s pre]"],"row":154},{"fixed-arities":[6],"end-row":185,"meta":null,"name-end-col":25,"name-end-row":157,"private":true,"name-row":157,"ns":"cljs.js","name":"append-source-map","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":43,"arglist-strs":["[state name source sb sm-data {:keys [output-dir asset-path source-map-timestamp] :as opts}]"],"row":157},{"fixed-arities":[2],"end-row":192,"meta":null,"name-end-col":17,"name-end-row":187,"private":true,"name-row":187,"ns":"cljs.js","name":"alias-map","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":16,"arglist-strs":["[compiler cljs-ns]"],"row":187},{"end-row":197,"meta":null,"name-end-col":68,"name-end-row":197,"name-row":197,"ns":"cljs.js","name":"eval-str*","defined-by":"cljs.core/declare","filename":"cljs/js.cljs","col":1,"name-col":59,"end-col":69,"row":197},{"end-row":199,"meta":null,"name-end-col":14,"name-end-row":199,"name-row":199,"ns":"cljs.js","name":"*loaded*","defined-by":"cljs.core/def","filename":"cljs/js.cljs","col":1,"name-col":6,"end-col":26,"row":199},{"fixed-arities":[4],"end-row":218,"meta":null,"name-end-col":18,"name-end-row":201,"private":true,"name-row":201,"ns":"cljs.js","name":"run-async!","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":15,"arglist-strs":["[proc coll break? cb]"],"doc":"Like cljs.core/run!, but for an async procedure, and with the\n  ability to break prior to processing the entire collection.\n\n  Chains successive calls to the supplied procedure for items in\n  the collection. The procedure should accept an item from the\n  collection and a callback of one argument. If the break? predicate,\n  when applied to the procedure callback value, yields a truthy\n  result, terminates early calling the supplied cb with the callback\n  value. Otherwise, when complete, calls cb with nil.","row":201},{"end-row":223,"meta":null,"name-end-col":66,"name-end-row":223,"name-row":223,"ns":"cljs.js","name":"require","defined-by":"cljs.core/declare","filename":"cljs/js.cljs","col":1,"name-col":59,"end-col":67,"row":220},{"fixed-arities":[4],"end-row":231,"meta":null,"name-end-col":20,"name-end-row":225,"private":true,"name-row":225,"ns":"cljs.js","name":"process-deps","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":9,"arglist-strs":["[bound-vars names opts cb]"],"row":225},{"fixed-arities":[4],"end-row":240,"meta":null,"name-end-col":27,"name-end-row":233,"private":true,"name-row":233,"ns":"cljs.js","name":"process-macros-deps","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":9,"arglist-strs":["[bound-vars cache opts cb]"],"row":233},{"fixed-arities":[4],"end-row":247,"meta":null,"name-end-col":25,"name-end-row":242,"private":true,"name-row":242,"ns":"cljs.js","name":"process-libs-deps","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":9,"arglist-strs":["[bound-vars cache opts cb]"],"row":242},{"fixed-arities":[4],"end-row":257,"meta":null,"name-end-col":29,"name-end-row":249,"private":true,"name-row":249,"ns":"cljs.js","name":"pre-file-side-effects","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":53,"arglist-strs":["[st name file opts]"],"row":249},{"fixed-arities":[2],"end-row":266,"meta":null,"name-end-col":30,"name-end-row":259,"private":true,"name-row":259,"ns":"cljs.js","name":"post-file-side-effects","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":59,"arglist-strs":["[file opts]"],"row":259},{"fixed-arities":[4,3,2,5],"end-row":353,"meta":null,"name-end-col":14,"name-end-row":268,"name-row":268,"ns":"cljs.js","name":"require","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":30,"arglist-strs":["[name cb]","[name opts cb]","[bound-vars name opts cb]","[bound-vars name reload opts cb]"],"row":268},{"fixed-arities":[4],"end-row":379,"meta":null,"name-end-col":23,"name-end-row":355,"private":true,"name-row":355,"ns":"cljs.js","name":"patch-alias-map","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":37,"arglist-strs":["[compiler in from to]"],"row":355},{"fixed-arities":[2],"end-row":382,"meta":null,"name-end-col":21,"name-end-row":381,"private":true,"name-row":381,"ns":"cljs.js","name":"self-require?","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":68,"arglist-strs":["[deps opts]"],"row":381},{"fixed-arities":[7,5],"end-row":430,"meta":null,"name-end-col":17,"name-end-row":384,"private":true,"name-row":384,"ns":"cljs.js","name":"load-deps","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":35,"arglist-strs":["[bound-vars ana-env lib deps cb]","[bound-vars ana-env lib deps reload opts cb]"],"row":384},{"end-row":432,"meta":null,"name-end-col":71,"name-end-row":432,"name-row":432,"ns":"cljs.js","name":"analyze-str*","defined-by":"cljs.core/declare","filename":"cljs/js.cljs","col":1,"name-col":59,"end-col":72,"row":432},{"fixed-arities":[6,5],"end-row":489,"meta":null,"name-end-col":20,"name-end-row":434,"private":true,"name-row":434,"ns":"cljs.js","name":"analyze-deps","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":35,"arglist-strs":["[bound-vars ana-env lib deps cb]","[bound-vars ana-env lib deps opts cb]"],"row":434},{"fixed-arities":[8],"end-row":522,"meta":null,"name-end-col":19,"name-end-row":491,"private":true,"name-row":491,"ns":"cljs.js","name":"load-macros","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":24,"arglist-strs":["[bound-vars k macros lib reload reloads opts cb]"],"row":491},{"fixed-arities":[3,2],"end-row":551,"meta":null,"name-end-col":22,"name-end-row":524,"private":true,"name-row":524,"ns":"cljs.js","name":"rewrite-ns-ast","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":39,"arglist-strs":["[ast smap]","[ast smap macros?]"],"row":524},{"fixed-arities":[2],"end-row":564,"meta":null,"name-end-col":46,"name-end-row":553,"private":true,"name-row":553,"ns":"cljs.js","name":"check-macro-autoload-inferring-missing","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":11,"arglist-strs":["[{:keys [requires name] :as ast} cenv]"],"row":553},{"fixed-arities":[6,5],"end-row":640,"meta":null,"name-end-col":23,"name-end-row":566,"private":true,"name-row":566,"ns":"cljs.js","name":"ns-side-effects","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":26,"arglist-strs":["[bound-vars ana-env ast opts cb]","[load bound-vars ana-env {:keys [op] :as ast} opts cb]"],"row":566},{"fixed-arities":[5],"end-row":651,"meta":null,"name-end-col":25,"name-end-row":642,"private":true,"name-row":642,"ns":"cljs.js","name":"node-side-effects","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":27,"arglist-strs":["[bound-vars sb deps ns-name emit-nil-result?]"],"row":642},{"fixed-arities":[5],"end-row":662,"meta":null,"name-end-col":35,"name-end-row":653,"private":true,"name-row":653,"ns":"cljs.js","name":"global-exports-side-effects","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":30,"arglist-strs":["[bound-vars sb deps ns-name emit-nil-result?]"],"row":653},{"fixed-arities":[1],"end-row":669,"meta":null,"name-end-col":23,"name-end-row":664,"private":true,"name-row":664,"ns":"cljs.js","name":"trampoline-safe","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":29,"arglist-strs":["[f]"],"doc":"Returns a new function that calls f but discards any return value,\n  returning nil instead, thus avoiding any inadvertent trampoline continuation\n  if a function happens to be returned.","row":664},{"fixed-arities":[5],"end-row":722,"meta":null,"name-end-col":20,"name-end-row":671,"private":true,"name-row":671,"ns":"cljs.js","name":"analyze-str*","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":60,"arglist-strs":["[bound-vars source name opts cb]"],"row":671},{"fixed-arities":[4,3,5],"end-row":785,"meta":null,"name-end-col":18,"name-end-row":724,"name-row":724,"ns":"cljs.js","name":"analyze-str","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[state source cb]","[state source name cb]","[state source name opts cb]"],"doc":"Analyze ClojureScript source. The compiler state will be populated with\n   the results of analyzes. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol or string)\n     optional, the name of the source\n\n   opts (map)\n     compilation options.\n\n      :eval             - eval function to invoke, see *eval-fn*\n      :load             - library resolution function, see *load-fn*\n      :source-map       - set to true to generate inline source map information\n      :def-emits-var    - sets whether def (and derived) forms return either a Var\n                          (if set to true) or the def init value (if false).\n                          Defaults to false.\n      :checked-arrays   - if :warn or :error, checks inferred types and values passed\n                          to aget/aset. Logs for incorrect values if :warn, throws if\n                          :error. Defaults to false.\n      :static-fns       - employ static dispatch to specific function arities in\n                          emitted JavaScript, as opposed to making use of the\n                          `call` construct. Defaults to false.\n      :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for\n                          unknown functions, but instead direct invokes via\n                          `f(a0,a1...)`. Defaults to `false`.\n      :target           - use `:nodejs` if targeting Node.js. Takes no other options\n                          at the moment.\n      :ns               - optional, the namespace in which to evaluate the source.\n      :verbose          - optional, emit details from compiler activity. Defaults to\n                          false.\n      :context          - optional, sets the context for the source. Possible values\n                          are `:expr`, `:statement` and `:return`. Defaults to\n                          `:statement`.\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value, the actual value is not meaningful. If unsuccessful the\n     map will contain a key :error with an ex-info instance describing the cause\n     of failure.","row":724},{"end-row":790,"meta":null,"name-end-col":39,"name-end-row":790,"name-row":790,"ns":"cljs.js","name":"clear-fns!","defined-by":"cljs.core/declare","filename":"cljs/js.cljs","col":1,"name-col":29,"end-col":40,"row":790},{"fixed-arities":[4],"end-row":848,"meta":null,"name-end-col":13,"name-end-row":792,"private":true,"name-row":792,"ns":"cljs.js","name":"eval*","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":79,"arglist-strs":["[bound-vars form opts cb]"],"row":792},{"fixed-arities":[4,3],"end-row":902,"meta":null,"name-end-col":11,"name-end-row":850,"name-row":850,"ns":"cljs.js","name":"eval","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":21,"arglist-strs":["[state form cb]","[state form opts cb]"],"doc":"Evaluate a single ClojureScript form. The parameters:\n\n   state (atom)\n     the compiler state\n\n   form (s-expr)\n     the ClojureScript source\n\n   opts (map)\n     compilation options.\n\n      :eval             - eval function to invoke, see *eval-fn*\n      :load             - library resolution function, see *load-fn*\n      :source-map       - set to true to generate inline source map information\n      :def-emits-var    - sets whether def (and derived) forms return either a Var\n                          (if set to true) or the def init value (if false). Default\n                          is false.\n      :checked-arrays   - if :warn or :error, checks inferred types and values passed\n                          to aget/aset. Logs for incorrect values if :warn, throws if\n                          :error. Defaults to false.\n      :static-fns       - employ static dispatch to specific function arities in\n                          emitted JavaScript, as opposed to making use of the\n                          `call` construct. Defaults to false.\n      :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for\n                          unknown functions, but instead direct invokes via\n                          `f(a0,a1...)`. Defaults to `false`.\n      :target           - use `:nodejs` if targeting Node.js. Takes no other options\n                          at the moment.\n      :ns               - optional, the namespace in which to evaluate the source.\n      :verbose          - optional, emit details from compiler activity. Defaults to\n                          false.\n      :context          - optional, sets the context for the source. Possible values\n                          are `:expr`, `:statement` and `:return`. Defaults to\n                          `:statement`.\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value with the result of evalution. If unsuccessful the map will\n     contain a key :error with an ex-info instance describing the cause of\n     failure.","row":850},{"fixed-arities":[5],"end-row":972,"meta":null,"name-end-col":20,"name-end-row":907,"private":true,"name-row":907,"ns":"cljs.js","name":"compile-str*","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":65,"arglist-strs":["[bound-vars source name opts cb]"],"row":907},{"fixed-arities":[4,3,5],"end-row":1034,"meta":null,"name-end-col":18,"name-end-row":974,"name-row":974,"ns":"cljs.js","name":"compile-str","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[state source cb]","[state source name cb]","[state source name opts cb]"],"doc":"Compile ClojureScript source into JavaScript. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol or string)\n     optional, the name of the source - used as key in :source-maps\n\n   opts (map)\n     compilation options.\n\n      :eval             - eval function to invoke, see *eval-fn*\n      :load             - library resolution function, see *load-fn*\n      :source-map       - set to true to generate inline source map information\n      :def-emits-var    - sets whether def (and derived) forms return either a Var\n                          (if set to true) or the def init value (if false). Default\n                          is false.\n      :checked-arrays   - if :warn or :error, checks inferred types and values passed\n                          to aget/aset. Logs for incorrect values if :warn, throws if\n                          :error. Defaults to false.\n      :static-fns       - employ static dispatch to specific function arities in\n                          emitted JavaScript, as opposed to making use of the\n                          `call` construct. Defaults to false.\n      :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for\n                          unknown functions, but instead direct invokes via\n                          `f(a0,a1...)`. Defaults to `false`.\n      :target           - use `:nodejs` if targeting Node.js. Takes no other options\n                          at the moment.\n      :ns               - optional, the namespace in which to evaluate the source.\n      :verbose          - optional, emit details from compiler activity. Defaults to\n                          false.\n      :context          - optional, sets the context for the source. Possible values\n                          are `:expr`, `:statement` and `:return`. Defaults to\n                          `:statement`.\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value with the compilation result (string). If unsuccessful the map\n     will contain a key :error with an ex-info instance describing the cause\n     of failure.","row":974},{"fixed-arities":[5],"end-row":1138,"meta":null,"name-end-col":17,"name-end-row":1039,"private":true,"name-row":1039,"ns":"cljs.js","name":"eval-str*","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":33,"arglist-strs":["[bound-vars source name opts cb]"],"row":1039},{"fixed-arities":[4,3,5],"end-row":1205,"meta":null,"name-end-col":15,"name-end-row":1140,"name-row":1140,"ns":"cljs.js","name":"eval-str","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":1,"name-col":7,"end-col":28,"arglist-strs":["[state source cb]","[state source name cb]","[state source name opts cb]"],"doc":"Evalute ClojureScript source given as a string. The parameters:\n\n  state (atom)\n    the compiler state\n\n  source (string)\n    the ClojureScript source\n\n  name (symbol or string)\n    optional, the name of the source - used as key in :source-maps\n\n  opts (map)\n    compilation options.\n\n    :eval             - eval function to invoke, see *eval-fn*\n    :load             - library resolution function, see *load-fn*\n    :source-map       - set to true to generate inline source map information\n    :cache-source     - optional, a function to run side-effects with the\n                        compilation result prior to actual evalution. This function\n                        takes two arguments, the first is the eval map, the source\n                        will be under :source. The second argument is a callback of\n                        one argument. If an error occurs an :error key should be\n                        supplied.\n    :def-emits-var    - sets whether def (and derived) forms return either a Var\n                        (if set to true) or the def init value (if false). Default\n                        is false.\n    :checked-arrays   - if :warn or :error, checks inferred types and values passed\n                        to aget/aset. Logs for incorrect values if :warn, throws if\n                        :error. Defaults to false.\n    :static-fns       - employ static dispatch to specific function arities in\n                        emitted JavaScript, as opposed to making use of the\n                        `call` construct. Defaults to false.\n    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for\n                        unknown functions, but instead direct invokes via\n                        `f(a0,a1...)`. Defaults to `false`.\n    :target           - use `:nodejs` if targeting Node.js. Takes no other options\n                        at the moment.\n    :ns               - optional, the namespace in which to evaluate the source.\n    :verbose          - optional, emit details from compiler activity. Defaults to\n                        false.\n    :context          - optional, sets the context for the source. Possible values\n                     are `:expr`, `:statement` and `:return`. Defaults to\n                      `:statement`.\n\n  cb (function)\n    callback, will be invoked with a map. If succesful the map will contain\n    a :value key with the result of evaluation and :ns the current namespace.\n    If unsuccessful will contain a :error key with an ex-info instance describing\n    the cause of failure.","row":1140},{"end-row":1213,"meta":{"private":true},"name-end-col":28,"name-end-row":1213,"private":true,"name-row":1213,"ns":"cljs.js","name":"fn-index","defined-by":"cljs.core/defonce","filename":"cljs/js.cljs","col":1,"name-col":20,"end-col":43,"row":1213},{"end-row":1214,"meta":{"private":true},"name-end-col":27,"name-end-row":1214,"private":true,"name-row":1214,"ns":"cljs.js","name":"fn-refs","defined-by":"cljs.core/defonce","filename":"cljs/js.cljs","col":1,"name-col":20,"end-col":43,"row":1214},{"fixed-arities":[0],"end-row":1219,"meta":null,"name-end-col":18,"name-end-row":1216,"private":true,"name-row":1216,"ns":"cljs.js","name":"clear-fns!","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":24,"arglist-strs":["[]"],"doc":"Clears saved functions.","row":1216},{"fixed-arities":[1],"end-row":1226,"meta":null,"name-end-col":14,"name-end-row":1221,"private":true,"name-row":1221,"ns":"cljs.js","name":"put-fn","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":8,"arglist-strs":["[f]"],"doc":"Saves a function, returning a numeric representation.","row":1221},{"fixed-arities":[1],"end-row":1231,"meta":null,"name-end-col":14,"name-end-row":1228,"private":true,"name-row":1228,"ns":"cljs.js","name":"get-fn","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":20,"arglist-strs":["[n]"],"doc":"Gets a function, given its numeric representation.","row":1228},{"fixed-arities":[1],"end-row":1234,"meta":null,"name-end-col":15,"name-end-row":1233,"private":true,"name-row":1233,"ns":"cljs.js","name":"emit-fn","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":44,"arglist-strs":["[f]"],"row":1233},{"fixed-arities":[1,2],"end-row":1258,"meta":null,"name-end-col":17,"name-end-row":1244,"private":true,"name-row":1244,"ns":"cljs.js","name":"eval-impl","defined-by":"cljs.core/defn-","filename":"cljs/js.cljs","col":1,"name-col":8,"end-col":16,"arglist-strs":["[form]","[form ns]"],"row":1244},{"end-row":1266,"meta":null,"name-end-col":10,"name-end-row":1266,"name-row":1266,"ns":"cljs.js","name":"vm","defined-by":"cljs.core/def","filename":"cljs/js.cljs","col":3,"name-col":8,"end-col":29,"row":1266},{"end-row":1267,"meta":null,"name-end-col":10,"name-end-row":1267,"name-row":1267,"ns":"cljs.js","name":"fs","defined-by":"cljs.core/def","filename":"cljs/js.cljs","col":3,"name-col":8,"end-col":29,"row":1267},{"end-row":1268,"meta":null,"name-end-col":10,"name-end-row":1268,"name-row":1268,"ns":"cljs.js","name":"st","defined-by":"cljs.core/def","filename":"cljs/js.cljs","col":3,"name-col":8,"end-col":30,"row":1268},{"fixed-arities":[1],"end-row":1273,"meta":null,"name-end-col":18,"name-end-row":1272,"name-row":1272,"ns":"cljs.js","name":"node-eval","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":3,"name-col":9,"end-col":60,"arglist-strs":["[{:keys [name source]}]"],"row":1272},{"end-row":1278,"meta":null,"name-end-col":12,"name-end-row":1275,"name-row":1275,"ns":"cljs.js","name":"libs","defined-by":"cljs.core/def","filename":"cljs/js.cljs","col":3,"name-col":8,"end-col":35,"row":1275},{"fixed-arities":[2],"end-row":1289,"meta":null,"name-end-col":18,"name-end-row":1280,"name-row":1280,"ns":"cljs.js","name":"node-load","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":3,"name-col":9,"end-col":17,"arglist-strs":["[{:keys [name macros]} cb]"],"row":1280},{"fixed-arities":[3],"end-row":1292,"meta":null,"name-end-col":18,"name-end-row":1291,"name-row":1291,"ns":"cljs.js","name":"elide-env","defined-by":"cljs.core/defn","filename":"cljs/js.cljs","col":3,"name-col":9,"end-col":23,"arglist-strs":["[env ast opts]"],"row":1291},{"end-row":18,"meta":null,"name-end-col":21,"name-end-row":15,"name-row":15,"ns":"cljs.js","name":"with-state","defined-by":"clojure.core/defmacro","filename":"cljs/js.clj","macro":true,"col":1,"name-col":11,"end-col":14,"arglist-strs":["[state & body]"],"varargs-min-arity":1,"row":15},{"fixed-arities":[0],"end-row":24,"meta":null,"name-end-col":20,"name-end-row":20,"name-row":20,"ns":"cljs.js","name":"dump-core","defined-by":"clojure.core/defmacro","filename":"cljs/js.clj","macro":true,"col":1,"name-col":11,"end-col":21,"arglist-strs":["[]"],"row":20}]