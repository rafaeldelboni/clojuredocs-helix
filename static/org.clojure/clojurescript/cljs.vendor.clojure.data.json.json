[{"arglist-strs":["[x]"],"end-row":28,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"default-write-key-fn","ns":"cljs.vendor.clojure.data.json","private":true,"row":22},{"arglist-strs":["[k v]"],"end-row":30,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"default-value-fn","ns":"cljs.vendor.clojure.data.json","private":true,"row":30},{"end-row":32,"filename":"cljs/vendor/clojure/data/json.clj","name":"-read","ns":"cljs.vendor.clojure.data.json","row":32},{"fixed-arities":[1],"end-row":35,"private":true,"ns":"cljs.vendor.clojure.data.json","name":"codepoint","filename":"cljs/vendor/clojure/data/json.clj","macro":true,"arglist-strs":["[c]"],"row":34},{"arglist-strs":["[[test result]]"],"end-row":45,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"codepoint-clause","ns":"cljs.vendor.clojure.data.json","private":true,"row":37},{"arglist-strs":["[e & clauses]"],"end-row":51,"filename":"cljs/vendor/clojure/data/json.clj","macro":true,"name":"codepoint-case","ns":"cljs.vendor.clojure.data.json","private":true,"row":47},{"arglist-strs":["[stream]"],"end-row":64,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"read-hex-char","ns":"cljs.vendor.clojure.data.json","private":true,"row":53},{"arglist-strs":["[stream]"],"end-row":79,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"read-escaped-char","ns":"cljs.vendor.clojure.data.json","private":true,"row":66},{"arglist-strs":["[stream already-read]"],"end-row":92,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"slow-read-string","ns":"cljs.vendor.clojure.data.json","private":true,"row":81},{"arglist-strs":["[stream]"],"end-row":116,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"read-quoted-string","ns":"cljs.vendor.clojure.data.json","private":true,"row":94},{"arglist-strs":["[string]"],"end-row":123,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"read-integer","ns":"cljs.vendor.clojure.data.json","private":true,"row":118},{"arglist-strs":["[string bigdec?]"],"end-row":128,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"read-decimal","ns":"cljs.vendor.clojure.data.json","private":true,"row":125},{"arglist-strs":["[stream bigdec?]"],"end-row":251,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"read-number","ns":"cljs.vendor.clojure.data.json","private":true,"row":130},{"arglist-strs":["[stream]"],"end-row":259,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"next-token","ns":"cljs.vendor.clojure.data.json","private":true,"row":253},{"arglist-strs":["[]"],"end-row":262,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[0],"name":"invalid-array-exception","ns":"cljs.vendor.clojure.data.json","row":261},{"arglist-strs":["[stream options]"],"end-row":271,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"read-array*","ns":"cljs.vendor.clojure.data.json","private":true,"row":264},{"arglist-strs":["[stream options]"],"end-row":282,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"read-array","ns":"cljs.vendor.clojure.data.json","private":true,"row":273},{"arglist-strs":["[stream]"],"end-row":293,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"read-key","ns":"cljs.vendor.clojure.data.json","private":true,"row":284},{"arglist-strs":["[stream options]"],"end-row":317,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"read-object","ns":"cljs.vendor.clojure.data.json","private":true,"row":295},{"arglist-strs":["[stream eof-error? eof-value options]"],"end-row":364,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[4],"name":"-read","ns":"cljs.vendor.clojure.data.json","private":true,"row":319},{"end-row":368,"filename":"cljs/vendor/clojure/data/json.clj","name":"default-read-options","ns":"cljs.vendor.clojure.data.json","row":366},{"arglist-strs":["[reader & {:as options}]"],"doc":"Reads a single item of JSON data from a java.io.Reader. Options are\n  key-value pairs, valid options are:\n\n     :eof-error? boolean\n\n        If true (default) will throw exception if the stream is empty.\n\n     :eof-value Object\n\n        Object to return if the stream is empty and eof-error? is\n        false. Default is nil.\n\n     :bigdec boolean\n\n        If true use BigDecimal for decimal numbers instead of Double.\n        Default is false.\n\n     :key-fn function\n\n        Single-argument function called on JSON property names; return\n        value will replace the property names in the output. Default\n        is clojure.core/identity, use clojure.core/keyword to get\n        keyword properties.\n\n     :value-fn function\n\n        Function to transform values in maps (\"objects\" in JSON) in\n        the output. For each JSON property, value-fn is called with\n        two arguments: the property name (transformed by key-fn) and\n        the value. The return value of value-fn will replace the value\n        in the output. If value-fn returns itself, the property will\n        be omitted from the output. The default value-fn returns the\n        value unchanged. This option does not apply to non-map\n        collections.","end-row":409,"filename":"cljs/vendor/clojure/data/json.clj","name":"read","ns":"cljs.vendor.clojure.data.json","row":369},{"arglist-strs":["[string & {:as options}]"],"doc":"Reads one JSON value from input String. Options are the same as for\n  read.","end-row":419,"filename":"cljs/vendor/clojure/data/json.clj","name":"read-str","ns":"cljs.vendor.clojure.data.json","row":411},{"end-row":426,"filename":"cljs/vendor/clojure/data/json.clj","name":"JSONWriter","ns":"cljs.vendor.clojure.data.json","row":424},{"arglist-strs":["[object out options]"],"doc":"Print object to Appendable out as JSON","end-row":426,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"-write","ns":"cljs.vendor.clojure.data.json","row":425},{"arglist-strs":["[out cp]"],"end-row":438,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"->hex-string","ns":"cljs.vendor.clojure.data.json","private":true,"row":428},{"end-row":455,"filename":"cljs/vendor/clojure/data/json.clj","name":"codepoint-decoder","ns":"cljs.vendor.clojure.data.json","row":440},{"arglist-strs":["[s out options]"],"end-row":480,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-string","ns":"cljs.vendor.clojure.data.json","private":true,"row":457},{"arglist-strs":["[out options]"],"end-row":488,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"write-indent","ns":"cljs.vendor.clojure.data.json","private":true,"row":482},{"arglist-strs":["[m out options]"],"end-row":524,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-object","ns":"cljs.vendor.clojure.data.json","private":true,"row":490},{"arglist-strs":["[s out options]"],"end-row":545,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-array","ns":"cljs.vendor.clojure.data.json","private":true,"row":526},{"arglist-strs":["[x out options]"],"end-row":548,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-bignum","ns":"cljs.vendor.clojure.data.json","private":true,"row":547},{"arglist-strs":["[x out options]"],"end-row":556,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-float","ns":"cljs.vendor.clojure.data.json","private":true,"row":550},{"arglist-strs":["[x out options]"],"end-row":564,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-double","ns":"cljs.vendor.clojure.data.json","private":true,"row":558},{"arglist-strs":["[x out options]"],"end-row":567,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-plain","ns":"cljs.vendor.clojure.data.json","private":true,"row":566},{"arglist-strs":["[x out options]"],"end-row":572,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-uuid","ns":"cljs.vendor.clojure.data.json","private":true,"row":569},{"arglist-strs":["[x out options]"],"end-row":578,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-instant","ns":"cljs.vendor.clojure.data.json","private":true,"row":574},{"arglist-strs":["[x out options]"],"end-row":581,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-date","ns":"cljs.vendor.clojure.data.json","private":true,"row":580},{"arglist-strs":["[d]"],"end-row":584,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"default-sql-date->instant-fn","ns":"cljs.vendor.clojure.data.json","private":true,"row":583},{"arglist-strs":["[x out options]"],"end-row":588,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-sql-date","ns":"cljs.vendor.clojure.data.json","private":true,"row":586},{"arglist-strs":["[x out options]"],"end-row":591,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-null","ns":"cljs.vendor.clojure.data.json","private":true,"row":590},{"arglist-strs":["[x out options]"],"end-row":594,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-named","ns":"cljs.vendor.clojure.data.json","private":true,"row":593},{"arglist-strs":["[x out options]"],"end-row":599,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-generic","ns":"cljs.vendor.clojure.data.json","private":true,"row":596},{"arglist-strs":["[x out options]"],"end-row":602,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-ratio","ns":"cljs.vendor.clojure.data.json","private":true,"row":601},{"end-row":645,"filename":"cljs/vendor/clojure/data/json.clj","name":"default-write-options","ns":"cljs.vendor.clojure.data.json","row":637},{"arglist-strs":["[x writer & {:as options}]"],"doc":"Write JSON-formatted output to a java.io.Writer. Options are\n   key-value pairs, valid options are:\n\n    :escape-unicode boolean\n\n       If true (default) non-ASCII characters are escaped as \\uXXXX\n\n    :escape-js-separators boolean\n\n       If true (default) the Unicode characters U+2028 and U+2029 will\n       be escaped as \\u2028 and \\u2029 even if :escape-unicode is\n       false. (These two characters are valid in pure JSON but are not\n       valid in JavaScript strings.)\n\n    :escape-slash boolean\n\n       If true (default) the slash / is escaped as \\/\n\n    :sql-date-converter function\n\n       Single-argument function used to convert a java.sql.Date to\n       a java.time.Instant. As java.sql.Date does not have a\n       time-component (which is required by java.time.Instant), it needs\n       to be computed. The default implementation, `default-sql-date->instant-fn`\n       uses\n       ```\n          (.toInstant (.atStartOfDay (.toLocalDate sql-date) (java.time.ZoneId/systemDefault)))\n       ```\n\n    :date-formatter\n\n        A java.time.DateTimeFormatter instance, defaults to DateTimeFormatter/ISO_INSTANT\n\n    :key-fn function\n\n        Single-argument function called on map keys; return value will\n        replace the property names in the output. Must return a\n        string. Default calls clojure.core/name on symbols and\n        keywords and clojure.core/str on everything else.\n\n    :value-fn function\n\n        Function to transform values in maps before writing. For each\n        key-value pair in an input map, called with two arguments: the\n        key (BEFORE transformation by key-fn) and the value. The\n        return value of value-fn will replace the value in the output.\n        If the return value is a number, boolean, string, or nil it\n        will be included literally in the output. If the return value\n        is a non-map collection, it will be processed recursively. If\n        the return value is a map, it will be processed recursively,\n        calling value-fn again on its key-value pairs. If value-fn\n        returns itself, the key-value pair will be omitted from the\n        output. This option does not apply to non-map collections.","end-row":701,"filename":"cljs/vendor/clojure/data/json.clj","name":"write","ns":"cljs.vendor.clojure.data.json","row":646},{"arglist-strs":["[x & {:as options}]"],"doc":"Converts x to a JSON-formatted string. Options are the same as\n  write.","end-row":709,"filename":"cljs/vendor/clojure/data/json.clj","name":"write-str","ns":"cljs.vendor.clojure.data.json","row":703},{"arglist-strs":["[s]"],"end-row":716,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1],"name":"pprint-array","ns":"cljs.vendor.clojure.data.json","private":true,"row":715},{"arglist-strs":["[m options]"],"end-row":721,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"pprint-object","ns":"cljs.vendor.clojure.data.json","private":true,"row":718},{"arglist-strs":["[x options]"],"end-row":727,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"pprint-generic","ns":"cljs.vendor.clojure.data.json","private":true,"row":723},{"arglist-strs":["[x options]"],"end-row":734,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[2],"name":"pprint-dispatch","ns":"cljs.vendor.clojure.data.json","private":true,"row":729},{"arglist-strs":["[x & {:as options}]"],"doc":"Pretty-prints JSON representation of x to *out*. Options are the\n  same as for write except :value-fn, which is not supported.","end-row":742,"filename":"cljs/vendor/clojure/data/json.clj","name":"pprint","ns":"cljs.vendor.clojure.data.json","row":736},{"arglist-strs":["[input]","[input keywordize?]","[input keywordize? eof-error? eof-value]"],"doc":"DEPRECATED; replaced by read-str.\n\n  Reads one JSON value from input String or Reader. If keywordize? is\n  true (default), object keys will be converted to keywords. If\n  eof-error? is true (default), empty input will throw an\n  EOFException; if false EOF will return eof-value.","end-row":769,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[1,4,2],"name":"read-json","ns":"cljs.vendor.clojure.data.json","row":746},{"arglist-strs":["[x out escape-unicode?]"],"doc":"DEPRECATED; replaced by 'write'.\n\n  Print object to PrintWriter out as JSON","end-row":776,"filename":"cljs/vendor/clojure/data/json.clj","fixed-arities":[3],"name":"write-json","ns":"cljs.vendor.clojure.data.json","row":771},{"arglist-strs":["[x & options]"],"doc":"DEPRECATED; replaced by 'write-str'.\n\n  Converts x to a JSON-formatted string.\n\n  Valid options are:\n    :escape-unicode false\n        to turn of \\uXXXX escapes of Unicode characters.","end-row":787,"filename":"cljs/vendor/clojure/data/json.clj","name":"json-str","ns":"cljs.vendor.clojure.data.json","row":778},{"arglist-strs":["[x & options]"],"doc":"DEPRECATED; replaced by 'write' to *out*.\n\n  Write JSON-formatted output to *out*.\n\n  Valid options are:\n    :escape-unicode false\n        to turn off \\uXXXX escapes of Unicode characters.","end-row":798,"filename":"cljs/vendor/clojure/data/json.clj","name":"print-json","ns":"cljs.vendor.clojure.data.json","row":789},{"arglist-strs":["[x & options]"],"doc":"DEPRECATED; replaced by 'pprint'.\n\n  Pretty-prints JSON representation of x to *out*.\n\n  Valid options are:\n    :escape-unicode false\n        to turn off \\uXXXX escapes of Unicode characters.","end-row":809,"filename":"cljs/vendor/clojure/data/json.clj","name":"pprint-json","ns":"cljs.vendor.clojure.data.json","row":800}]