[{"fixed-arities":[1],"end-row":156,"meta":{},"name-end-col":18,"name-end-row":149,"name-row":149,"added":"1.11.10","ns":"cljs.math","name":"log","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L149","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[a]"],"doc":"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log","row":149},{"fixed-arities":[4],"end-row":740,"meta":{},"name-end-col":20,"name-end-row":727,"private":true,"name-row":727,"ns":"cljs.math","name":"add64","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L727","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":14,"arglist-strs":["[hx lx hy ly]"],"doc":"Takes the high and low words for 2 different 64 bit integers, and adds them.\n  This handles overflow from the low-order words into the high order words.","row":727},{"fixed-arities":[3],"end-row":250,"meta":{},"name-end-col":23,"name-end-row":241,"private":true,"name-row":241,"ns":"cljs.math","name":"setup-hl","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L241","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":44,"arglist-strs":["[i h l]"],"doc":"internal function to setup and align integer words","row":241},{"fixed-arities":[2],"end-row":463,"meta":{},"name-end-col":24,"name-end-row":438,"name-row":438,"added":"1.11.10","ns":"cljs.math","name":"copy-sign","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L438","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[magnitude sign]"],"doc":"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-","row":438},{"fixed-arities":[2],"end-row":491,"meta":{},"name-end-col":18,"name-end-row":486,"name-row":486,"added":"1.11.10","ns":"cljs.math","name":"pow","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L486","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":24,"arglist-strs":["[a b]"],"doc":"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow","row":486},{"fixed-arities":[1],"end-row":634,"meta":{},"name-end-col":27,"name-end-row":628,"private":true,"name-row":628,"ns":"cljs.math","name":"power-of-two","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L628","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":89,"arglist-strs":["[n]"],"doc":"returns a floating point power of two in the normal range","row":628},{"fixed-arities":[2],"end-row":239,"meta":{},"name-end-col":20,"name-end-row":227,"private":true,"name-row":227,"ns":"cljs.math","name":"ilogb","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L227","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":39,"arglist-strs":["[hx lx]"],"doc":"internal function for ilogb(x)","row":227},{"fixed-arities":[1],"end-row":697,"meta":{},"name-end-col":19,"name-end-row":689,"name-row":689,"added":"1.11.10","ns":"cljs.math","name":"tanh","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L689","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh","row":689},{"fixed-arities":[2],"end-row":523,"meta":{},"name-end-col":24,"name-end-row":516,"name-row":516,"added":"1.11.10","ns":"cljs.math","name":"add-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L516","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":11,"arglist-strs":["[x y]"],"doc":"Returns the sum of x and y, throws an exception on overflow. ","row":516},{"fixed-arities":[1],"end-row":101,"meta":{},"name-end-col":18,"name-end-row":95,"name-row":95,"added":"1.11.10","ns":"cljs.math","name":"tan","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L95","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[a]"],"doc":"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan","row":95},{"end-row":23,"meta":{},"name-end-col":36,"name-end-row":23,"private":true,"name-row":23,"added":"1.11.10","ns":"cljs.math","name":"DEGREES-TO-RADIANS","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L19","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":18,"end-col":58,"doc":"Constant used to convert an angular value in degrees to the equivalent in radians","row":19},{"end-row":225,"meta":{},"name-end-col":27,"name-end-row":225,"private":true,"name-row":225,"ns":"cljs.math","name":"LO-y","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L225","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":23,"end-col":46,"row":225},{"end-row":59,"meta":{},"name-end-col":71,"name-end-row":59,"private":true,"name-row":59,"ns":"cljs.math","name":"HI","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L59","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":69,"end-col":96,"doc":"offset of hi integers in 64-bit values","row":59},{"fixed-arities":[2],"end-row":532,"meta":{},"name-end-col":29,"name-end-row":525,"name-row":525,"added":"1.11.10","ns":"cljs.math","name":"subtract-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L525","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":11,"arglist-strs":["[x y]"],"doc":"Returns the difference of x and y, throws ArithmeticException on overflow. ","row":525},{"fixed-arities":[1],"end-row":109,"meta":{},"name-end-col":19,"name-end-row":103,"name-row":103,"added":"1.11.10","ns":"cljs.math","name":"asin","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L103","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin","row":103},{"end-row":56,"meta":{},"name-end-col":34,"name-end-row":56,"private":true,"name-row":56,"ns":"cljs.math","name":"little-endian?","defined-by":"cljs.core/defonce","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L56","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":20,"end-col":55,"row":56},{"end-row":843,"meta":{},"name-end-col":42,"name-end-row":843,"private":true,"name-row":843,"ns":"cljs.math","name":"two-to-the-double-scale-up","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L843","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":16,"end-col":62,"row":843},{"fixed-arities":[1],"end-row":614,"meta":{},"name-end-col":27,"name-end-row":599,"name-row":599,"added":"1.11.10","ns":"cljs.math","name":"get-exponent","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L599","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":111,"arglist-strs":["[d]"],"doc":"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n  If d is zero or subnormal => min_Float64_exponent - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-","row":599},{"fixed-arities":[2],"end-row":541,"meta":{},"name-end-col":29,"name-end-row":534,"name-row":534,"added":"1.11.10","ns":"cljs.math","name":"multiply-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L534","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":11,"arglist-strs":["[x y]"],"doc":"Returns the product of x and y, throws ArithmeticException on overflow. ","row":534},{"fixed-arities":[2],"end-row":333,"meta":{},"name-end-col":24,"name-end-row":252,"private":true,"name-row":252,"ns":"cljs.math","name":"IEEE-fmod","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L252","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":79,"arglist-strs":["[x y]"],"doc":"Return x mod y in exact arithmetic. Method: shift and subtract.\n  Reimplements __ieee754_fmod from the JDK.\n  Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n  bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n  Fortunately the values that are shifted are expected to be 32 bit signed.","row":252},{"fixed-arities":[1],"end-row":165,"meta":{},"name-end-col":20,"name-end-row":158,"name-row":158,"added":"1.11.10","ns":"cljs.math","name":"log10","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L158","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":22,"arglist-strs":["[a]"],"doc":"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10","row":158},{"end-row":218,"meta":{},"name-end-col":27,"name-end-row":205,"private":true,"name-row":205,"ns":"cljs.math","name":"Zero","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L205","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":23,"end-col":8,"row":205},{"fixed-arities":[1],"end-row":839,"meta":{},"name-end-col":24,"name-end-row":816,"name-row":816,"added":"1.11.10","ns":"cljs.math","name":"next-down","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L816","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => Number/MAX_VALUE\n  If d is zero => -Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","row":816},{"fixed-arities":[2],"end-row":569,"meta":{},"name-end-col":11,"name-end-row":567,"private":true,"name-row":567,"ns":"cljs.math","name":"xor","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L567","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":8,"end-col":40,"arglist-strs":["[a b]"],"row":567},{"fixed-arities":[1],"end-row":138,"meta":{},"name-end-col":25,"name-end-row":133,"name-row":133,"added":"1.11.10","ns":"cljs.math","name":"to-degrees","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L133","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":28,"arglist-strs":["[r]"],"doc":"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-","row":133},{"end-row":10,"meta":{},"name-end-col":19,"name-end-row":10,"name-row":10,"added":"1.11.10","ns":"cljs.math","name":"E","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L5","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":18,"end-col":27,"doc":"Constant for Euler's number e, the base for natural logarithms.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E","row":5},{"end-row":224,"meta":{},"name-end-col":27,"name-end-row":224,"private":true,"name-row":224,"ns":"cljs.math","name":"HI-y","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L224","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":23,"end-col":46,"row":224},{"end-row":29,"meta":{},"name-end-col":36,"name-end-row":29,"private":true,"name-row":29,"added":"1.11.10","ns":"cljs.math","name":"RADIANS-TO-DEGREES","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L25","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":18,"end-col":55,"doc":"Constant used to convert an angular value in radians to the equivalent in degrees","row":25},{"fixed-arities":[2],"end-row":78,"meta":{},"name-end-col":9,"name-end-row":69,"private":true,"name-row":69,"ns":"cljs.math","name":"u<","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L69","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":7,"end-col":67,"arglist-strs":["[a b]"],"doc":"unsigned less-than comparator for 32-bit values","row":69},{"fixed-arities":[1],"end-row":549,"meta":{},"name-end-col":30,"name-end-row":543,"name-row":543,"added":"1.11.10","ns":"cljs.math","name":"increment-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L543","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":14,"arglist-strs":["[a]"],"doc":"Returns a incremented by 1, throws ArithmeticException on overflow.","row":543},{"fixed-arities":[1],"end-row":687,"meta":{},"name-end-col":19,"name-end-row":680,"name-row":680,"added":"1.11.10","ns":"cljs.math","name":"cosh","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L680","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh","row":680},{"end-row":35,"meta":{},"name-end-col":43,"name-end-row":35,"private":true,"name-row":35,"ns":"cljs.math","name":"EXP-BIAS","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L35","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":49,"row":35},{"end-row":67,"meta":{},"name-end-col":54,"name-end-row":67,"private":true,"name-row":67,"ns":"cljs.math","name":"INT32-NON-SIGN-BITS","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L67","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":66,"row":67},{"fixed-arities":[2],"end-row":626,"meta":{},"name-end-col":28,"name-end-row":616,"private":true,"name-row":616,"ns":"cljs.math","name":"hi-lo->double","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L616","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":17,"arglist-strs":["[h l]"],"doc":"Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n  h is the high 32 bits, l is the low 32 bits.","row":616},{"fixed-arities":[1],"end-row":183,"meta":{},"name-end-col":19,"name-end-row":176,"name-row":176,"added":"1.11.10","ns":"cljs.math","name":"cbrt","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L176","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt","row":176},{"fixed-arities":[1],"end-row":86,"meta":{},"name-end-col":18,"name-end-row":80,"name-row":80,"added":"1.11.10","ns":"cljs.math","name":"sin","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L80","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[a]"],"doc":"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin","row":80},{"fixed-arities":[1],"end-row":678,"meta":{},"name-end-col":19,"name-end-row":672,"name-row":672,"added":"1.11.10","ns":"cljs.math","name":"sinh","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L672","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[x]"],"doc":"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh","row":672},{"fixed-arities":[2],"end-row":582,"meta":{},"name-end-col":24,"name-end-row":571,"name-row":571,"added":"1.11.10","ns":"cljs.math","name":"floor-div","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L571","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":14,"arglist-strs":["[x y]"],"doc":"Integer division that rounds to negative infinity (as opposed to zero).\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-","row":571},{"fixed-arities":[1],"end-row":423,"meta":{},"name-end-col":19,"name-end-row":413,"name-row":413,"added":"1.11.10","ns":"cljs.math","name":"ceil","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L413","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":70,"arglist-strs":["[a]"],"doc":"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil","row":413},{"end-row":845,"meta":{},"name-end-col":44,"name-end-row":845,"private":true,"name-row":845,"ns":"cljs.math","name":"two-to-the-double-scale-down","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L845","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":16,"end-col":65,"row":845},{"end-row":33,"meta":{},"name-end-col":54,"name-end-row":33,"private":true,"name-row":33,"ns":"cljs.math","name":"SIGNIFICAND-WIDTH32","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L33","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":58,"row":33},{"end-row":39,"meta":{},"name-end-col":42,"name-end-row":39,"private":true,"name-row":39,"ns":"cljs.math","name":"EXP-MAX","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L39","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":52,"row":39},{"end-row":31,"meta":{},"name-end-col":48,"name-end-row":31,"private":true,"name-row":31,"ns":"cljs.math","name":"TWO-TO-THE-52","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L31","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":66,"row":31},{"fixed-arities":[1],"end-row":659,"meta":{},"name-end-col":18,"name-end-row":636,"name-row":636,"added":"1.11.10","ns":"cljs.math","name":"ulp","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L636","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[d]"],"doc":"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  If d is +/- Number/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-","row":636},{"end-row":41,"meta":{},"name-end-col":42,"name-end-row":41,"private":true,"name-row":41,"ns":"cljs.math","name":"EXP-MIN","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L41","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":49,"row":41},{"fixed-arities":[1],"end-row":93,"meta":{},"name-end-col":18,"name-end-row":88,"name-row":88,"added":"1.11.10","ns":"cljs.math","name":"cos","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L88","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[a]"],"doc":"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos","row":88},{"fixed-arities":[2],"end-row":484,"meta":{},"name-end-col":20,"name-end-row":478,"name-row":478,"added":"1.11.10","ns":"cljs.math","name":"atan2","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L478","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":26,"arglist-strs":["[y x]"],"doc":"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan","row":478},{"fixed-arities":[2],"end-row":869,"meta":{},"name-end-col":20,"name-end-row":847,"name-row":847,"added":"1.11.10","ns":"cljs.math","name":"scalb","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L847","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":69,"arglist-strs":["[d scaleFactor]"],"doc":"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between min_Float64_exponent and max_Float64_exponent.\n  scaleFactor is an integer\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-","row":847},{"fixed-arities":[2],"end-row":597,"meta":{},"name-end-col":24,"name-end-row":584,"name-row":584,"added":"1.11.10","ns":"cljs.math","name":"floor-mod","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L584","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":26,"arglist-strs":["[x y]"],"doc":"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-","row":584},{"end-row":17,"meta":{},"name-end-col":20,"name-end-row":17,"name-row":17,"added":"1.11.10","ns":"cljs.math","name":"PI","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L12","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":18,"end-col":29,"doc":"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI","row":12},{"fixed-arities":[1],"end-row":557,"meta":{},"name-end-col":30,"name-end-row":551,"name-row":551,"added":"1.11.10","ns":"cljs.math","name":"decrement-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L551","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":14,"arglist-strs":["[a]"],"doc":"Returns a decremented by 1, throws ArithmeticException on overflow. ","row":551},{"fixed-arities":[0],"end-row":514,"meta":{},"name-end-col":21,"name-end-row":508,"name-row":508,"added":"1.11.10","ns":"cljs.math","name":"random","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L508","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[]"],"doc":"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution. Not cryptographically secure. The seed is chosen internally\n  and cannot be selected.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random","row":508},{"fixed-arities":[2],"end-row":705,"meta":{},"name-end-col":20,"name-end-row":699,"name-row":699,"added":"1.11.10","ns":"cljs.math","name":"hypot","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L699","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":26,"arglist-strs":["[x y]"],"doc":"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot","row":699},{"fixed-arities":[1],"end-row":565,"meta":{},"name-end-col":27,"name-end-row":559,"name-row":559,"added":"1.11.10","ns":"cljs.math","name":"negate-exact","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L559","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":12,"arglist-strs":["[a]"],"doc":"Returns the negation of a, throws ArithmeticException on overflow. ","row":559},{"fixed-arities":[1],"end-row":131,"meta":{},"name-end-col":25,"name-end-row":126,"name-row":126,"added":"1.11.10","ns":"cljs.math","name":"to-radians","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L126","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":30,"arglist-strs":["[deg]"],"doc":"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-","row":126},{"fixed-arities":[1],"end-row":174,"meta":{},"name-end-col":19,"name-end-row":167,"name-row":167,"added":"1.11.10","ns":"cljs.math","name":"sqrt","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L167","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt","row":167},{"end-row":841,"meta":{},"name-end-col":25,"name-end-row":841,"private":true,"name-row":841,"ns":"cljs.math","name":"MAX_SCALE","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L841","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":16,"end-col":75,"row":841},{"fixed-arities":[1],"end-row":436,"meta":{},"name-end-col":20,"name-end-row":425,"name-row":425,"added":"1.11.10","ns":"cljs.math","name":"floor","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L425","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":72,"arglist-strs":["[a]"],"doc":"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor","row":425},{"fixed-arities":[1],"end-row":476,"meta":{},"name-end-col":19,"name-end-row":465,"name-row":465,"added":"1.11.10","ns":"cljs.math","name":"rint","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L465","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":17,"arglist-strs":["[a]"],"doc":"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-","row":465},{"fixed-arities":[1],"end-row":124,"meta":{},"name-end-col":19,"name-end-row":118,"name-row":118,"added":"1.11.10","ns":"cljs.math","name":"atan","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L118","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan","row":118},{"end-row":65,"meta":{},"name-end-col":53,"name-end-row":65,"private":true,"name-row":65,"ns":"cljs.math","name":"INT32-NON-SIGN-BIT","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L65","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":65,"row":65},{"fixed-arities":[1],"end-row":670,"meta":{},"name-end-col":21,"name-end-row":661,"name-row":661,"added":"1.11.10","ns":"cljs.math","name":"signum","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L661","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":24,"arglist-strs":["[d]"],"doc":"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => sign of d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-","row":661},{"end-row":61,"meta":{},"name-end-col":71,"name-end-row":61,"private":true,"name-row":61,"ns":"cljs.math","name":"LO","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L61","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":69,"end-col":81,"doc":"offset of hi integers in 64-bit values","row":61},{"fixed-arities":[1],"end-row":814,"meta":{},"name-end-col":22,"name-end-row":790,"name-row":790,"added":"1.11.10","ns":"cljs.math","name":"next-up","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L790","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":8,"arglist-strs":["[d]"],"doc":"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-","row":790},{"fixed-arities":[2],"end-row":411,"meta":{},"name-end-col":29,"name-end-row":335,"name-row":335,"added":"1.11.10","ns":"cljs.math","name":"IEEE-remainder","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L335","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":32,"arglist-strs":["[dividend divisor]"],"doc":"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n   where n is the integer closest to the exact value of dividend / divisor.\n   If two integers are equally close, then n is the even one.\n   If the remainder is zero, sign will match dividend.\n   If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n   If dividend is finite and divisor is infinite => dividend\n\n   Method: based on fmod return x-[x/p]chopped*p exactlp.\n   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-","row":335},{"fixed-arities":[1],"end-row":116,"meta":{},"name-end-col":19,"name-end-row":111,"name-row":111,"added":"1.11.10","ns":"cljs.math","name":"acos","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L111","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":21,"arglist-strs":["[a]"],"doc":"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos","row":111},{"fixed-arities":[2],"end-row":788,"meta":{},"name-end-col":25,"name-end-row":742,"name-row":742,"added":"1.11.10","ns":"cljs.math","name":"next-after","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L742","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":38,"arglist-strs":["[start direction]"],"doc":"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Number/MAX_VALUE with same sign as start\n  If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-","row":742},{"fixed-arities":[1],"end-row":725,"meta":{},"name-end-col":20,"name-end-row":717,"name-row":717,"added":"1.11.10","ns":"cljs.math","name":"log1p","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L717","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":22,"arglist-strs":["[x]"],"doc":"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or ##-Inf or < -1 => ##NaN\n  If x is -1 => ##-Inf\n  If x is ##Inf => ##Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p","row":717},{"end-row":220,"meta":{},"name-end-col":39,"name-end-row":220,"private":true,"name-row":220,"ns":"cljs.math","name":"xpos","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L220","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":42,"row":220},{"end-row":221,"meta":{},"name-end-col":39,"name-end-row":221,"private":true,"name-row":221,"ns":"cljs.math","name":"ypos","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L221","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":42,"row":221},{"end-row":223,"meta":{},"name-end-col":27,"name-end-row":223,"private":true,"name-row":223,"ns":"cljs.math","name":"LO-x","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L223","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":23,"end-col":46,"row":223},{"end-row":222,"meta":{},"name-end-col":27,"name-end-row":222,"private":true,"name-row":222,"ns":"cljs.math","name":"HI-x","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L222","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":23,"end-col":46,"row":222},{"end-row":37,"meta":{},"name-end-col":48,"name-end-row":37,"private":true,"name-row":37,"ns":"cljs.math","name":"EXP-BITMASK32","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L37","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":60,"row":37},{"fixed-arities":[1],"end-row":203,"meta":{},"name-end-col":19,"name-end-row":185,"private":true,"name-row":185,"added":"1.11.10","ns":"cljs.math","name":"fabs","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L185","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":17,"arglist-strs":["[x]"],"doc":"Internal function to convert doubles to absolute values.\n  This duplicates the C implementations in Java, in case there is are corner-case differences.","row":185},{"fixed-arities":[0],"end-row":54,"meta":{},"name-end-col":25,"name-end-row":47,"private":true,"name-row":47,"ns":"cljs.math","name":"get-little-endian","defined-by":"cljs.core/defn-","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L47","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":8,"end-col":25,"arglist-strs":["[]"],"doc":"Tests the platform for endianness. Returns true when little-endian, false otherwise.","row":47},{"fixed-arities":[1],"end-row":715,"meta":{},"name-end-col":20,"name-end-row":707,"name-row":707,"added":"1.11.10","ns":"cljs.math","name":"expm1","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L707","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":22,"arglist-strs":["[x]"],"doc":"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1","row":707},{"end-row":63,"meta":{},"name-end-col":45,"name-end-row":63,"private":true,"name-row":63,"ns":"cljs.math","name":"INT32-MASK","defined-by":"cljs.core/def","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L63","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":35,"end-col":57,"row":63},{"fixed-arities":[1],"end-row":506,"meta":{},"name-end-col":20,"name-end-row":493,"name-row":493,"added":"1.11.10","ns":"cljs.math","name":"round","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L493","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":42,"arglist-strs":["[a]"],"doc":"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n  If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round","row":493},{"fixed-arities":[1],"end-row":147,"meta":{},"name-end-col":18,"name-end-row":140,"name-row":140,"added":"1.11.10","ns":"cljs.math","name":"exp","defined-by":"cljs.core/defn","git-source":"https://github.com/clojure/clojurescript/blob/r1.11.60/src/main/cljs/cljs/math.cljs#L140","lang":[],"filename":"/src/main/cljs/cljs/math.cljs","col":1,"name-col":15,"end-col":20,"arglist-strs":["[a]"],"doc":"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp","row":140}]